#
# Inputs (Action Inputs)  : kebab-case (all lowercase letters with hyphens)
# Outputs (Action Outputs): camelCase (lowercase first letter with uppercase subsequent words)
# Environment Variables   : UPPERCASE_WITH_UNDERSCORES
# Job Names               : PascalCase or Title Case
# Step IDs                : snake_case or kebab-case
#
name: Build, Test & Release

# Permissions for the workflow
permissions:
  contents: write
  checks: write
  pull-requests: write
  statuses: write

# Trigger workflow on push to the main branch
on:
  push:
    branches:
      - main

env:
  #
  # Build and release settings
  ARTIFACT_TYPE       : 'Production'
  DOTNET_VERSION      : '8.0.x'
  BINARIES_DIRECTORY  : ${{ github.workspace }}/binaries
  BUILD_CONFIGURATION : 'Release'
  BUILD_PLATFORM      : 'any cpu'
  PROJECT_NAME        : 'G4'
  STAGE_DIRECTORY     : ${{ github.workspace }}/artifact_staging
  #
  # Publish settings
  NUGET_API_KEY       : ${{ secrets.NUGET_PUBLIC_KEY }}
  NUGET_SOURCE        : ${{ vars.NUGET_PUBLIC_SOURCE }}
  #
  # Test settings
  BROWSERSTACK_API_KEY: ${{ secrets.BROWSERSTACK_API_KEY }}
  BROWSERSTACK_USER   : ${{ secrets.BROWSERSTACK_USER }}
  G4_API_KEY          : ${{ secrets.G4_API_KEY }}
  GRID_ENDPOINT       : ${{ secrets.GRID_ENDPOINT }}
  TEST_SETTINGS_FILE  : 'Default.runsettings'
  TEST_WORKERS        : '5'

# Default settings for all run steps
defaults:
  run:
    working-directory: src

jobs:
  NewVersion:
    name: New Version
    runs-on: ubuntu-latest
    outputs:
      buildVersion: ${{ steps.parse-version.outputs.version }}
      validVersion: ${{ steps.validate-version.outputs.valid }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Parse Build Version for GitHub Tag
      id: parse-version
      shell: pwsh
      run: echo "version=$(Get-Date -UFormat '%Y.%m.%d').${{ github.run_number }}" >> $env:GITHUB_OUTPUT

    - name: Validate Version ${{ steps.parse-version.outputs.version }}
      id: validate-version
      shell: pwsh
      run: |
        $version = "${{ steps.parse-version.outputs.version }}"
        echo "valid=$($version -match '^\d+(\.\d+){3}$')" >> $env:GITHUB_OUTPUT

  NewBuild:
    name: Restore & Build
    runs-on: ubuntu-latest
    if: ${{ needs.NewVersion.result == 'success' && needs.NewVersion.outputs.validVersion == 'True' }}
    needs: 
      - NewVersion

    env:
      BUILD_VERSION: ${{ needs.NewVersion.outputs.buildVersion }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: "${{ env.DOTNET_VERSION }}"

    - name: Restore Dependencies
      shell: pwsh 
      run: dotnet restore

    - name: Build ${{ env.PROJECT_NAME }} v${{ env.BUILD_VERSION }}
      shell: pwsh
      run: dotnet build

  # invoke-unit-tests:
  #   name: Invoke Unit Tests & Artifact Results
  #   runs-on: ubuntu-latest
  #   if: ${{ needs.NewVersion.result == 'success' && needs.NewVersion.outputs.validVersion == 'True' }}
  #   needs: 
  #     - NewBuild
  #     - NewVersion
  #   defaults:
  #     run:
  #       working-directory: ${{ github.workspace }}

  #   env:
  #     buildVersion: ${{ needs.NewVersion.outputs.buildVersion }}
  #     PROJECT_NAME: 'G4.UnitTests'
  #     projectType: 'csproj'
  #     TEST_SETTINGS_FILE: 'Default.runsettings'
  #     resultsArtifactName: unit-test-results-${{ needs.NewVersion.outputs.buildVersion }}
    
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Set Working Directory
  #       id: set-working-directory
  #       shell: pwsh
  #       run: |
  #         $projectFileName  = "${{ env.PROJECT_NAME }}.${{ env.projectType }}"
  #         $projectFile      = (Get-ChildItem -Path . -Filter $projectFileName -Recurse).FullName
  #         $workingDirectory = [System.IO.Path]::GetDirectoryName($projectFile)
  #         Write-Host "Working Directory: $workingDirectory"
      
  #         $OutputString = "working-directory=$workingDirectory"
  #         $OutputString | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

  #     - name: List files in the repository
  #       run: ls -R

  #     - name: Set the Default Test Settings File
  #       id: test-settings
  #       shell: pwsh
  #       run: |
  #           # read test settings
  #           $runSettingsFileName  = "${{ env.TEST_SETTINGS_FILE }}"
  #           $runSettingsFile      = (Get-ChildItem -Path . -Filter $runSettingsFileName -Recurse).FullName
  #           [xml]$runSettings     = Get-Content -Path $runSettingsFile
  #           #
  #           # setup
  #           $GRID_ENDPOINT         = $runSettings.SelectSingleNode("//Parameter[@name='Grid.Endpoint']")
  #           $BROWSERSTACK_USERname = $runSettings.SelectSingleNode("//Parameter[@name='BrowserStack.Username']")
  #           $BROWSERSTACK_API_KEY   = $runSettings.SelectSingleNode("//Parameter[@name='BrowserStack.Password']")
  #           $G4_API_KEY             = $runSettings.SelectSingleNode("//Parameter[@name='G4.Username']")
  #           $TEST_WORKERS              = $runSettings.SelectSingleNode("//MSTest//Workers")
  #           #
  #           # override with deployment settings
  #           $GRID_ENDPOINT.Value         = '${{ env.GRID_ENDPOINT }}'
  #           $BROWSERSTACK_USERname.Value = '${{ env.BROWSERSTACK_USER }}'
  #           $BROWSERSTACK_API_KEY.Value   = '${{ env.BROWSERSTACK_API_KEY }}'
  #           $G4_API_KEY.Value             = '${{ env.G4_API_KEY }}'
  #           $TEST_WORKERS.InnerText          = '${{ env.TEST_WORKERS }}'
  #           #
  #           # save settings
  #           Write-Host $runSettings
  #           $runSettings.Save($runSettingsFile)

  #     - name: Invoke Unit Tests
  #       uses: g4-api/g4-github-actions/actions/test-dotnet-project@v1
  #       if: steps.test-settings.outcome == 'success'
  #       with:
  #         build-version: ${{ env.buildVersion }}
  #         project-name: ${{ env.PROJECT_NAME }}
  #         project-type: ${{ env.projectType }}
  #         filter: 'TestCategory=ExportData'
  #         test-settings: ${{ env.TEST_SETTINGS_FILE }}
  #         results-artifact-name: ${{ env.resultsArtifactName }}

  # publish-test-results:
  #   name: Publish Test Results
  #   runs-on: ubuntu-latest
  #   if: always()
  #   needs: invoke-unit-tests
  #   defaults:
  #     run:
  #       working-directory: ${{ github.workspace }}

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: List Downloadable Artifacts
  #       run: gh api -X GET /repos/${{ github.repository }}/actions/artifacts
  #       env:
  #         GH_TOKEN: ${{ github.token }}

  #     - name: Download Test Results Artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: unit-test-results-${{ needs.NewVersion.outputs.buildVersion }}
  #         path: ${{ env.STAGE_DIRECTORY }}

  #     - name: Publish Test Results
  #       uses: EnricoMi/publish-unit-test-result-action@v2
  #       if: always()
  #       with:
  #         check_name: Unit Tests Results
  #         files: |
  #           ${{ env.STAGE_DIRECTORY }}/*.xml
