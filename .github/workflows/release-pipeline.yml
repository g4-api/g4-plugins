name: Build, Test & Release

# Permissions for the workflow
permissions:
  contents: write
  checks: write
  pull-requests: write
  statuses: write

# Trigger workflow on push to the main branch
on:
  push:
    branches:
      - main

env:
  #
  # Build and release settings
  artifactStagingDirectory: ${{ github.workspace }}/artifact_staging
  artifactType: 'Production'
  binariesDirectory: ${{ github.workspace }}/binaries
  buildConfiguration: 'Release'
  buildPlatform: 'any cpu'
  projectName: 'G4'
  #
  # Publish settings
  nugetApiKey: ${{ secrets.NUGET_PUBLIC_KEY }}
  nugetPackageSource: ${{ vars.NUGET_PUBLIC_SOURCE }}
  #
  # Test settings
  browserStackApiKey: ${{ secrets.BROWSERSTACK_API_KEY }}
  browserStackUser: ${{ secrets.BROWSERSTACK_USER }}
  g4ApiKey: ${{ secrets.G4_API_KEY }}
  gridEndpoint: ${{ secrets.GRID_ENDPOINT }}
  testSettingsFileName: 'Default.runsettings'
  workers: '5'

# Default settings for all run steps
defaults:
  run:
    working-directory: src

jobs:
  new-version:
    name: New Version
    runs-on: ubuntu-latest
    outputs:
      buildVersion: ${{ steps.parse-version.outputs.version }}
      validVersion: ${{ steps.validate-version.outputs.valid }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Parse Build Version for GitHub Tag
      id: parse-version
      shell: pwsh
      run: echo "version=$(Get-Date -UFormat '%Y.%m.%d').${{ github.run_number }}" >> $env:GITHUB_OUTPUT

    - name: Validate Version ${{ steps.parse-version.outputs.version }}
      id: validate-version
      shell: pwsh
      run: |
        $version = "${{ steps.parse-version.outputs.version }}"
        echo "valid=$($version -match '^\d+(\.\d+){3}$')" >> $env:GITHUB_OUTPUT

  new-build:
    name: Restore & Build
    runs-on: ubuntu-latest
    if: ${{ needs.new-version.result == 'success' && needs.new-version.outputs.validVersion == 'True' }}
    needs: 
      - new-version

    env:
      buildVersion: ${{ needs.new-version.outputs.buildVersion }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Restore Dependencies
      shell: pwsh 
      run: dotnet restore

    - name: Build ${{ env.projectName }} v${{ env.buildVersion }}
      shell: pwsh
      run: dotnet build

  invoke-unit-tests:
    name: Invoke Unit Tests & Artifact Results
    runs-on: ubuntu-latest
    if: ${{ needs.new-version.result == 'success' && needs.new-version.outputs.validVersion == 'True' }}
    needs: 
      - new-build
      - new-version
    defaults:
      run:
        working-directory: ${{ github.workspace }}

    env:
      buildVersion: ${{ needs.new-version.outputs.buildVersion }}
      projectName: 'G4.UnitTests'
      projectType: 'csproj'
      testSettingsFileName: 'Default.runsettings'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: List files in the repository
        run: ls -R

      - name: Set the Default Test Settings File
        id: test-settings
        shell: pwsh
        run: |
            # read test settings
            $runSettingsFileName  = "${{ env.testSettingsFileName }}"
            $runSettingsFile      = (Get-ChildItem -Path . -Filter $runSettingsFileName -Recurse).FullName
            [xml]$runSettings     = Get-Content "$runSettingsFile"
            #
            # setup
            $gridEndpoint         = $runSettings.SelectSingleNode("//Parameter[@name='Grid.Endpoint']")
            $browserStackUsername = $runSettings.SelectSingleNode("//Parameter[@name='BrowserStack.Username']")
            $browserStackApiKey   = $runSettings.SelectSingleNode("//Parameter[@name='BrowserStack.Password']")
            $g4ApiKey             = $runSettings.SelectSingleNode("//Parameter[@name='G4.Username']")
            $workers              = $runSettings.SelectSingleNode("//MSTest//Workers")
            #
            # override with deployment settings
            $gridEndpoint.Value         = '${{ env.gridEndpoint }}'
            $browserStackUsername.Value = '${{ env.browserStackUser }}'
            $browserStackApiKey.Value   = '${{ env.browserStackApiKey }}'
            $g4ApiKey.Value             = '${{ env.g4ApiKey }}'
            $workers.InnerText          = '${{ env.workers }}'
            #
            # save settings
            $runSettings.Save($runSettingsFile)

      - name: Invoke Unit Tests
        uses: g4-api/g4-github-actions/actions/test-dotnet-project@v1
        if: steps.test-settings.outcome == 'success'
        with:
          build-version: ${{ env.buildVersion }}
          project-name: ${{ env.projectName }}
          project-type: ${{ env.projectType }}
          filter: 'TestCategory=ExportData'
          test-settings: ${{ env.testSettingsFileName }}
