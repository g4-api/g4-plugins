#
# Inputs (Action Inputs)  : kebab-case (all lowercase letters with hyphens)
# Outputs (Action Outputs): camelCase (lowercase first letter with uppercase subsequent words)
# Environment Variables   : UPPERCASE_WITH_UNDERSCORES
# Job Names               : PascalCase or Title Case
# Step IDs                : snake_case or kebab-case
#
name: Build, Test & Release

# Permissions for the workflow
permissions:
  contents: write
  checks: write
  pull-requests: write
  statuses: write

# Trigger workflow on push to the main branch
on:
  push:
    branches:
      - main

env:
  #
  # Build and release settings
  ARTIFACT_TYPE       : 'Production'
  DOTNET_VERSION      : '8.0.x'
  BINARIES_DIRECTORY  : ${{ github.workspace }}/binaries
  BUILD_CONFIGURATION : 'Release'
  BUILD_PLATFORM      : 'any cpu'
  SOLUTION_NAME       : 'G4'
  STAGE_DIRECTORY     : ${{ github.workspace }}/artifact_staging
  #
  # Publish settings
  NUGET_API_KEY       : ${{ secrets.NUGET_PUBLIC_KEY }}
  NUGET_SOURCE        : ${{ vars.NUGET_PUBLIC_SOURCE }}
  #
  # Test settings
  BROWSERSTACK_API_KEY: ${{ secrets.BROWSERSTACK_API_KEY }}
  BROWSERSTACK_USER   : ${{ secrets.BROWSERSTACK_USER }}
  G4_API_KEY          : ${{ secrets.G4_API_KEY }}
  GRID_ENDPOINT       : ${{ secrets.GRID_ENDPOINT }}
  TEST_SETTINGS_FILE  : 'Default.runsettings'
  TEST_WORKERS        : '5'

# Default settings for all run steps
defaults:
  run:
    working-directory: src

jobs:
  NewVersion:
    name: New Version
    runs-on: ubuntu-latest
    outputs:
      buildVersion: ${{ steps.parse-version.outputs.version }}
      validVersion: ${{ steps.validate-version.outputs.valid }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Parse Build Version for GitHub Tag
      id: parse-version
      shell: pwsh
      run: echo "version=$(Get-Date -UFormat '%Y.%m.%d').${{ github.run_number }}" >> $env:GITHUB_OUTPUT

    - name: Validate Version ${{ steps.parse-version.outputs.version }}
      id: validate-version
      shell: pwsh
      run: |
        $version = "${{ steps.parse-version.outputs.version }}"
        echo "valid=$($version -match '^\d+(\.\d+){3}$')" >> $env:GITHUB_OUTPUT

  NewBuild:
    name: Restore & Build
    runs-on: ubuntu-latest
    if: ${{ needs.NewVersion.result == 'success' && needs.NewVersion.outputs.validVersion == 'True' }}
    needs: 
      - NewVersion

    env:
      BUILD_VERSION: ${{ needs.NewVersion.outputs.buildVersion }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: "${{ env.DOTNET_VERSION }}"

    - name: Restore Dependencies
      shell: pwsh 
      run: dotnet restore

    - name: Build ${{ env.SOLUTION_NAME }} v${{ env.BUILD_VERSION }}
      shell: pwsh
      run: dotnet build

  InvokeUnitTests:
    name: Invoke Unit Tests & Artifact Results
    runs-on: ubuntu-latest
    if: ${{ needs.NewVersion.result == 'success' && needs.NewVersion.outputs.validVersion == 'True' }}
    needs: 
      - NewBuild
      - NewVersion
    defaults:
      run:
        working-directory: ${{ github.workspace }}

    env:
      ARTIFACT_NAME    : unit-test-results-${{ needs.NewVersion.outputs.buildVersion }}
      BUILD_VERSION    : ${{ needs.NewVersion.outputs.buildVersion }}
      PROJECT_NAME     : 'G4.UnitTests'
      PROJECT_TYPE     : 'csproj'
      TEST_REPORT_FILE : ${{ env.STAGE_DIRECTORY }}/TestOutput.${{ env.PROJECT_NAME }}.${{ env.BUILD_VERSION }}.xml

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set Working Directory
        id: set-working-directory
        shell: pwsh
        run: |
          $projectFileName  = "${{ env.PROJECT_NAME }}.${{ env.PROJECT_TYPE }}"
          $projectFile      = (Get-ChildItem -Path . -Filter $projectFileName -Recurse).FullName
          $workingDirectory = [System.IO.Path]::GetDirectoryName($projectFile)
          Write-Host "Working Directory: $workingDirectory"
      
          $OutputString = "workingDirectory=$workingDirectory"
          $OutputString | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: Set the Default Test Settings File
        id: set-test-settings
        shell: pwsh
        run: |
            # read test settings
            $testSettingsFile      = "${{ env.TEST_SETTINGS_FILE }}"
            $testSettingsFilePath  = (Get-ChildItem -Path . -Filter $testSettingsFile -Recurse).FullName
            [xml]$runSettings      = Get-Content -Path $testSettingsFilePath
            #
            # setup
            $browserStackBuildname = $runSettings.SelectSingleNode("//Parameter[@name='Build.Name']")
            $browserStackUsername  = $runSettings.SelectSingleNode("//Parameter[@name='BrowserStack.Username']")
            $browserStackPassword  = $runSettings.SelectSingleNode("//Parameter[@name='BrowserStack.Password']")
            $g4Username            = $runSettings.SelectSingleNode("//Parameter[@name='G4.Username']")
            $gridEndpoint          = $runSettings.SelectSingleNode("//Parameter[@name='Grid.Endpoint']")
            $workers               = $runSettings.SelectSingleNode("//MSTest//Workers")
            #
            # override with deployment settings
            $browserStackBuildname.Value = 'G4™ Plugins v${{ env.BUILD_VERSION }}'
            $browserStackUsername.Value  = '${{ env.BROWSERSTACK_USER }}'
            $browserStackPassword.Value  = '${{ env.BROWSERSTACK_API_KEY }}'
            $g4Username.Value            = '${{ env.G4_API_KEY }}'
            $gridEndpoint.Value          = '${{ env.GRID_ENDPOINT }}'
            $workers.InnerText           = '${{ env.TEST_WORKERS }}'
            #
            # save settings
            $runSettings.Save($testSettingsFilePath)
            Write-Host "Settings File: $testSettingsFilePath"
            
            $OutputString = "runSettingsFilePath=$testSettingsFilePath"
            $OutputString | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: Unit Tests and Code Coverage
        shell: pwsh
        env:
          TEST_SETTINGS_FILE_PATH: ${{ steps.set-test-settings.outputs.testSettingsFilePath }}
          TEST_FILTER: 'TestCategory=Logger'
        working-directory: ${{ steps.set-working-directory.outputs.workingDirectory }}
        run: |
          $projectFileName      = "${{ env.PROJECT_NAME }}.${{ env.PROJECT_TYPE }}"
          $projectFile          = (Get-ChildItem -Path . -Filter $projectFileName -Recurse).FullName
          $testSettingsFilePath = "${{ env.TEST_SETTINGS_FILE_PATH }}"
          $testDirectory        = [System.IO.Path]::GetDirectoryName($projectFile)
          $testFilterExpression = "${{ env.TEST_FILTER }}"
          $testReportFile       = "${{ env.TEST_REPORT_FILE }}"
      
          Write-Host "Project File Name             : $projectFileName"
          Write-Host "Project File                  : $projectFile"
          Write-Host "Run Settings File Name        : $runSettingsFileName"
          Write-Host "Run Settings File             : $runSettingsFile"
          Write-Host "Test Directory                : $testDirectory"
          Write-Host "Initial Test Filter Expression: $testFilterExpression"
          Write-Host "Test Report File              : $testReportFile"
                 
          Write-Host "Executing dotnet test command with the following parameters:"
          Write-Host "Test Filter Expression        : $testFilterExpression"
          Write-Host "Run Settings File Argument    : $runSettingsFile"
          Write-Host "Test Report File              : $testReportFile"
          
          $filterToken         = $testFilterExpression
          $settingsToken       = $runSettingsFile
          $loggerToken         = ('"trx;LogFileName=' + $testReportFile + '"')
          $collectToken        = '"Xplat Code Coverage"'
          $argumentsCollection = @(
              "test"
          )
          
          if(![string]::IsNullOrEmpty($testFilterExpression)) {
              $argumentsCollection += ('--filter "' + $testFilterExpression + '"')
          }
          
          if(![string]::IsNullOrEmpty($runSettingsFileName)) {
              $argumentsCollection += ('--settings "' + $runSettingsFile + '"')
          }
          
          $argumentsCollection += "-l:" + ('"trx;LogFileName=' + $testReportFile + '"')
          $argumentsCollection += "--collect:" + '"Xplat Code Coverage"'
          
          $arguments = $argumentsCollection -join " "
          
          Set-Location $testDirectory
          Write-Host "Changed directory to : $testDirectory"
      
          Start-Process -FilePath "dotnet" -ArgumentList $arguments -NoNewWindow -Wait
  
      - name: Upload Unit Tests Results
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.TEST_REPORT_FILE }}
      # - name: Invoke Unit Tests
      #   uses: g4-api/g4-github-actions/actions/test-dotnet-project@v1
      #   if: steps.test-settings.outcome == 'success'
      #   with:
      #     build-version: ${{ env.buildVersion }}
      #     project-name: ${{ env.PROJECT_NAME }}
      #     project-type: ${{ env.projectType }}
      #     filter: 'TestCategory=ExportData'
      #     test-settings: ${{ env.TEST_SETTINGS_FILE }}
      #     results-artifact-name: ${{ env.resultsArtifactName }}

  # publish-test-results:
  #   name: Publish Test Results
  #   runs-on: ubuntu-latest
  #   if: always()
  #   needs: InvokeUnitTests
  #   defaults:
  #     run:
  #       working-directory: ${{ github.workspace }}

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: List Downloadable Artifacts
  #       run: gh api -X GET /repos/${{ github.repository }}/actions/artifacts
  #       env:
  #         GH_TOKEN: ${{ github.token }}

  #     - name: Download Test Results Artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: unit-test-results-${{ needs.NewVersion.outputs.buildVersion }}
  #         path: ${{ env.STAGE_DIRECTORY }}

  #     - name: Publish Test Results
  #       uses: EnricoMi/publish-unit-test-result-action@v2
  #       if: always()
  #       with:
  #         check_name: Unit Tests Results
  #         files: |
  #           ${{ env.STAGE_DIRECTORY }}/*.xml
