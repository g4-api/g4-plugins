{
	"author": {
		"name": "Roei Sabag",
		"link": "https://www.linkedin.com/in/roei-sabag-247aa18/"
	},
	"categories": [
		"DataManagement"
	],
	"context": {
		"integration": {
			"github": {
				"document": "https://github.com/g4-api/g4-plugins/blob/main/docs/DataCollectors/CsvDataCollector.md",
				"source": "https://github.com/g4-api/g4-plugins/blob/main/src/G4.Plugins.Common/DataCollectors/CsvDataCollector.cs"
			},
			"rag": {
				"qa": [
					{
						"question": "What is the CsvDataCollector plugin and why does it matter?",
						"answer": "CsvDataCollector writes data from extraction rules into CSV files, providing a reliable, human-readable format for analysis and downstream automation steps."
					},
					{
						"question": "What are the key features and primary parameters of CsvDataCollector?",
						"answer": "It offers the ForEntity parameter for real-time or bulk writes, the Source parameter for output file path configuration, and automatic header generation controlled by the Type parameter."
					},
					{
						"question": "How does CsvDataCollector integrate into automation workflows?",
						"answer": "It is specified as the “dataCollector” property under extraction rules, which configures when and where the extracted data is written to the CSV file."
					},
					{
						"question": "What are best practices for configuring and troubleshooting CsvDataCollector?",
						"answer": "Use ForEntity=true for large data sets to limit memory use, choose bulk writes for small data to reduce I/O, verify Source file permissions, adjust clearLinesBreak and trim settings for desired formatting, and consult the GitHub documentation links if issues arise."
					},
					{
						"question": "What is the structure of a CsvDataCollector rule definition?",
						"answer": "Rules use an object with “$type”: “Extraction”, a dataCollector object specifying ForEntity, Source, and Type fields, followed by extractionScope, onElement locator, and nested rule objects with $type Content, key, onElement, and regularExpression."
					},
					{
						"question": "What does the description section cover?",
						"answer": "It outlines the plugin Purpose, Key Features and Functionality, Usages in RPA, and Usages in Automation Testing, detailing how the plugin operates and common use cases."
					},
					{
						"question": "What is the manifestVersion?",
						"answer": "The manifestVersion is 4, indicating the schema version this plugin follows."
					},
					{
						"question": "Who is the author?",
						"answer": "The author is Roei Sabag with profile link https://www.linkedin.com/in/roei-sabag-247aa18/."
					},
					{
						"question": "What categories does the plugin belong to?",
						"answer": "It belongs to “DataManagement”, indicating its role in managing and exporting data from workflows."
					},
					{
						"question": "What platforms are supported?",
						"answer": "The plugin supports “Any”, making it compatible across all operating systems."
					},
					{
						"question": "What is the pluginType?",
						"answer": "The pluginType is “DataCollector”, indicating its function as a component that collects and writes data."
					},
					{
						"question": "What is the plugin key?",
						"answer": "The key is “CsvDataCollector”, which uniquely identifies this plugin in the automation framework."
					},
					{
						"question": "What summary is provided for the plugin?",
						"answer": "It writes data records into CSV files immediately or at the end of a run, automatically generates headers, and lets you select which fields to include."
					},
					{
						"question": "What properties does CsvDataCollector define?",
						"answer": "It defines ForEntity (Boolean, optional) to control write mode, Source (String, mandatory) for file path, and Type (DataCollector, mandatory) to select the collector type."
					},
					{
						"question": "Where can I find the plugin documentation?",
						"answer": "The documentation is available at https://github.com/g4-api/g4-plugins/blob/main/docs/DataCollectors/CsvDataCollector.md"
					},
					{
						"question": "Where is the plugin source code located?",
						"answer": "The source code is hosted at https://github.com/g4-api/g4-plugins/blob/main/src/G4.Plugins.Common/DataCollectors/CsvDataCollector.cs"
					},
					{
						"question": "What protocol settings are specified?",
						"answer": "Protocol settings specify apiDocumentation as “None” and w3c as “None”, indicating no external API docs or W3C standards are referenced."
					},
					{
						"question": "How does CsvDataCollector handle errors?",
						"answer": "On error, the plugin adds an exception to the response and log stream. By default, the workflow continues unless it is explicitly configured to stop on error."
					}
				]
			}
		}
	},
	"description": [
		"### Purpose",
		"",
		"The CsvDataCollector plugin takes data from your extraction rules and saves it into a CSV file. It opens or creates the file you name, adds a header row based on your data fields, and then writes each record either as it’s found or all at once at the end of the run. This makes it easy to keep your data organized in a simple format that anyone can read or use for further steps.",
		"",
		"### Key Features and Functionality",
		"",
		"| Feature                | Description                                                                                    |",
		"|------------------------|------------------------------------------------------------------------------------------------|",
		"| Extraction Integration | Works with your extraction rules so every item you collect goes straight to the CSV file.      |",
		"| Write Modes            | Lets you write each record in real time or save all of them at once at the end of the run.     |",
		"| Unified Data Storage   | Merges information from web pages, APIs, databases, or files into a single CSV table.          |",
		"| Custom Columns         | Infers column headers from your data or lets you pick which fields to include and their order. |",
		"",
		"### Usages in RPA",
		"",
		"| Use Case                | Description                                                                                   |",
		"|-------------------------|-----------------------------------------------------------------------------------------------|",
		"| Web Scraping            | Sends lists of products, articles, or other page data directly into a CSV for later review.   |",
		"| In-Process Data Capture | Records items like invoices or customer records during a workflow and saves them immediately. |",
		"| Data Aggregation        | Gathers data from multiple targets into a single CSV for unified output.                      |",
		"| System Interchange      | Creates a common CSV file that other automation steps or external systems can read.           |",
		"",
		"### Usages in Automation Testing",
		"",
		"| Use Case            | Description                                                                                    |",
		"|---------------------|------------------------------------------------------------------------------------------------|",
		"| Test Result Logging | Records pass/fail status and error details in a CSV for easy review and audit.                 |",
		"| Performance Metrics | Captures timing and resource usage during tests and exports the results to a CSV for analysis. |"
	],
	"examples": [
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect XPath indexing or attribute usage",
						"Regex match occurs when it shouldn't",
						"Unexpected DOM structure",
						"Unexpected whitespace or formatting in the attribute value"
					],
					"expected_result": "Each location field is extracted and appended to DataFile.csv as it is discovered.",
					"notes": "This extraction writes records immediately for each element as it is extracted. The look-behind regex strips the `Location:` prefix. The extractionScope `Elements` processes each matching element node rather than the full document text. Immediate writes avoid high memory usage when scraping large pages. By default, line breaks and leading/trailing whitespace are preserved.",
					"use_case": "hotel_location_extraction_xpath_immediate_csv",
					"version": "1.0"
				},
				"labels": [
					"ElementText",
					"Extraction",
					"FileWrite",
					"RegexExtraction"
				]
			},
			"description": [
				"### Extract Hotel Location with Immediate Write",
				"",
				"This example demonstrates how to extract the hotel location value from each matching element and immediately save it to a CSV file.",
				"It locates each `<div class='hotel'>` using the XPath `//div[@class='hotel']`, processes each element node (extractionScope `Elements`), and applies a nested Content rule to the `<p>` element starting with `Location:`.",
				"A regular expression `(?<=\\w+:).*` is applied to the visible text to capture the content after the colon and strip the `Location:` prefix.",
				"By default, line breaks and leading/trailing whitespace are preserved.",
				"Records are written individually to `DataFile.csv` as each location is extracted.",
				"Immediate writes avoid high memory usage when scraping large pages."
			],
			"rule": {
				"$type": "Extraction",
				"dataCollector": {
					"ForEntity": true,
					"Source": "DataFile.csv",
					"Type": "CsvDataCollector"
				},
				"extractionScope": "Elements",
				"onElement": "//div[@class='hotel']",
				"rules": [
					{
						"$type": "Content",
						"key": "Location",
						"onElement": ".//p[starts-with(.,'Location:')]",
						"regularExpression": "(?<=\\w+:).*"
					}
				]
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect XPath indexing or attribute usage",
						"Regex match occurs when it shouldn't",
						"Unexpected DOM structure",
						"Unexpected whitespace or formatting in the attribute value"
					],
					"expected_result": "All location fields are extracted and appended to DataFile.csv after extraction completes.",
					"notes": "This extraction writes all records in a single batch after extraction completes. The look-behind regex strips the `Location:` prefix. The extractionScope `Elements` processes each matching element node rather than the full document text. Bulk writes minimize I/O calls for small datasets. By default, line breaks and leading/trailing whitespace are preserved.",
					"use_case": "hotel_location_extraction_xpath_bulk_csv",
					"version": "1.0"
				},
				"labels": [
					"ElementText",
					"Extraction",
					"FileWrite",
					"RegexExtraction"
				]
			},
			"description": [
				"### Extract Hotel Location with Bulk Write",
				"",
				"This example demonstrates how to extract the hotel location value from all matching elements and save them in bulk after extraction.",
				"It selects every `<div class='hotel'>` using the XPath `//div[@class='hotel']`, processes each element node (extractionScope `Elements`), and applies a nested Content rule to the `<p>` element starting with `Location:`.",
				"A regular expression `(?<=\\w+:).*` is applied to the visible text to capture the content after the colon and strip the `Location:` prefix.",
				"By default, line breaks and leading/trailing whitespace are preserved.",
				"All records are written together to `DataFile.csv` once extraction completes.",
				"Bulk writes minimize I/O calls for small datasets."
			],
			"rule": {
				"$type": "Extraction",
				"dataCollector": {
					"ForEntity": false,
					"Source": "DataFile.csv",
					"Type": "CsvDataCollector"
				},
				"extractionScope": "Elements",
				"onElement": "//div[@class='hotel']",
				"rules": [
					{
						"$type": "Content",
						"key": "Location",
						"onElement": ".//p[starts-with(.,'Location:')]",
						"regularExpression": "(?<=\\w+:).*"
					}
				]
			}
		}
	],
	"key": "CsvDataCollector",
	"manifestVersion": 4,
	"properties": [
		{
			"description": [
				"ForEntity determines whether each item is saved immediately or stored until the end of the run.",
				"It lets you see data in the file as it arrives instead of waiting until everything is collected."
			],
			"mandatory": false,
			"name": "ForEntity",
			"type": "Boolean"
		},
		{
			"description": [
				"A path that tells where to save the data file.",
				"It creates the file automatically if it does not exist."
			],
			"mandatory": true,
			"name": "Source",
			"type": "String"
		},
		{
			"description": [
				"Type sets the kind of collector to use for saving data.",
				"Only CsvDataCollector is valid for this plugin.",
				"New collector options appear automatically when they are added."
			],
			"mandatory": true,
			"name": "Type",
			"type": "DataCollector"
		}
	],
	"platforms": [
		"Any"
	],
	"pluginType": "DataCollector",
	"protocol": {
		"apiDocumentation": "None",
		"w3c": "None"
	},
	"summary": [
		"The CsvDataCollector plugin writes data records into a CSV file either as they are collected or all at once at the end of a run.",
		"It creates column headers automatically based on your data and lets you select which fields to include.",
		"Storing data in CSV format makes it easy to share, analyze, and feed into other automation tasks."
	]
}
