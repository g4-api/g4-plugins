{
	"aliases": [
		"Ge"
	],
	"author": {
		"link": "https://www.linkedin.com/in/roei-sabag-247aa18/",
		"name": "Roei Sabag"
	},
	"categories": [
		"Operators"
	],
	"context": {
		"integration": {
			"github": {
				"document": "https://github.com/g4-api/g4-plugins/blob/main/docs/Operators/GreaterEqual.md",
				"source": "https://github.com/g4-api/g4-plugins/blob/main/src/G4.Plugins.Common/Operators/GreaterEqualOperator.cs"
			},
			"rag": {
				"description": "The GreaterEqualOperator plugin enforces numeric comparison checks by evaluating whether one value meets or exceeds another. It supports dynamic LeftHand and RightHand parameters for flexible threshold comparisons and seamlessly integrates into automation workflows. Built to ensure reliable conditional logic, it preserves workflow stability by halting execution on invalid inputs.",
				"qa": [
					{
						"question": "What does the GreaterEqualOperator plugin do?",
						"answer": "It checks if the first numeric value is greater than or equal to the second and returns a Boolean result."
					},
					{
						"question": "What are the key features and parameters of the GreaterEqualOperator plugin?",
						"answer": "It performs numeric comparisons with two parameters, LeftHand and RightHand, supporting integer and floating-point inputs to evaluate if the baseline value meets or exceeds a threshold."
					},
					{
						"question": "Where can I find the GreaterEqualOperator plugin’s source code and documentation?",
						"answer": "Source code: https://github.com/g4-api/g4-plugins/blob/main/src/G4.Plugins.Common/Operators/GreaterEqualOperator.cs • Documentation: https://github.com/g4-api/g4-plugins/blob/main/docs/Operators/GreaterEqual.md"
					},
					{
						"question": "What are best practices for using the GreaterEqualOperator plugin?",
						"answer": "Ensure both LeftHand and RightHand are provided and numeric before invoking, validate inputs to prevent runtime errors, and explicitly handle error cases for missing or non-numeric values."
					},
					{
						"question": "How do I invoke the GreaterEqualOperator plugin in a rule?",
						"answer": "Use an Action rule with pluginName 'GreaterEqual' and provide arguments as '{{$ --LeftHand:<number> --RightHand:<number>}}' to specify the comparison values."
					},
					{
						"question": "What alias can be used to call the GreaterEqualOperator plugin?",
						"answer": "Ge"
					},
					{
						"question": "Who is the author of the GreaterEqualOperator plugin?",
						"answer": "Roei Sabag (https://www.linkedin.com/in/roei-sabag-247aa18/)"
					},
					{
						"question": "Which category does the GreaterEqualOperator plugin belong to?",
						"answer": "Operators"
					},
					{
						"question": "What is the plugin key for the GreaterEqualOperator plugin?",
						"answer": "GreaterEqual"
					},
					{
						"question": "What manifest version is used for the GreaterEqualOperator plugin?",
						"answer": "4"
					},
					{
						"question": "What parameters does the GreaterEqualOperator plugin require?",
						"answer": "LeftHand (first numeric value) and RightHand (second numeric threshold), both mandatory and of type Number."
					},
					{
						"question": "What type of plugin is the GreaterEqualOperator?",
						"answer": "Operator"
					},
					{
						"question": "What API documentation protocol is specified for the GreaterEqualOperator plugin?",
						"answer": "None"
					},
					{
						"question": "What W3C protocol reference is specified for the GreaterEqualOperator plugin?",
						"answer": "None"
					},
					{
						"question": "What scopes does the GreaterEqualOperator plugin support?",
						"answer": "Any"
					},
					{
						"question": "What is the summary of the GreaterEqualOperator plugin?",
						"answer": "The GreaterEqualOperator plugin compares two numbers to see if the first is at least as large as the second."
					},
					{
						"question": "Where does the plugin description content come from?",
						"answer": "It is drawn directly from the manifest’s description section, detailing the plugin’s purpose, features, and usage scenarios."
					},
					{
						"question": "How does the GreaterEqualOperator plugin handle error conditions?",
						"answer": "It throws a runtime error when required parameters are missing or non-numeric, allowing workflows to catch and manage invalid inputs."
					}
				]
			}
		}
	},
	"description": [
		"### Purpose",
		"",
		"The GreaterEqualOperator plugin checks if the first number is greater than or equal to the second number.",
		"It allows automation workflows to make decisions based on numeric comparisons.",
		"This enables conditional logic to proceed when values meet or exceed specified thresholds.",
		"",
		"### Key Features and Functionality",
		"",
		"| Feature              | Description                                               |",
		"|----------------------|-----------------------------------------------------------|",
		"| Numerical Comparison | Performs a numerical comparison of two numeric values.    |",
		"| Integration          | Can be used under condition expressions by other plugins. |",
		"",
		"### Usages in RPA",
		"",
		"| Use Case           | Description                                                        |",
		"|--------------------|--------------------------------------------------------------------|",
		"| Numeric Comparison | Validate if one numeric value is greater than or equal to another. |",
		"| Conditional Logic  | Control workflow logic based on numeric comparisons.               |",
		"",
		"### Usages in Automation Testing",
		"",
		"| Use Case           | Description                                                               |",
		"|--------------------|---------------------------------------------------------------------------|",
		"| Validation         | Validate output or state by comparing expected and actual numeric values. |",
		"| Dynamic Conditions | Create dynamic conditions based on numeric comparisons.                   |"
	],
	"examples": [
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"LeftHand equals RightHand",
						"LeftHand is not a number",
						"LeftHand parameter missing",
						"LeftHand value less than RightHand value",
						"RightHand is not a number",
						"RightHand parameter missing"
					],
					"expected_result": "The plugin returns true for a LeftHand value of 10 and a RightHand value of 5.",
					"notes": "The GreaterEqual plugin compares two numbers and returns a Boolean indicating if the first number is greater than or equal to the second number.",
					"use_case": "compare_numbers_with_greater_equal",
					"version": "1.0"
				},
				"labels": [
					"Comparison",
					"GreaterEqual",
					"NumericComparison",
					"PluginAction"
				]
			},
			"description": [
				"### GreaterEqual Plugin Example",
				"",
				"Use the GreaterEqual plugin to compare two numeric values.",
				"Generate the LeftHand and RightHand parameters at runtime using the macro `{{$ --LeftHand:10 --RightHand:5}}`.",
				"Check if 10 is greater than or equal to 5.",
				"Return true if the first value meets or exceeds the second value; otherwise return false.",
				"GreaterEqual plugin action consumes the values generated by the macro at runtime while the macro remains side-effect-free and reusable."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --LeftHand:10 --RightHand:5}}",
				"pluginName": "GreaterEqual"
			}
		}
	],
	"key": "GreaterEqual",
	"manifestVersion": 4,
	"parameters": [
		{
			"description": [
				"Specifies the first value in a greater than or equal comparison.",
				"It acts as the baseline against which the second number is measured.",
				"Accurate input here ensures the comparison yields correct results."
			],
			"mandatory": true,
			"name": "LeftHand",
			"type": "Number"
		},
		{
			"description": [
				"Specifies the second value in a greater than or equal comparison.",
				"It sets the threshold that the first number must meet or exceed.",
				"Accurate input here ensures the comparison yields reliable results."
			],
			"mandatory": true,
			"name": "RightHand",
			"type": "Number"
		}
	],
	"platforms": [
		"Any"
	],
	"pluginType": "Operator",
	"protocol": {
		"apiDocumentation": "None",
		"w3c": "None"
	},
	"summary": [
		"The GreaterEqualOperator plugin checks whether the first number is greater than or equal to the second number.",
		"It outputs a true or false result to drive conditional logic in automation workflows.",
		"This enables workflows to adapt based on numeric thresholds."
	]
}
