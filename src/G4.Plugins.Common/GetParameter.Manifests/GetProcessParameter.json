{
	"author": {
		"link": "https://www.linkedin.com/in/roei-sabag-247aa18/",
		"name": "Roei Sabag"
	},
	"categories": [
		"DataManagement"
	],
	"description": [
		"### Purpose",
		"",
		"This plugin lets automation workflows retrieve parameters stored in the G4 Hub process scope, making values like temporary settings or session tokens available to every workflow on the hub. These values persist until the hub restarts, so workflows can share data without manual steps. It works like machine-level parameters but without OS restrictions, offering a simple cross-workflow sharing mechanism.",
		"",
		"### Key Features and Functionality",
		"",
		"| Feature                          | Description                                                                         |",
		"|----------------------------------|-------------------------------------------------------------------------------------|",
		"| Hub-level variable access        | Reads values stored at the G4 Hub process level for all workflows until restart.    |",
		"| Temporary machine-level behavior | Acts like machine-scope parameters on any OS and resets when the hub restarts.      |",
		"| Live updates during runtime      | Picks up changes to hub-scoped parameters immediately for running workflows.        |",
		"| Output mapping                   | Exposes the fetched value in the `Result` output field for use by downstream steps. |",
		"",
		"### Usages in RPA",
		"",
		"| Use Case                         | Description                                                                                  |",
		"|----------------------------------|----------------------------------------------------------------------------------------------|",
		"| Shared settings across workflows | Provides a common source of values for all workflows running on the G4 Hub.                  |",
		"| Dynamic configuration            | Loads temporary hub parameters into tasks so workflows adapt to changing values at runtime.  |",
		"| Cross-workflow data exchange     | Uses hub-scoped variables to pass data between different workflows without external storage. |",
		"",
		"### Usages in Automation Testing",
		"",
		"| Use Case                 | Description                                                                                |",
		"|--------------------------|--------------------------------------------------------------------------------------------|",
		"| Shared test parameters   | Supplies consistent values to all test workflows on the hub for uniform test runs.         |",
		"| Data-driven test inputs  | Feeds hub-scoped variables into tests to drive different scenarios without script changes. |",
		"| Pre-run parameter checks | Verifies required hub variables are set before test execution to avoid failures.           |"
	],
	"entity": [
		{
			"description": [
				"Holds the string value returned from the process-level environment variable retrieved by the plugin.",
				"Returns an empty string if the variable is not defined or has no value, allowing downstream steps to detect and handle missing process parameters."
			],
			"mandatory": true,
			"name": "Parameter",
			"type": "Any"
		}
	],
	"examples": [
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Access denied to process environment",
						"Empty or null value returned",
						"Parameter not found"
					],
					"expected_result": "The value of the `TempPath` environment variable is retrieved and made available in the `Result` output field for downstream actions.",
					"notes": "Retrieves the raw string value of `TempPath` from the process scope. If the parameter is missing or returns an empty value, downstream actions must handle the null or empty case explicitly.",
					"use_case": "parameter_retrieval_process_environment",
					"version": "1.0"
				},
				"labels": [
					"Action",
					"EnvironmentAccess",
					"ParameterRetrieval"
				]
			},
			"description": [
				"### Retrieve Process-Level Environment Variable",
				"",
				"This example demonstrates how to retrieve a process-level environment variable named `TempPath` using the Process pluginâ€™s GetParameter action.",
				"It retrieves the raw value of `TempPath` from the process scope for use in downstream workflows.",
				"The retrieved value is available in the `Result` output field for subsequent steps."
			],
			"rule": {
				"$type": "Action",
				"onElement": "TempPath",
				"pluginName": "Process"
			}
		}
	],
	"key": "Process",
	"manifestVersion": 4,
	"platforms": [
		"Any"
	],
	"pluginType": "GetParameter",
	"properties": [
		{
			"description": [
				"OnElement names the environment variable that workflows will fetch.",
				"Workflows use this name to load the correct value when they run.",
				"Using the right name ensures the workflow finds the intended setting every time."
			],
			"mandatory": true,
			"name": "OnElement",
			"type": "String"
		}
	],
	"protocol": {
		"apiDocumentation": "None",
		"w3c": "None"
	},
	"summary": [
		"GetParameter grabs values stored in the G4 Hub, like temporary codes, and shares them across workflows until the hub restarts.",
		"It updates values live during a run and makes them available for other steps to use.",
		"Workflows can exchange data without external files, and tests can set up or check hub settings before they start."
	]
}
