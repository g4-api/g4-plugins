{
	"author": {
		"link": "https://www.linkedin.com/in/roei-sabag-247aa18/",
		"name": "Roei Sabag"
	},
	"categories": [
		"DataManagement"
	],
	"context": {
		"integration": {
			"github": {
				"document": "https://github.com/g4-api/g4-plugins/blob/main/docs/GetParameters/Machine.md",
				"source": "https://github.com/g4-api/g4-plugins/blob/main/src/G4.Plugins.Common/GetParameter/GetMachineParameter.cs"
			},
			"rag": {
				"description": "The Machine plugin's GetParameter action lets workflows dynamically retrieve and verify machine-level environment variables at runtime, enforcing critical pre-run checks and preserving reliability with built-in empty value handling and exception logging. It supports flexible configuration by allowing any variable name via the OnElement property and delivers up-to-date global settings for downstream workflow steps.",
				"qa": [
					{
						"question": "What is the Machine plugin GetParameter action and why does it matter?",
						"answer": "It is an automation action that retrieves system-wide environment variables at runtime, ensuring workflows can adapt to global settings and maintain reliability by validating critical parameters before execution."
					},
					{
						"question": "What are the key features and parameters of this plugin?",
						"answer": "Key features include reading machine-level environment variables, handling missing values by returning an empty string, and exposing the result for downstream use. The primary parameter is OnElement, which specifies the name of the environment variable to retrieve."
					},
					{
						"question": "How does this plugin embed into external tools or workflow designers?",
						"answer": "It appears as an Action step named GetParameter within the Machine plugin in low-code designers and workflow editors. Users select the Machine plugin, set the OnElement property, and the action integrates seamlessly into the workflow definition."
					},
					{
						"question": "What are some best practices for using this plugin?",
						"answer": "Validate that OnElement names match existing environment variables and handle empty strings to avoid errors. Include pre-run checks to confirm required variables exist, and configure workflows to log exceptions for troubleshooting."
					},
					{
						"question": "What is the rule schema for this plugin’s action definitions?",
						"answer": "Actions use a JSON schema with a $type value of Action, pluginName set to Machine, and an onElement field specifying the variable name. This simple structure ensures clear parameter mapping and consistent execution behavior."
					},
					{
						"question": "What is the manifestVersion?",
						"answer": "The manifestVersion is 4, indicating the schema version used to define this plugin manifest."
					},
					{
						"question": "Who is the author?",
						"answer": "The author is Roei Sabag (https://www.linkedin.com/in/roei-sabag-247aa18/), who developed the GetMachineParameter plugin."
					},
					{
						"question": "What categories does this plugin belong to?",
						"answer": "It belongs to the DataManagement category, indicating its use for managing and retrieving data within automation workflows."
					},
					{
						"question": "What is the key field?",
						"answer": "The key field is Machine, which serves as the unique identifier for the plugin within the automation platform."
					},
					{
						"question": "What platforms does this plugin support?",
						"answer": "This plugin supports Windows, as it retrieves environment variables defined in the Windows registry."
					},
					{
						"question": "What is the pluginType?",
						"answer": "The pluginType is GetParameter, indicating that this plugin is used for retrieving parameter values from the environment."
					},
					{
						"question": "What properties does this plugin define?",
						"answer": "It defines a property named OnElement of type String, which specifies the name of the environment variable to retrieve."
					},
					{
						"question": "What is the summary of this plugin?",
						"answer": "The plugin gets shared settings from the computer, like folder paths or feature switches. If a setting is missing, it returns an empty string so workflows know it is not set. It makes the setting available for later steps and helps workflows and tests set up or check settings before they run."
					},
					{
						"question": "How does the plugin handle errors?",
						"answer": "The plugin records failures by adding an exception to the response and log stream. By default, workflows continue execution unless explicitly configured to stop on error."
					},
					{
						"question": "What is the Git document link?",
						"answer": "The document link is https://github.com/g4-api/g4-plugins/blob/main/docs/GetParameters/Machine.md"
					},
					{
						"question": "What is the Git source link?",
						"answer": "The source link is https://github.com/g4-api/g4-plugins/blob/main/src/G4.Plugins.Common/GetParameter/GetMachineParameter.cs"
					}
				]
			}
		}
	},
	"description": [
		"### Purpose",
		"",
		"This plugin lets automation workflows retrieve system-wide settings defined on Windows computers. It reads environment variables defined for every user under the machine scope in the Windows registry. By pulling shared values like paths or feature flags, workflows can run with the correct setup without extra steps.",
		"",
		"### Key Features and Functionality",
		"",
		"| Feature                | Description                                                           |",
		"|------------------------|-----------------------------------------------------------------------|",
		"| Global variable access | Reads values defined for all users on the Windows machine.            |",
		"| Empty value handling   | Returns an empty string when the variable is missing or has no value. |",
		"| Result output field    | Makes the fetched value available for use in later workflow steps.    |",
		"",
		"### Usages in RPA",
		"",
		"| Use Case                     | Description                                                                               |",
		"|------------------------------|-------------------------------------------------------------------------------------------|",
		"| Global configuration loading | Loads shared Windows settings like paths or service URLs so workflows match system setup. |",
		"| Live value retrieval         | Gets the latest Windows environment values at runtime for up-to-date workflow behavior.   |",
		"| System health checks         | Reads global settings to verify required variables are set and correct.                   |",
		"",
		"### Usages in Automation Testing",
		"",
		"| Use Case                 | Description                                                                                 |",
		"|--------------------------|---------------------------------------------------------------------------------------------|",
		"| Test setup configuration | Configures test runs using Windows system-wide settings like API addresses and credentials. |",
		"| Data-driven tests        | Uses Windows environment values to run tests with different inputs automatically.           |",
		"| Pre-run checks           | Verifies required Windows variables exist before starting tests to avoid failures.          |"
	],
	"entity": [
		{
			"description": [
				"Holds the string value returned from the machine-level environment variable retrieved by the plugin.",
				"If the variable is not defined or has no value, it will be an empty string, allowing downstream steps to detect and handle missing machine parameters."
			],
			"mandatory": true,
			"name": "Parameter",
			"type": "Any"
		}
	],
	"examples": [
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Access denied to machine environment",
						"Empty or null value returned",
						"Parameter not found"
					],
					"expected_result": "The value of the `MyMachineParam` environment variable is retrieved and made available in the `Result` output field for downstream actions.",
					"notes": "Retrieves the raw string value of `MyMachineParam` from the machine scope. If the parameter is missing or returns an empty value, downstream actions must handle the null or empty case explicitly.",
					"use_case": "parameter_retrieval_machine_environment",
					"version": "1.0"
				},
				"labels": [
					"Action",
					"EnvironmentAccess",
					"ParameterRetrieval"
				]
			},
			"description": [
				"### Retrieve Machine-Level Environment Variable",
				"",
				"This example demonstrates how to retrieve a machine-level environment variable named `MyMachineParam` using the Machine plugin’s GetParameter action.",
				"It returns the raw value of the `MyMachineParam` variable from the machine scope for use in downstream workflows.",
				"The retrieved value is available in the `Result` output field for subsequent steps."
			],
			"rule": {
				"$type": "Action",
				"onElement": "MyMachineParam",
				"pluginName": "Machine"
			}
		}
	],
	"key": "Machine",
	"manifestVersion": 4,
	"platforms": [
		"Windows"
	],
	"pluginType": "GetParameter",
	"properties": [
		{
			"description": [
				"OnElement names the environment variable to retrieve.",
				"Workflows use this name to find the right value when they run."
			],
			"mandatory": true,
			"name": "OnElement",
			"type": "String"
		}
	],
	"protocol": {
		"apiDocumentation": "None",
		"w3c": "None"
	},
	"summary": [
		"The GetMachineParameter plugin gets shared settings from the computer, like folder paths or feature switches.",
		"If a setting is missing, it gives back nothing so workflows know it’s not set.",
		"It makes the setting available for later steps to use in the process.",
		"Workflows and tests can use it to set up or check settings before they run."
	]
}
