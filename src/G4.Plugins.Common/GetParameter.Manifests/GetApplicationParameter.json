{
	"author": {
		"link": "https://www.linkedin.com/in/roei-sabag-247aa18/",
		"name": "Roei Sabag"
	},
	"categories": [
		"DataManagement"
	],
	"description": [
		"### Purpose",
		"",
		"The GetApplicationParameter plugin retrieves shared settings used by automation tasks, such as connection strings and API keys. It supports different environments like Dev and Prod, ensuring each workflow uses the right configuration. By centralizing parameters, it keeps setups consistent and easy to manage.",
		"",
		"### Key Features and Functionality",
		"",
		"| Feature             | Description                                                      |",
		"|---------------------|------------------------------------------------------------------|",
		"| Parameter Retrieval | Fetches settings like connection strings, API keys, and more.    |",
		"| Environment Support | Gets parameters tailored to each environment (Dev, Prod, etc.).  |",
		"| Plugin Integration  | Works with other plugins to apply parameters in various actions. |",
		"",
		"### Usages in RPA",
		"",
		"| Use Case                | Description                                                       |",
		"|-------------------------|-------------------------------------------------------------------|",
		"| Dynamic Configuration   | Load settings at runtime to adapt workflows for different stages. |",
		"| Central Parameter Store | Keep all automation instances using the same source for settings. |",
		"",
		"### Usages in Automation Testing",
		"",
		"| Use Case                     | Description                                                       |",
		"|------------------------------|-------------------------------------------------------------------|",
		"| Environment-Specific Testing | Load test environment settings to run accurate, real-world tests. |",
		"| Test Script Configuration    | Fetch parameters directly within test scripts to simplify setup.  |"
	],
	"examples": [
		{
			"description": [
				"This example demonstrates the usage of the `Application` plugin to fetch a parameter named `ConnectionString` from the `Prod` environment and use it directly.",
				"",
				"| Field      | Description                                                            |",
				"|------------|------------------------------------------------------------------------|",
				"| pluginName | Identifies the specific plugin being utilized, which is `Application`. |",
				"| argument   | Specifies the environment from which to fetch the parameter.           |",
				"| onElement  | Specifies the name of the parameter to be fetched.                     |"
			],
			"rule": {
				"argument": "{{$ --Environment:Prod}}",
				"onElement": "ConnectionString",
				"pluginName": "Application"
			}
		},
		{
			"description": [
				"This example demonstrates the usage of the `Get-Parameter` macro to fetch a parameter named `ConnectionString` from the `Prod` environment and use it in a `SendKeys` action.",
				"",
				"| Field      | Description                                                                                             |",
				"|------------|---------------------------------------------------------------------------------------------------------|",
				"| pluginName | Identifies the specific plugin being utilized, which is `SendKeys`.                                     |",
				"| argument   | Specifies the use of the `Get-Parameter` macro to fetch the parameter value dynamically.                |",
				"| onElement  | Specifies the target element on which the keystrokes will be sent, identified by its CSS selector.      |",
				"| locator    | Specifies the locator type used to identify the target element, which is `CssSelector` in this example. |"
			],
			"rule": {
				"argument": "{{$Get-Parameter --Name:ConnectionString --Scope:Application --Environment:Prod}}",
				"locator": "CssSelector",
				"onElement": "#someElement",
				"pluginName": "SendKeys"
			}
		},
		{
			"description": [
				"This example demonstrates the usage of the `Get-Parameter` macro to fetch a parameter named `ConnectionString` from the default `SystemParameters` environment and use it in a `SendKeys` action.",
				"",
				"| Field      | Description                                                                                             |",
				"|------------|---------------------------------------------------------------------------------------------------------|",
				"| pluginName | Identifies the specific plugin being utilized, which is `SendKeys`.                                     |",
				"| argument   | Specifies the use of the `Get-Parameter` macro to fetch the parameter value dynamically.                |",
				"| onElement  | Specifies the target element on which the keystrokes will be sent, identified by its CSS selector.      |",
				"| locator    | Specifies the locator type used to identify the target element, which is `CssSelector` in this example. |"
			],
			"rule": {
				"argument": "{{$Get-Parameter --Name:ConnectionString --Scope:Application}}",
				"locator": "CssSelector",
				"onElement": "#someElement",
				"pluginName": "SendKeys"
			}
		}
	],
	"key": "Application",
	"manifestVersion": 4,
	"parameters": [
		{
			"default": "SystemParameters",
			"description": [
				"Specifies the environment from which to fetch the parameter. If not specified, the `SystemParameters` environment will be used."
			],
			"mandatory": false,
			"name": "Environment",
			"type": "String"
		}
	],
	"platforms": [
		"Any"
	],
	"pluginType": "GetParameter",
	"properties": [
		{
			"description": [
				"The `Argument` property specifies the environment from which to fetch the parameter."
			],
			"mandatory": false,
			"name": "Argument",
			"type": "Expression"
		},
		{
			"description": [
				"The `OnElement` property specifies the name of the parameter to be retrieved."
			],
			"mandatory": true,
			"name": "OnElement",
			"type": "String"
		}
	],
	"protocol": {
		"apiDocumentation": "None",
		"w3c": "None"
	},
	"summary": [
		"GetApplicationParameter gets settings that apps share across all runs.",
		"It grabs the right values for each setup, like server addresses or access codes.",
		"It helps teams keep settings in one place and make sure each run has the right information."
	]
}
