{
	"author": {
		"name": "Roei Sabag",
		"link": "https://www.linkedin.com/in/roei-sabag-247aa18/"
	},
	"categories": [
		"Http"
	],
	"description": [
		"### Purpose",
		"",
		"The primary purpose of the `Delete` plugin is to remove data from a server or API endpoint by sending an HTTP DELETE request. ",
		"This request is a standard method in the HTTP protocol for requesting the removal of a specified resource on the server. ",
		"The `Delete` plugin streamlines the process of making programmatically controlled DELETE requests.",
		"",
		"### Key Features and Functionality",
		"",
		"| Feature                    | Description                                                              |",
		"|----------------------------|--------------------------------------------------------------------------|",
		"| Data Deletion              | Sends HTTP DELETE requests to remove data from servers or APIs.          |",
		"| Dynamic Requests           | Supports dynamic URL construction and payload handling.                  |",
		"| Custom Headers             | Allows inclusion of multiple custom headers in the request.              |",
		"| Content Types and Encoding | Supports various content types and encoding methods for payloads.        |",
		"| Response Handling          | Captures HTTP response, headers, and status code for further processing. |",
		"",
		"### Usages in RPA",
		"",
		"| Usage                | Description                                                                                                                |",
		"|----------------------|----------------------------------------------------------------------------------------------------------------------------|",
		"| Data Management      | Remove outdated or unnecessary data from external systems or APIs, such as outdated customer records or redundant entries. |",
		"| Workflow Adjustments | Dynamically adjust actions based on the need to remove specific data, triggering subsequent workflow steps.                |",
		"",
		"### Usages in Automation Testing",
		"",
		"| Usage                                | Description                                                                                                                                                                                                                                                          |",
		"|--------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|",
		"| API Cleanup in Testing               | Automated test scripts can leverage the `Delete` rule to send DELETE requests to API endpoints, cleaning up data created during testing scenarios. This ensures a clean and controlled environment for each test iteration.                                          |",
		"| Data Integrity Checks                | Automation tests often involve verifying the impact of data removal on the server. The `Delete` rule, combined with appropriate validation techniques, allows for precise confirmation that the specified data has been accurately removed, ensuring data integrity. |",
		"| Regression Testing for Data Deletion | Ensuring that data deletion functionalities continue to work as expected after updates or changes to external systems.                                                                                                                                               |"
	],
	"examples": [
		{
			"description": [
				"Use the `Delete` plugin to send a simple HTTP DELETE request to a specified URL."
			],
			"rule": {
				"argument": "http://localhost:9002/api/hotels/delete/12345",
				"pluginName": "Delete"
			}
		},
		{
			"description": [
				"Use the `Delete` plugin to send an HTTP DELETE request with specified headers."
			],
			"rule": {
				"argument": "{{$ --Url:http://localhost:9002/api/hotels/delete/12345 --Header:Authorization=Bearer token123 --Header:Custom-Header=CustomValue}}",
				"pluginName": "Delete"
			}
		},
		{
			"description": [
				"Use the `Delete` plugin to send an HTTP DELETE request with a request body and content type."
			],
			"rule": {
				"argument": "{{$ --Url:http://localhost:9002/api/hotels/delete --Body:{\"id\":12345} --ContentType:application/json}}",
				"pluginName": "Delete"
			}
		},
		{
			"description": [
				"Use the `Delete` plugin to send an HTTP DELETE request with a specified encoding."
			],
			"rule": {
				"argument": "{{$ --Url:http://localhost:9002/api/hotels/delete/12345 --Encoding:UTF8}}",
				"pluginName": "Delete"
			}
		},
		{
			"description": [
				"Use the `Delete` plugin to send an HTTP DELETE request with form fields."
			],
			"rule": {
				"argument": "{{$ --Url:http://localhost:9002/api/hotels/delete --Field:id=12345}}",
				"pluginName": "Delete"
			}
		},
		{
			"description": [
				"Use the `Delete` plugin to send an HTTP DELETE request and extract a specific attribute from the response."
			],
			"rule": {
				"argument": "{{$ --Url:http://localhost:9002/api/hotels/delete/12345}}",
				"onAttribute": "status",
				"pluginName": "Delete"
			}
		},
		{
			"description": [
				"Use the `Delete` plugin to send an HTTP DELETE request and target elements using XPath."
			],
			"rule": {
				"argument": "{{$ --Url:http://localhost:9002/api/hotels/delete/12345}}",
				"onElement": "//response/status",
				"pluginName": "Delete"
			}
		},
		{
			"description": [
				"Use the `Delete` plugin to send an HTTP DELETE request and apply a regular expression to extract specific data from the response."
			],
			"rule": {
				"argument": "{{$ --Url:http://localhost:9002/api/hotels/delete/12345}}",
				"pluginName": "Delete",
				"regularExpression": "\\d{3}"
			}
		}
	],
	"key": "Delete",
	"manifestVersion": 4,
	"outputParameters": [
		{
			"description": [
				"Holds the results of the HTTP request after `OnElement`, `OnAttribute`, and `RegularExpression` have been applied. ",
				"If none of these properties are provided, then the entire response body is stored in the `HttpResponse` parameter.  ",
				"",
				"This means that the `HttpResponse` parameter captures the content resulting from any data extraction or processing performed by the specified properties (`OnElement`, `OnAttribute`, `RegularExpression`). ",
				"It provides a way to access the modified or processed content of the HTTP response within the automation workflow."
			],
			"name": "HttpResponse"
		},
		{
			"description": [
				"Holds the HTTP response headers obtained from the HTTP DELETE request. ",
				"These headers provide additional information about the server's response and are sent along with the actual content of the response."
			],
			"name": "HttpResponseHeaders"
		},
		{
			"description": [
				"Holds the HTTP status code obtained from the HTTP DELETE request. ",
				"The HTTP status code is a three-digit numeric code returned by the server indicating the outcome of the request."
			],
			"name": "HttpStatusCode"
		}
	],
	"parameters": [
		{
			"description": [
				"Defines the data payload sent with a DELETE request.",
				"Includes extra details the server may need to carry out the deletion.",
				"Helps ensure the API has the context required to process the delete operation."
			],
			"mandatory": false,
			"name": "Body",
			"type": "String"
		},
		{
			"description": [
				"Indicates the format of data sent in the request body.",
				"Helps the server understand how to parse and handle the payload.",
				"Supports formats such as JSON, XML, form data, and plain text."
			],
			"mandatory": false,
			"name": "ContentType",
			"type": "String",
			"values": [
				{
					"description": [
						"Represents JSON data encoded as JavaScript Object Notation.",
						"Allows for structured data that is easy to read and parse."
					],
					"name": "application/json"
				},
				{
					"description": [
						"Denotes a generic binary data stream when the format is unknown.",
						"Enables transferring files or data without predefined structure."
					],
					"name": "application/octet-stream"
				},
				{
					"description": [
						"Identifies Portable Document Format files for documents and forms.",
						"Ensures consistent rendering of printable content."
					],
					"name": "application/pdf"
				},
				{
					"description": [
						"Marks XML data formatted with Extensible Markup Language.",
						"Provides a generic way to represent structured data."
					],
					"name": "application/xml"
				},
				{
					"description": [
						"Specifies MPEG audio encoded in MP3 format.",
						"Offers compressed audio suitable for music and podcasts."
					],
					"name": "audio/mpeg"
				},
				{
					"description": [
						"Indicates JPEG images compressed for photographs.",
						"Balances image quality with file size."
					],
					"name": "image/jpeg"
				},
				{
					"description": [
						"Signals PNG images with lossless compression.",
						"Supports transparent backgrounds for web graphics."
					],
					"name": "image/png"
				},
				{
					"description": [
						"Used for form submissions that include files and text fields.",
						"Allows combining different data types in one request."
					],
					"name": "multipart/form-data"
				},
				{
					"description": [
						"Defines stylesheet content for web page styling in CSS.",
						"Controls layout, colors, and fonts of HTML documents."
					],
					"name": "text/css"
				},
				{
					"description": [
						"Represents HTML content to structure web pages.",
						"Defines elements like headings, paragraphs, and links."
					],
					"name": "text/html"
				},
				{
					"description": [
						"Denotes plain text without special formatting.",
						"Serves simple messages or logs in text form."
					],
					"name": "text/plain"
				},
				{
					"description": [
						"Encodes URL-encoded form data in key-value pairs.",
						"Pairs are separated by ampersands and percent-encoded if needed."
					],
					"name": "application/x-www-form-urlencoded"
				},
				{
					"description": [
						"Specifies MP4 multimedia container for video and audio.",
						"Supports subtitles and still images within the file."
					],
					"name": "video/mp4"
				}
			]
		},
		{
			"description": [
				"Explains how text characters are converted to binary code for transmission.",
				"Ensures the data is encoded and decoded correctly by both sender and receiver.",
				"Allows different encoding standards to maintain compatibility across systems."
			],
			"name": "Encoding",
			"type": "String",
			"values": [
				{
					"description": [
						"Uses 7-bit codes to represent 128 common characters such as letters, digits, and symbols.",
						"Forms the basis for many modern text encoding systems.",
						"Remains compatible with Unicode formats like UTF-8."
					],
					"name": "ASCII"
				},
				{
					"description": [
						"Stores each character in 16 bits with the most significant byte first.",
						"Commonly used on platforms that follow big-endian byte ordering.",
						"Ensures consistent decoding when big-endian formats are required."
					],
					"name": "BigEndianUnicode"
				},
				{
					"description": [
						"Also called ISO-8859-1 and covers many Western European languages.",
						"Uses one byte per character for a total of 256 symbols.",
						"Often used for legacy data but supports fewer characters than Unicode."
					],
					"name": "Latin1"
				},
				{
					"description": [
						"Assigns a unique code point to every character in most writing systems.",
						"Supports global text representation in a single standard.",
						"Forms the foundation for encodings like UTF-8 and UTF-16."
					],
					"name": "Unicode"
				},
				{
					"description": [
						"Encodes text using only 7-bit ASCII characters for safe transmission in restricted systems.",
						"Was originally designed for email use where 8-bit data could be problematic.",
						"Rarely used today because it is less efficient than modern encodings."
					],
					"name": "UTF7"
				},
				{
					"description": [
						"Variable-length encoding that uses one to four bytes per character.",
						"Covers all Unicode code points and is backward-compatible with ASCII.",
						"Widely adopted as the standard text format on the web."
					],
					"name": "UTF8"
				},
				{
					"description": [
						"Uses a fixed four bytes for each character’s code point.",
						"Simplifies text processing by providing a constant width per character.",
						"Consumes more memory but offers straightforward character indexing."
					],
					"name": "UTF32"
				}
			]
		},
		{
			"description": [
				"Defines a form field to include in the request body using key=value pairs.",
				"Encodes each field correctly so the server can read the data.",
				"Lets you send extra parameters when the server requires them during a delete operation."
			],
			"mandatory": false,
			"name": "Field",
			"type": "KeyValue"
		},
		{
			"description": [
				"Enables adding custom headers to an HTTP DELETE request.",
				"Each header uses a name=value format so the server can read it correctly.",
				"Allows you to repeat the parameter to include multiple headers.",
				"Custom headers let you send extra information like authentication tokens or tracing data."
			],
			"mandatory": false,
			"name": "Header",
			"type": "KeyValue"
		},
		{
			"description": [
				"Defines the web address where the delete request is sent.",
				"Tells the server which resource should be removed.",
				"Ensures the correct endpoint is targeted for deletion.",
				"Using an accurate URL helps prevent errors or deleting the wrong resource."
			],
			"mandatory": false,
			"name": "Url",
			"type": "String"
		}
	],
	"platforms": [
		"Any"
	],
	"pluginType": "HttpMethod",
	"properties": [
		{
			"description": [
				"Specifies where to send the HTTP DELETE request and what data to include.",
				"Allows dynamic values through templates or variable placeholders in the format {{$...}}.",
				"Makes it possible to customize the request URL or payload at runtime."
			],
			"mandatory": true,
			"name": "Argument",
			"type": "Uri|Expression"
		},
		{
			"description": [
				"Targets specific parts of an API response by using XPath or JSONPath expressions.",
				"Works with both XML and JSON responses.",
				"Adapts to the response format to locate the right element.",
				"Helps ensure the correct data is extracted regardless of the API’s output format."
			],
			"mandatory": false,
			"name": "OnElement",
			"type": "String"
		},
		{
			"description": [
				"Defines a pattern for capturing and extracting specific data from a text response.",
				"Uses standard regular expression syntax to match and retrieve the parts you need.",
				"Enables precise extraction of values embedded in the response.",
				"Helps automate parsing of complex text outputs."
			],
			"mandatory": false,
			"name": "RegularExpression",
			"type": "Regex"
		}
	],
	"protocol": {
		"apiDocumentation": "None",
		"w3c": "None"
	},
	"summary": [
		"The Delete plugin removes data from servers by sending delete requests.",
		"It lets you choose where to send the request and what information to include.",
		"It helps keep systems tidy by removing old or unwanted information.",
		"It can also check that data removal works correctly during testing."
	]
}
