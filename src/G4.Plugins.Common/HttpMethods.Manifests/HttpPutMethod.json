{
	"author": {
		"name": "Roei Sabag",
		"link": "https://www.linkedin.com/in/roei-sabag-247aa18/"
	},
	"categories": [
		"Http"
	],
	"description": [
		"### Purpose",
		"",
		"The primary purpose of the `Put` plugin is to update or create data on a server or API endpoint by sending an HTTP PUT request. ",
		"This request is a standard method in the HTTP protocol for making complete updates to a specified resource on the server. ",
		"The `Put` plugin streamlines the process of making programmatically controlled PUT requests.",
		"",
		"### Key Features and Functionality",
		"",
		"| Feature                    | Description                                                              |",
		"|----------------------------|--------------------------------------------------------------------------|",
		"| Data Update                | Sends HTTP PUT requests to update or create data on servers or APIs.     |",
		"| Dynamic Requests           | Supports dynamic URL construction and payload handling.                  |",
		"| Custom Headers             | Allows inclusion of multiple custom headers in the request.              |",
		"| Content Types and Encoding | Supports various content types and encoding methods for payloads.        |",
		"| Response Handling          | Captures HTTP response, headers, and status code for further processing. |",
		"",
		"### Usages in RPA",
		"",
		"| Usage                | Description                                                                                                  |",
		"|----------------------|--------------------------------------------------------------------------------------------------------------|",
		"| Data Management      | Update or create data in external systems or APIs, such as updating customer records or product information. |",
		"| Workflow Adjustments | Dynamically adjust actions based on the data updated, triggering subsequent workflow steps.                  |",
		"",
		"### Usages in Automation Testing",
		"",
		"| Usage                              | Description                                                                                                                                                                                                                                                         |",
		"|------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|",
		"| API Data Update                    | Automated test scripts can leverage the `Put` rule to send PUT requests to API endpoints, updating or creating data needed for testing scenarios. This ensures accurate and up-to-date test data for each test iteration.                                           |",
		"| Data Integrity Checks              | Automation tests often involve verifying the accuracy of data updates on the server. The `Put` rule, combined with appropriate validation techniques, allows for precise confirmation that the specified data has been accurately updated, ensuring data integrity. |",
		"| Regression Testing for Data Update | Ensuring that data update functionalities continue to work as expected after updates or changes to external systems.                                                                                                                                                |"
	],
	"examples": [
		{
			"description": [
				"Use the `Put` plugin to send a simple HTTP PUT request to a specified URL."
			],
			"rule": {
				"argument": "http://localhost:9002/api/hotels/12345",
				"pluginName": "Put"
			}
		},
		{
			"description": [
				"Use the `Put` plugin to send an HTTP PUT request with specified headers."
			],
			"rule": {
				"argument": "{{$ --Url:http://localhost:9002/api/hotels/12345 --Header:Authorization=Bearer token123 --Header:Custom-Header=CustomValue}}",
				"pluginName": "Put"
			}
		},
		{
			"description": [
				"Use the `Put` plugin to send an HTTP PUT request with a request body and content type."
			],
			"rule": {
				"argument": "{{$ --Url:http://localhost:9002/api/hotels/12345 --Body:{\"status\":\"updated\"} --ContentType:application/json}}",
				"pluginName": "Put"
			}
		},
		{
			"description": [
				"Use the `Put` plugin to send an HTTP PUT request with a specified encoding."
			],
			"rule": {
				"argument": "{{$ --Url:http://localhost:9002/api/hotels/12345 --Encoding:UTF8}}",
				"pluginName": "Put"
			}
		},
		{
			"description": [
				"Use the `Put` plugin to send an HTTP PUT request with form fields."
			],
			"rule": {
				"argument": "{{$ --Url:http://localhost:9002/api/hotels/12345 --Field:status=updated}}",
				"pluginName": "Put"
			}
		},
		{
			"description": [
				"Use the `Put` plugin to send an HTTP PUT request and extract a specific attribute from the response."
			],
			"rule": {
				"argument": "{{$ --Url:http://localhost:9002/api/hotels/12345}}",
				"onAttribute": "status",
				"pluginName": "Put"
			}
		},
		{
			"description": [
				"Use the `Put` plugin to send an HTTP PUT request and target elements using XPath."
			],
			"rule": {
				"argument": "{{$ --Url:http://localhost:9002/api/hotels/12345}}",
				"onElement": "//response/status",
				"pluginName": "Put"
			}
		},
		{
			"description": [
				"Use the `Put` plugin to send an HTTP PUT request and apply a regular expression to extract specific data from the response."
			],
			"rule": {
				"argument": "{{$ --Url:http://localhost:9002/api/hotels/12345}}",
				"pluginName": "Put",
				"regularExpression": "\\d{3}"
			}
		}
	],
	"key": "Put",
	"manifestVersion": 4,
	"outputParameters": [
		{
			"description": [
				"Holds the results of the HTTP request after `OnElement`, `OnAttribute`, and `RegularExpression` have been applied. ",
				"If none of these properties are provided, then the entire response body is stored in the `HttpResponse` parameter.  ",
				"",
				"This means that the `HttpResponse` parameter captures the content resulting from any data extraction or processing performed by the specified properties (`OnElement`, `OnAttribute`, `RegularExpression`). ",
				"It provides a way to access the modified or processed content of the HTTP response within the automation workflow."
			],
			"name": "HttpResponse"
		},
		{
			"description": [
				"Holds the HTTP response headers obtained from the HTTP PUT request. ",
				"These headers provide additional information about the server's response and are sent along with the actual content of the response."
			],
			"name": "HttpResponseHeaders"
		},
		{
			"description": [
				"Holds the HTTP status code obtained from the HTTP PUT request. ",
				"The HTTP status code is a three-digit numeric code returned by the server indicating the outcome of the request."
			],
			"name": "HttpStatusCode"
		}
	],
	"parameters": [
		{
			"description": [
				"Specifies the payload or data that you want to include in the body of the request. ",
				"The request body is typically used to send data to the server when making HTTP requests, especially for operations like `POST` or `PUT`."
			],
			"mandatory": false,
			"name": "Body",
			"type": "String"
		},
		{
			"description": [
				"Specifies the type of data that is included in the body of the request. ",
				"It indicates the format or encoding of the content being sent, allowing the server to interpret and process the data appropriately.  ",
				"",
				"The ContentType parameter is crucial because it tells the server how to parse and handle the incoming data. ",
				"Different types of data, such as JSON, XML, form-urlencoded, or plain text, have different syntax and structures. ",
				"By specifying the content type, you inform the server about the expected format of the data in the request body."
			],
			"mandatory": false,
			"name": "ContentType",
			"type": "String",
			"values": [
				{
					"description": [
						"JavaScript Object Notation (JSON) is a lightweight data interchange format. ",
						"It is easy for humans to read and write and easy for machines to parse and generate. ",
						"JSON is often used for representing structured data in web applications."
					],
					"name": "application/json"
				},
				{
					"description": [
						"This content type is a generic binary format. ",
						"It is often used when the content type is not known or when transferring arbitrary binary data that doesn't fit into other more specific categories."
					],
					"name": "application/octet-stream"
				},
				{
					"description": [
						"Portable Document Format (PDF) is a file format that captures all the elements of a printed document as an electronic image. ",
						"It is widely used for documents intended for printing, such as brochures, manuals, and forms."
					],
					"name": "application/pdf"
				},
				{
					"description": [
						"Extensible Markup Language (XML) is a markup language that defines rules for encoding documents in a format that is both human-readable and machine-readable. ",
						"It is often used for representing structured data in a generic way."
					],
					"name": "application/xml"
				},
				{
					"description": [
						"MP3 is a widely used audio compression format that allows for the storage of music and audio files with relatively high audio quality in a compact size."
					],
					"name": "audio/mpeg"
				},
				{
					"description": [
						"JPEG (Joint Photographic Experts Group) is a commonly used method of lossy compression for digital images. ",
						"It is suitable for photographs and images with complex colors."
					],
					"name": "image/jpeg"
				},
				{
					"description": [
						"PNG (Portable Network Graphics) is a raster graphics file format that supports lossless data compression. ",
						"It is commonly used for images on the web and supports transparent backgrounds."
					],
					"name": "image/png"
				},
				{
					"description": [
						"This content type is used when submitting forms that contain files or binary data along with other text form fields. ",
						"It allows for the encapsulation of multiple sets of data in a single body."
					],
					"name": "multipart/form-data"
				},
				{
					"description": [
						"Cascading Style Sheets (CSS) is a style sheet language used for describing the look and formatting of a document written in HTML. ",
						"It defines styles for elements, including layout, colors, and fonts."
					],
					"name": "text/css"
				},
				{
					"description": [
						"Hypertext Markup Language (HTML) is used to structure content on the web. ",
						"It provides a way to create structured documents by denoting structural semantics for text such as headings, paragraphs, lists, links, quotes, and other items."
					],
					"name": "text/html"
				},
				{
					"description": [
						"This content type is used for plain, unformatted text. ",
						"It is often used for simple textual data that doesn't require any special formatting or styling."
					],
					"name": "text/plain"
				},
				{
					"description": [
						"This content type is used for sending form data in the body of an HTTP request. ",
						"Data is URL-encoded, where special characters are replaced with `%` followed by two hexadecimal digits."
					],
					"name": "application/x-www-form-urlencoded"
				},
				{
					"description": [
						"MP4 (MPEG-4 Part 14) is a multimedia container format commonly used for storing video and audio, as well as other data such as subtitles and still images."
					],
					"name": "video/mp4"
				}
			]
		},
		{
			"description": [
				"Specifies how text data in the request body is represented as binary code, ensuring accurate interpretation by both the sender and receiver."
			],
			"name": "Encoding",
			"type": "String",
			"values": [
				{
					"description": [
						"ASCII is a basic character encoding standard that represents characters using 7 bits, providing codes for 128 characters.",
						"It includes standard English letters, digits, and some special characters.",
						"ASCII is a subset of UTF-8, and UTF-8 is designed to be backward-compatible with ASCII.",
						"It forms the foundation for many character encodings and is widely used, especially in English-language content."
					],
					"name": "ASCII"
				},
				{
					"description": [
						"BigEndianUnicode is a specific form of UTF-16 where the most significant byte is stored first.",
						"It is used in specific platforms, particularly those employing big-endian byte order.",
						"Represents characters using 16-bit code units, with a specific byte order in storage."
					],
					"name": "BigEndianUnicode"
				},
				{
					"description": [
						"ISO-8859-1, also known as Latin-1, covers a subset of characters from the Latin alphabet, including many Western European languages.",
						"It uses a fixed single-byte encoding.",
						"While not as versatile as UTF-8 for handling diverse character sets, it is used in certain contexts, especially when compatibility with legacy systems is a concern."
					],
					"name": "Latin1"
				},
				{
					"description": [
						"Unicode is a comprehensive character encoding standard assigning a unique code point to every character.",
						"It provides a universal representation of characters from diverse languages and scripts.",
						"Enables global character representation, fostering internationalization and multilingual content in various applications."
					],
					"name": "Unicode"
				},
				{
					"description": [
						"UTF-7 is a variable-length encoding designed for environments restricting the use of 8-bit data.",
						"Although less common today, it finds applications in email.",
						"Utilizes a 7-bit code, making it suitable for environments with limitations on 8-bit data transmission."
					],
					"name": "UTF7"
				},
				{
					"description": [
						"UTF-8 is the most widely used character encoding on the web.",
						"It can represent virtually all characters in the Unicode character set, making it suitable for internationalization and multilingual content.",
						"Each character is represented by a variable number of bytes, with ASCII characters represented by a single byte."
					],
					"name": "UTF8"
				},
				{
					"description": [
						"UTF-32 uses a fixed 32-bit code point to represent each character.",
						"It offers a straightforward mapping of characters but may be less space-efficient compared to UTF-8 and UTF-16.",
						"Provides a direct correspondence between code points and characters, ensuring simplicity in character representation."
					],
					"name": "UTF32"
				}
			]
		},
		{
			"description": [
				"Specifies a form field that you include in the body of the request when making a `POST` or `PUT` request with `form-urlencoded` data."
			],
			"mandatory": false,
			"name": "Field",
			"type": "Key/Value"
		},
		{
			"description": [
				"Allows the inclusion of multiple headers in the HTTP PUT request. ",
				"Each header is specified as a key-value pair, separated by an equal sign. ",
				"Multiple headers can be added using the syntax `{{$ --Header:header1name=header1value --Header:header2name=header2value ...}}`."
			],
			"mandatory": false,
			"name": "Header",
			"type": "Key/Value"
		},
		{
			"description": [
				"Specifies the target URL for the HTTP PUT request."
			],
			"mandatory": false,
			"name": "Url",
			"type": "String"
		}
	],
	"pluginType": "HttpMethod",
	"properties": [
		{
			"description": [
				"Specifies the details for the HTTP PUT request. ",
				"It includes a template or variable structure `{{$...}}` to allow dynamic values."
			],
			"mandatory": true,
			"name": "Argument",
			"type": "Uri|Expression"
		},
		{
			"description": [
				"Used to target elements using either XPath or JSONPath expressions, depending on the type of response the API returns (XML or JSON). ",
				"This flexibility allows the rule to handle different response formats appropriately."
			],
			"mandatory": false,
			"name": "OnElement",
			"type": "String"
		},
		{
			"description": [
				"Used for pattern matching and extraction of specific data from a text response. ",
				"It allows for the definition of a regular expression that captures and extracts relevant information from the content retrieved by the HTTP PUT request."
			],
			"mandatory": false,
			"name": "RegularExpression",
			"type": "Regex"
		}
	],
	"protocol": {
		"apiDocumentation": "None",
		"w3c": "None"
	},
	"scopes": [
		"Any"
	],
	"summary": [
		"The `Put` plugin facilitates data updates or creation on servers or APIs by sending HTTP PUT requests, streamlining the process of programmatically controlled updates or creations.",
		"Key features include sending HTTP PUT requests, supporting dynamic URL construction and payload handling, allowing custom headers, supporting various content types and encoding methods, and capturing HTTP responses for further processing.",
		"In RPA, it is used for updating or creating data in external systems or APIs, such as updating customer records or product information, and for dynamically adjusting actions based on the data updated.",
		"In automation testing, it supports API data updates or creation for testing scenarios, verifying the accuracy of data updates on the server, and ensuring data update functionalities work as expected in regression testing."
	]
}
