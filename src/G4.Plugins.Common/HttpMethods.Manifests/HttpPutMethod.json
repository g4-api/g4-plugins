{
	"author": {
		"name": "Roei Sabag",
		"link": "https://www.linkedin.com/in/roei-sabag-247aa18/"
	},
	"categories": [
		"Http"
	],
	"context": {
		"integration": {
			"github": {
				"document": "https://github.com/g4-api/g4-plugins/blob/main/docs/HttpMethods/Put.md",
				"source": "https://github.com/g4-api/g4-plugins/blob/main/src/G4.Plugins.Common/HttpMethods/HttpPutMethod.cs"
			},
			"rag": {
				"description": "The Put HTTP-method plugin validates payloads, supports dynamic URLs, headers, encodings, and extraction rules, then surfaces status codes, headers, and parsed content so automations can reliably update or create resources and react to any API response without manual checks.",
				"qa": [
					{
						"question": "What core function does the Put plugin provide?",
						"answer": "It sends HTTP PUT requests so your automation can create or fully replace data on any API endpoint."
					},
					{
						"question": "What key features and parameters does the Put plugin support?",
						"answer": "Dynamic URLs, body, headers, content-type selection, encoding options, form fields, and response extraction via XPath, JSONPath, or regex."
					},
					{
						"question": "How does the Put plugin integrate into a G4 automation workflow?",
						"answer": "It runs as an HttpMethod step; later steps branch on its outputs (HttpStatusCode, HttpResponseHeaders, HttpResponse) to continue, roll back, or retry."
					},
					{
						"question": "What are best practices for using the Put plugin in workflows?",
						"answer": "Validate URLs, set explicit content types, handle non-2xx status codes with conditional logic, and log the three response outputs for audit and retries."
					},
					{
						"question": "Which rule fields allow data extraction after a PUT request?",
						"answer": "Use OnElement (XPath or JSONPath) for nodes, OnAttribute for attribute values, and RegularExpression for text pattern captures."
					},
					{
						"question": "Who authored the Put plugin?",
						"answer": "Roei Sabag — https://www.linkedin.com/in/roei-sabag-247aa18/"
					},
					{
						"question": "What manifest version does this plugin use?",
						"answer": "4"
					},
					{
						"question": "What plugin type is declared?",
						"answer": "HttpMethod"
					},
					{
						"question": "Which category is listed for this plugin?",
						"answer": "Http"
					},
					{
						"question": "What is the unique key of this plugin?",
						"answer": "Put"
					},
					{
						"question": "Which platforms does this plugin support?",
						"answer": "Any"
					},
					{
						"question": "What does the manifest summary say about the Put plugin?",
						"answer": "It lets workflows create or replace data on any endpoint with an HTTP PUT request."
					},
					{
						"question": "Where can I find the Put plugin’s code and documentation?",
						"answer": "Code: https://github.com/g4-api/g4-plugins/blob/main/src/G4.Plugins.Common/HttpMethods/HttpPutMethod.cs • Docs: https://github.com/g4-api/g4-plugins/blob/main/docs/HttpMethods/Put.md"
					},
					{
						"question": "How does the Put plugin surface errors or unusual responses?",
						"answer": "It returns HttpStatusCode, HttpResponseHeaders, and parsed HttpResponse so workflows can branch or retry on timeouts, network failures, or server errors."
					}
				]
			}
		}
	},
	"description": [
		"### Purpose",
		"",
		"The Put plugin lets automation workflows update or create an entire resource on a server or API with a single HTTP PUT request.",
		"It follows the standard HTTP protocol for full resource replacement or creation.",
		"The plugin makes these updates reliable and repeatable in any workflow.",
		"",
		"### Key Features and Functionality",
		"",
		"| Feature                  | Description                                                                     |",
		"|--------------------------|---------------------------------------------------------------------------------|",
		"| Data Update or Creation  | Sends HTTP PUT requests to fully update or create resources in servers or APIs. |",
		"| Dynamic Requests         | Builds URLs and request bodies at runtime for flexible integrations.            |",
		"| Custom Headers           | Adds any number of headers, such as authentication tokens or content types.     |",
		"| Content Types & Encoding | Supports JSON, XML, form-encoded, and other media types.                        |",
		"| Response Handling        | Returns status code, headers, and body so workflows can branch on results.      |",
		"",
		"### Usages in RPA",
		"",
		"| Use Case             | Description                                                                          |",
		"|----------------------|--------------------------------------------------------------------------------------|",
		"| Data Management      | Update customer records, product information, or other entities in external systems. |",
		"| Workflow Adjustments | Trigger next steps based on the outcome of the PUT request or data returned.         |",
		"",
		"### Usages in Automation Testing",
		"",
		"| Use Case              | Description                                                                     |",
		"|-----------------------|---------------------------------------------------------------------------------|",
		"| API Data Setup        | Create or update test data with PUT requests before executing test suites.      |",
		"| Data Integrity Checks | Verify that a PUT request correctly replaced the target resource on the server. |",
		"| Regression Testing    | Ensure update operations continue to behave after system changes.               |"
	],
	"examples": [
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Empty or missing body",
						"Invalid or malformed JSON body",
						"Invalid URL format",
						"Network failure",
						"Non-2xx HTTP response",
						"Request timeout",
						"Resource not found",
						"Unprocessable entity",
						"Unsupported content type"
					],
					"expected_result": "The plugin sends an HTTP PUT request with the specified body and content type to the specified URL and returns the raw response.",
					"notes": "This example uses only the `argument` field to specify URL, body, and content type. It does not include response extraction rules.",
					"use_case": "send_put_request_with_body_and_content_type",
					"version": "1.0.0"
				},
				"labels": [
					"ContentType",
					"HttpBody",
					"HttpMethod",
					"Json",
					"Put",
					"RestfulApi"
				]
			},
			"description": [
				"### PUT request with request body and content type",
				"",
				"Use the `Put` plugin to send an HTTP PUT request with a request body and content type.",
				"Specify the endpoint URL via the `--Url` option in the `argument` field.",
				"Provide the request body with the `--Body` option containing a JSON object.",
				"Set the content type header with the `--ContentType` option."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:http://api.example.com/v1/12345 --Body:{\"status\":\"updated\"} --ContentType:application/json}}",
				"pluginName": "Put"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Empty or missing body",
						"Invalid or malformed JSON body",
						"Invalid URL format",
						"Network failure",
						"Non-2xx HTTP response",
						"Request timeout",
						"Resource not found",
						"Unprocessable entity",
						"Unsupported content type",
						"Unsupported encoding"
					],
					"expected_result": "The plugin sends an HTTP PUT request with the specified body, content type, and encoding to the specified URL and returns the raw response.",
					"notes": "This example uses only the `argument` field to specify URL, body, content type, and encoding. It does not include response extraction rules.",
					"use_case": "send_put_request_with_encoding",
					"version": "1.0.0"
				},
				"labels": [
					"ContentType",
					"Encoding",
					"HttpBody",
					"HttpMethod",
					"Json",
					"Put",
					"RestfulApi"
				]
			},
			"description": [
				"### PUT request with encoding",
				"",
				"Use the `Put` plugin to send an HTTP PUT request with a specified encoding.",
				"Specify the endpoint URL via the `--Url` option in the `argument` field.",
				"Provide the request body with the `--Body` option containing a JSON object.",
				"Set the content type header with the `--ContentType` option.",
				"Set the request encoding using the `--Encoding` option."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:http://api.example.com/v1/12345 --Body:{\"status\":\"updated\"} --ContentType:application/json --Encoding:UTF8}}",
				"pluginName": "Put"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Duplicate form fields",
						"Empty form field value",
						"Invalid or malformed form field",
						"Invalid URL format",
						"Network failure",
						"Non-2xx HTTP response",
						"Request timeout",
						"Resource not found",
						"Unprocessable entity",
						"Unsupported content type"
					],
					"expected_result": "The plugin sends an HTTP PUT request with form fields to the specified URL and returns the raw response.",
					"notes": "This example uses only the `argument` field to specify URL and form fields. It does not include response extraction rules.",
					"use_case": "send_put_request_with_form_fields",
					"version": "1.0.0"
				},
				"labels": [
					"FormFields",
					"HttpBody",
					"HttpMethod",
					"Put",
					"RestfulApi"
				]
			},
			"description": [
				"### PUT request with form fields",
				"",
				"Use the `Put` plugin to send an HTTP PUT request with form fields.",
				"Specify the endpoint URL via the `--Url` option in the `argument` field.",
				"Provide form fields using the `--Field` option with key=value pairs.",
				"Include multiple form fields by repeating the `--Field` option."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:http://api.example.com/v1/12345 --Field:status=updated}}",
				"pluginName": "Put"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Attribute not found",
						"Element not found",
						"Empty or missing body",
						"Extraction failure",
						"Invalid element path",
						"Invalid or malformed JSON body",
						"Invalid URL format",
						"Network failure",
						"Non-2xx HTTP response",
						"Request timeout",
						"Resource not found",
						"Unprocessable entity",
						"Unsupported content type"
					],
					"expected_result": "The plugin sends an HTTP PUT request with the specified body and content type to the specified URL and extracts the value of the specified attribute from the matching response element.",
					"notes": "This example uses the `argument`, `onElement`, and `onAttribute` fields.",
					"use_case": "send_put_request_with_response_extraction",
					"version": "1.0.0"
				},
				"labels": [
					"Extraction",
					"HttpBody",
					"HttpMethod",
					"Json",
					"Put",
					"RestfulApi"
				]
			},
			"description": [
				"### PUT request with response extraction",
				"",
				"Use the `Put` plugin to send an HTTP PUT request and extract a specific attribute from the response.",
				"Specify the endpoint URL via the `--Url` option in the `argument` field.",
				"Provide the request body with the `--Body` option containing a JSON object.",
				"Set the content type header with the `--ContentType` option.",
				"Extract the attribute by setting `onElement` to the target element path and `onAttribute` to the attribute name."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:http://api.example.com/v1/12345 --Body:{\"status\":\"updated\"} --ContentType:application/json}}",
				"onAttribute": "status",
				"onElement": "//response",
				"pluginName": "Put"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Duplicate form fields",
						"Element not found",
						"Empty form field value",
						"Extraction failure",
						"Invalid element path",
						"Invalid or malformed form field",
						"Invalid URL format",
						"Network failure",
						"Non-2xx HTTP response",
						"Request timeout",
						"Resource not found",
						"Unprocessable entity",
						"Unsupported content type"
					],
					"expected_result": "The plugin sends an HTTP PUT request with form fields to the specified URL and returns the matching elements from the response using the specified XPath expression.",
					"notes": "This example uses the `argument` field to specify URL and form fields, and the `onElement` field for element targeting.",
					"use_case": "send_put_request_targeting_elements",
					"version": "1.0.0"
				},
				"labels": [
					"Extraction",
					"FormFields",
					"HttpBody",
					"HttpMethod",
					"Put",
					"RestfulApi"
				]
			},
			"description": [
				"### PUT request targeting elements",
				"",
				"Use the `Put` plugin to send an HTTP PUT request and target response elements using an XPath expression.",
				"Specify the endpoint URL and form fields via the `--Url` and `--Field` options in the `argument` field.",
				"Set the XPath expression for element targeting with the `onElement` field."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:http://api.example.com/v1/12345 --Field:status=updated}}",
				"onElement": "//response/status",
				"pluginName": "Put"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Duplicate form fields",
						"Empty form field value",
						"Invalid JSONPath expression",
						"Invalid or malformed form field",
						"Invalid URL format",
						"JSONPath no match",
						"Network failure",
						"Non-2xx HTTP response",
						"Request timeout",
						"Resource not found",
						"Unprocessable entity",
						"Unsupported content type"
					],
					"expected_result": "The plugin sends an HTTP PUT request with form fields to the specified URL and returns the matching elements from the response JSON using the specified JSONPath expression.",
					"notes": "This example uses the `argument` field to specify URL and form fields, and the `onJsonPath` field for element targeting.",
					"use_case": "send_put_request_targeting_elements_jsonpath",
					"version": "1.0.0"
				},
				"labels": [
					"Extraction",
					"FormFields",
					"HttpBody",
					"HttpMethod",
					"JsonPath",
					"Put",
					"RestfulApi"
				]
			},
			"description": [
				"### PUT request targeting elements with JSONPath",
				"",
				"Use the `Put` plugin to send an HTTP PUT request and target response elements using a JSONPath expression.",
				"Specify the endpoint URL and form fields via the `--Url` and `--Field` options in the `argument` field.",
				"Set the JSONPath expression for element targeting with the `onJsonPath` field."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:http://api.example.com/v1/12345 --Field:status=updated}}",
				"onJsonPath": "$.response.status",
				"pluginName": "Put"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Duplicate form fields",
						"Empty form field value",
						"Invalid or malformed form field",
						"Invalid regular expression",
						"Invalid URL format",
						"Network failure",
						"No regex match",
						"Non-2xx HTTP response",
						"Request timeout",
						"Resource not found",
						"Unprocessable entity",
						"Unsupported content type"
					],
					"expected_result": "The plugin sends an HTTP PUT request with form fields to the specified URL and extracts data from the response using the specified regular expression.",
					"notes": "This example uses the `argument` and `regularExpression` fields.",
					"use_case": "send_put_request_with_regex_extraction",
					"version": "1.0.0"
				},
				"labels": [
					"Extraction",
					"FormFields",
					"HttpBody",
					"HttpMethod",
					"Put",
					"RegExp",
					"RestfulApi"
				]
			},
			"description": [
				"### PUT request with regex extraction",
				"",
				"Use the `Put` plugin to send an HTTP PUT request and apply a regular expression to extract specific data from the response.",
				"Specify the endpoint URL and form fields via the `--Url` and `--Field` options in the `argument` field.",
				"Set the regular expression for data extraction with the `regularExpression` field.",
				"The regex `\"id\":\\s*\"(\\d+)\"` extracts the numeric ID value from a JSON response."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:http://api.example.com/v1/12345 --Field:status=updated}}",
				"pluginName": "Put",
				"regularExpression": "\\\"id\\\":\\s*\\\"(\\d+)\\\""
			}
		}
	],
	"key": "Put",
	"manifestVersion": 4,
	"outputParameters": [
		{
			"description": [
				"Holds the content returned from an HTTP request after any specified extraction or processing rules have been applied.",
				"Provides a way to work with the processed response data instead of the raw body.",
				"Enables automation workflows to access the exact information they need from the HTTP response."
			],
			"name": "HttpResponse",
			"type": "Any"
		},
		{
			"description": [
				"Holds the HTTP response headers returned from an HTTP request.",
				"Contains key-value pairs that provide metadata about the response such as content type, date, and length.",
				"Enables workflows to inspect response details for logging or conditional logic."
			],
			"name": "HttpResponseHeaders",
			"type": "Any"
		},
		{
			"description": [
				"Holds the HTTP status code returned from an HTTP request.",
				"Represents the outcome of the request using a three-digit numeric code.",
				"Enables automation flows to check for success or failure of the HTTP operation.",
				"Supports error handling in workflows based on the status code value."
			],
			"name": "HttpStatusCode",
			"type": "Any"
		}
	],
	"parameters": [
		{
			"description": [
				"Defines the data payload sent with a DELETE request.",
				"Includes extra details the server may need to carry out the deletion.",
				"Helps ensure the API has the context required to process the delete operation."
			],
			"mandatory": false,
			"name": "Body",
			"type": "String"
		},
		{
			"description": [
				"Indicates the format of data sent in the request body.",
				"Helps the server understand how to parse and handle the payload.",
				"Supports formats such as JSON, XML, form data, and plain text."
			],
			"mandatory": false,
			"name": "ContentType",
			"type": "String",
			"values": [
				{
					"description": [
						"Represents JSON data encoded as JavaScript Object Notation.",
						"Allows for structured data that is easy to read and parse."
					],
					"name": "application/json"
				},
				{
					"description": [
						"Denotes a generic binary data stream when the format is unknown.",
						"Enables transferring files or data without predefined structure."
					],
					"name": "application/octet-stream"
				},
				{
					"description": [
						"Identifies Portable Document Format files for documents and forms.",
						"Ensures consistent rendering of printable content."
					],
					"name": "application/pdf"
				},
				{
					"description": [
						"Marks XML data formatted with Extensible Markup Language.",
						"Provides a generic way to represent structured data."
					],
					"name": "application/xml"
				},
				{
					"description": [
						"Specifies MPEG audio encoded in MP3 format.",
						"Offers compressed audio suitable for music and podcasts."
					],
					"name": "audio/mpeg"
				},
				{
					"description": [
						"Indicates JPEG images compressed for photographs.",
						"Balances image quality with file size."
					],
					"name": "image/jpeg"
				},
				{
					"description": [
						"Signals PNG images with lossless compression.",
						"Supports transparent backgrounds for web graphics."
					],
					"name": "image/png"
				},
				{
					"description": [
						"Used for form submissions that include files and text fields.",
						"Allows combining different data types in one request."
					],
					"name": "multipart/form-data"
				},
				{
					"description": [
						"Defines stylesheet content for web page styling in CSS.",
						"Controls layout, colors, and fonts of HTML documents."
					],
					"name": "text/css"
				},
				{
					"description": [
						"Represents HTML content to structure web pages.",
						"Defines elements like headings, paragraphs, and links."
					],
					"name": "text/html"
				},
				{
					"description": [
						"Denotes plain text without special formatting.",
						"Serves simple messages or logs in text form."
					],
					"name": "text/plain"
				},
				{
					"description": [
						"Encodes URL-encoded form data in key-value pairs.",
						"Pairs are separated by ampersands and percent-encoded if needed."
					],
					"name": "application/x-www-form-urlencoded"
				},
				{
					"description": [
						"Specifies MP4 multimedia container for video and audio.",
						"Supports subtitles and still images within the file."
					],
					"name": "video/mp4"
				}
			]
		},
		{
			"description": [
				"Explains how text characters are converted to binary code for transmission.",
				"Ensures the data is encoded and decoded correctly by both sender and receiver.",
				"Allows different encoding standards to maintain compatibility across systems."
			],
			"name": "Encoding",
			"type": "String",
			"values": [
				{
					"description": [
						"Uses 7-bit codes to represent 128 common characters such as letters, digits, and symbols.",
						"Forms the basis for many modern text encoding systems.",
						"Remains compatible with Unicode formats like UTF-8."
					],
					"name": "ASCII"
				},
				{
					"description": [
						"Stores each character in 16 bits with the most significant byte first.",
						"Commonly used on platforms that follow big-endian byte ordering.",
						"Ensures consistent decoding when big-endian formats are required."
					],
					"name": "BigEndianUnicode"
				},
				{
					"description": [
						"Also called ISO-8859-1 and covers many Western European languages.",
						"Uses one byte per character for a total of 256 symbols.",
						"Often used for legacy data but supports fewer characters than Unicode."
					],
					"name": "Latin1"
				},
				{
					"description": [
						"Assigns a unique code point to every character in most writing systems.",
						"Supports global text representation in a single standard.",
						"Forms the foundation for encodings like UTF-8 and UTF-16."
					],
					"name": "Unicode"
				},
				{
					"description": [
						"Encodes text using only 7-bit ASCII characters for safe transmission in restricted systems.",
						"Was originally designed for email use where 8-bit data could be problematic.",
						"Rarely used today because it is less efficient than modern encodings."
					],
					"name": "UTF7"
				},
				{
					"description": [
						"Variable-length encoding that uses one to four bytes per character.",
						"Covers all Unicode code points and is backward-compatible with ASCII.",
						"Widely adopted as the standard text format on the web."
					],
					"name": "UTF8"
				},
				{
					"description": [
						"Uses a fixed four bytes for each character’s code point.",
						"Simplifies text processing by providing a constant width per character.",
						"Consumes more memory but offers straightforward character indexing."
					],
					"name": "UTF32"
				}
			]
		},
		{
			"description": [
				"Defines a form field to include in the request body using key=value pairs.",
				"Encodes each field correctly so the server can read the data.",
				"Lets you send extra parameters when the server requires them during a delete operation."
			],
			"mandatory": false,
			"name": "Field",
			"type": "KeyValue"
		},
		{
			"description": [
				"Enables adding custom headers to an HTTP DELETE request.",
				"Each header uses a name=value format so the server can read it correctly.",
				"Allows you to repeat the parameter to include multiple headers.",
				"Custom headers let you send extra information like authentication tokens or tracing data."
			],
			"mandatory": false,
			"name": "Header",
			"type": "KeyValue"
		},
		{
			"description": [
				"Defines the web address where the delete request is sent.",
				"Tells the server which resource should be removed.",
				"Ensures the correct endpoint is targeted for deletion.",
				"Using an accurate URL helps prevent errors or deleting the wrong resource."
			],
			"mandatory": false,
			"name": "Url",
			"type": "Uri|String"
		}
	],
	"platforms": [
		"Any"
	],
	"pluginType": "HttpMethod",
	"properties": [
		{
			"description": [
				"Specifies where to send the HTTP PUT request and what data to include.",
				"Allows dynamic values through templates or variable placeholders in the format {{$...}}.",
				"Makes it possible to customize the request URL or payload at runtime."
			],
			"mandatory": true,
			"name": "Argument",
			"type": "Uri|Expression"
		},
		{
			"description": [
				"Specifies the attribute whose value should be extracted from an element identified by the `OnElement` expression.",
				"Works with XML or HTML responses, returning the value of the given attribute.",
				"Enables precise retrieval of metadata embedded in tags for downstream workflow processing."
			],
			"mandatory": false,
			"name": "OnAttribute",
			"type": "String"
		},
		{
			"description": [
				"Targets specific parts of an API response by using XPath or JSONPath expressions.",
				"Works with both XML and JSON responses.",
				"Adapts to the response format to locate the right element.",
				"Helps ensure the correct data is extracted regardless of the API’s output format."
			],
			"mandatory": false,
			"name": "OnElement",
			"type": "String"
		},
		{
			"description": [
				"Defines a pattern for capturing and extracting specific data from a text response.",
				"Uses standard regular expression syntax to match and retrieve the parts you need.",
				"Enables precise extraction of values embedded in the response.",
				"Helps automate parsing of complex text outputs."
			],
			"mandatory": false,
			"name": "RegularExpression",
			"type": "Regex"
		}
	],
	"protocol": {
		"apiDocumentation": "None",
		"w3c": "None"
	},
	"summary": [
		"The Put plugin lets automation workflows create or replace data on any endpoint with an HTTP PUT request.",
		"It builds URLs and payloads on the fly, adds custom headers, and returns status, headers, and body so other steps can react."
	]
}
