{
	"author": {
		"name": "Roei Sabag",
		"link": "https://www.linkedin.com/in/roei-sabag-247aa18/"
	},
	"categories": [
		"Http"
	],
	"context": {
		"integration": {
			"github": {
				"document": "https://github.com/g4-api/g4-plugins/blob/main/docs/HttpMethods/Get.md",
				"source": "https://github.com/g4-api/g4-plugins/blob/main/src/G4.Plugins.Common/HttpMethods/HttpGetMethod.cs"
			}
		}
	},
	"description": [
		"### Purpose",
		"",
		"The Get plugin lets automation workflows fetch information from servers or APIs using HTTP GET requests.",
		"This makes it easy to get the data you need without writing custom HTTP code.",
		"It helps keep automation tasks simple and reliable by handling request details for you.",
		"",
		"### Key Features and Functionality",
		"",
		"| Feature                    | Description                                                            |",
		"|----------------------------|------------------------------------------------------------------------|",
		"| Data Retrieval             | Sends HTTP GET requests to fetch data from APIs or servers.            |",
		"| Dynamic Requests           | Builds request URLs and parameters at runtime based on input values.   |",
		"| Custom Headers             | Adds any headers needed for authentication or custom API requirements. |",
		"| Content Types and Encoding | Handles different content formats and encodings automatically.         |",
		"| Response Handling          | Captures status codes, headers, and response bodies for further use.   |",
		"",
		"### Usages in RPA",
		"",
		"| Use Case             | Description                                                              |",
		"|----------------------|--------------------------------------------------------------------------|",
		"| Data Retrieval       | Automatically pull customer records, product information, or other data. |",
		"| Workflow Adjustments | Trigger or alter workflow steps based on the data retrieved.             |",
		"",
		"### Usages in Automation Testing",
		"",
		"| Use Case              | Description                                                        |",
		"|-----------------------|--------------------------------------------------------------------|",
		"| API Data Retrieval    | Use GET requests in tests to supply test data and setup scenarios. |",
		"| Data Integrity Checks | Check the accuracy of returned data against expected values.       |",
		"| Regression Testing    | Re-test data retrieval paths after updates to detect any breaks.   |"
	],
	"examples": [
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Empty URL",
						"HTTP redirect response",
						"Invalid URL format",
						"Large response payload",
						"Network failure",
						"Non-200 HTTP response",
						"Request timeout"
					],
					"expected_result": "The plugin sends a GET request to the URL and returns the HTTP response.",
					"notes": "Defines the target URL in the `argument` field. The Get plugin issues an HTTP GET request and captures the response.",
					"use_case": "get_simple_http_request",
					"version": "1.0"
				},
				"labels": [
					"DataRetrieval",
					"GetPlugin",
					"HttpRequest",
					"NetworkRequest"
				]
			},
			"description": [
				"### Purpose",
				"",
				"Retrieve data by sending an HTTP GET request to a specified URL using the Get plugin.",
				"Specify the target URL in the `argument` field."
			],
			"rule": {
				"$type": "Action",
				"argument": "http://api.example.com/v1/12345",
				"pluginName": "Get"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Empty URL",
						"Header injection attack",
						"Header with empty value",
						"HTTP redirect response",
						"Invalid header format",
						"Invalid URL format",
						"Large response payload",
						"Network failure",
						"Non-200 HTTP response",
						"Request timeout",
						"Unauthorized response"
					],
					"expected_result": "The plugin sends a GET request with the specified headers and returns the HTTP response.",
					"notes": "Include custom headers with `--Header` options in the `argument` field. The Get plugin issues an HTTP GET request and captures the response.",
					"use_case": "get_with_custom_headers",
					"version": "1.0"
				},
				"labels": [
					"CustomHeaders",
					"DataRetrieval",
					"GetPlugin",
					"HttpRequest",
					"NetworkRequest"
				]
			},
			"description": [
				"### Purpose",
				"",
				"Send an HTTP GET request with custom headers using the Get plugin.",
				"Specify headers with `--Header:<Name>=<Value>` flags in the `argument` field."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:http://api.example.com/v1/12345 --Header:Authorization=Bearer token123 --Header:Custom-Header=CustomValue}}",
				"pluginName": "Get"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Character decoding error",
						"Empty URL",
						"Invalid encoding value",
						"Large response payload",
						"Network failure",
						"Non-200 HTTP response",
						"Request timeout",
						"Unsupported encoding"
					],
					"expected_result": "The plugin sends a GET request using the specified encoding and returns the decoded response.",
					"notes": "Use the `--Encoding:<Value>` flag in the `argument` to set the character encoding for the response body.",
					"use_case": "get_with_encoding",
					"version": "1.0"
				},
				"labels": [
					"DataRetrieval",
					"Encoding",
					"GetPlugin",
					"HttpRequest",
					"NetworkRequest"
				]
			},
			"description": [
				"### Purpose",
				"",
				"Send an HTTP GET request with a specified character encoding using the Get plugin.",
				"Specify encoding with `--Encoding:<Value>` in the `argument` field."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:http://api.example.com/v1/12345 --Encoding:UTF8}}",
				"pluginName": "Get"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Attribute not found",
						"Empty response",
						"HTTP redirect response",
						"Invalid URL format",
						"Malformed XML",
						"Multiple nodes matched",
						"Network failure",
						"Non-200 HTTP response",
						"Request timeout",
						"XPath not matching"
					],
					"expected_result": "The plugin sends a GET request, locates the specified element, and returns the named attribute’s value.",
					"notes": "Use `onElement` for an XPath selector and `onAttribute` for the attribute name to extract from the response.",
					"use_case": "get_extract_attribute",
					"version": "1.0"
				},
				"labels": [
					"AttributeExtraction",
					"DataExtraction",
					"GetPlugin",
					"HttpRequest",
					"NetworkRequest",
					"XmlExtraction"
				]
			},
			"description": [
				"### Purpose",
				"",
				"Send an HTTP GET request and extract a specific attribute from the XML or HTML response using the Get plugin.",
				"Set the target element via its XPath in `onElement` and specify the attribute name in `onAttribute`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:http://api.example.com/v1/12345}}",
				"onAttribute": "status",
				"onElement": "//response",
				"pluginName": "Get"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Empty response",
						"HTTP redirect response",
						"Invalid URL format",
						"Malformed XML",
						"Multiple nodes matched",
						"Network failure",
						"Non-200 HTTP response",
						"Request timeout",
						"XPath not matching"
					],
					"expected_result": "The plugin sends a GET request, selects elements matching the XPath, and returns their content.",
					"notes": "Use `onElement` with an XPath expression to locate and extract elements from the XML or HTML response.",
					"use_case": "get_extract_elements_xpath",
					"version": "1.0"
				},
				"labels": [
					"DataExtraction",
					"GetPlugin",
					"HttpRequest",
					"NetworkRequest",
					"XPathExtraction",
					"XmlExtraction"
				]
			},
			"description": [
				"### Purpose",
				"",
				"Send an HTTP GET request and extract elements matching an XPath expression from the XML or HTML response using the Get plugin.",
				"Provide the XPath selector in `onElement` and the target URL in the `argument` field."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:http://api.example.com/v1/12345}}",
				"onElement": "//response/status",
				"pluginName": "Get"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Empty response",
						"HTTP redirect response",
						"Invalid JSON format",
						"Invalid URL format",
						"Multiple nodes matched",
						"Network failure",
						"Non-200 HTTP response",
						"Request timeout",
						"JSONPath not matching"
					],
					"expected_result": "The plugin sends a GET request, selects elements matching the JSONPath, and returns their content.",
					"notes": "Use `onJsonPath` with a JSONPath expression to locate and extract elements from the JSON response.",
					"use_case": "get_extract_elements_jsonpath",
					"version": "1.0"
				},
				"labels": [
					"DataExtraction",
					"GetPlugin",
					"HttpRequest",
					"JSONExtraction",
					"NetworkRequest"
				]
			},
			"description": [
				"### Purpose",
				"",
				"Send an HTTP GET request and extract elements matching a JSONPath expression from the JSON response using the Get plugin.",
				"Provide the JSONPath selector in `onJsonPath` and the target URL in the `argument` field."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:http://api.example.com/v1/12345}}",
				"onJsonPath": "$.response.status",
				"pluginName": "Get"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Currency symbol missing",
						"HTML tag changes",
						"Invalid URL format",
						"Large response payload",
						"Multiple price matches",
						"Network failure",
						"Non-200 HTTP response",
						"Request timeout",
						"Unexpected number format"
					],
					"expected_result": "The plugin sends a GET request to the product details endpoint and returns the first price value found.",
					"notes": "Use `regularExpression` to match a price pattern (digits with two decimals) in the response body.",
					"use_case": "get_extract_price_regex",
					"version": "1.0"
				},
				"labels": [
					"DataExtraction",
					"GetPlugin",
					"HttpRequest",
					"NetworkRequest",
					"RegexExtraction"
				]
			},
			"description": [
				"### Purpose",
				"",
				"Send an HTTP GET request to a product details endpoint and extract the price from the response using a regular expression.",
				"Specify the URL in `argument` and use `regularExpression` to match the numeric price format (e.g., `123.45`)."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:http://api.example.com/v1/products/5678/details}}",
				"pluginName": "Get",
				"regularExpression": "\\d+\\.\\d{2}"
			}
		}
	],
	"key": "Get",
	"manifestVersion": 4,
	"outputParameters": [
		{
			"description": [
				"Holds the content returned from an HTTP request after any specified extraction or processing rules have been applied.",
				"Provides a way to work with the processed response data instead of the raw body.",
				"Enables automation workflows to access the exact information they need from the HTTP response."
			],
			"name": "HttpResponse",
			"type": "Any"
		},
		{
			"description": [
				"Holds the HTTP response headers returned from an HTTP request.",
				"Contains key-value pairs that provide metadata about the response such as content type, date, and length.",
				"Enables workflows to inspect response details for logging or conditional logic."
			],
			"name": "HttpResponseHeaders",
			"type": "Any"
		},
		{
			"description": [
				"Holds the HTTP status code returned from an HTTP request.",
				"Represents the outcome of the request using a three-digit numeric code.",
				"Enables automation flows to check for success or failure of the HTTP operation.",
				"Supports error handling in workflows based on the status code value."
			],
			"name": "HttpStatusCode",
			"type": "Any"
		}
	],
	"parameters": [
		{
			"description": [
				"Indicates the format of data sent in the request body.",
				"Helps the server understand how to parse and handle the payload.",
				"Supports formats such as JSON, XML, form data, and plain text."
			],
			"mandatory": false,
			"name": "ContentType",
			"type": "String",
			"values": [
				{
					"description": [
						"Represents JSON data encoded as JavaScript Object Notation.",
						"Allows for structured data that is easy to read and parse."
					],
					"name": "application/json"
				},
				{
					"description": [
						"Denotes a generic binary data stream when the format is unknown.",
						"Enables transferring files or data without predefined structure."
					],
					"name": "application/octet-stream"
				},
				{
					"description": [
						"Identifies Portable Document Format files for documents and forms.",
						"Ensures consistent rendering of printable content."
					],
					"name": "application/pdf"
				},
				{
					"description": [
						"Marks XML data formatted with Extensible Markup Language.",
						"Provides a generic way to represent structured data."
					],
					"name": "application/xml"
				},
				{
					"description": [
						"Specifies MPEG audio encoded in MP3 format.",
						"Offers compressed audio suitable for music and podcasts."
					],
					"name": "audio/mpeg"
				},
				{
					"description": [
						"Indicates JPEG images compressed for photographs.",
						"Balances image quality with file size."
					],
					"name": "image/jpeg"
				},
				{
					"description": [
						"Signals PNG images with lossless compression.",
						"Supports transparent backgrounds for web graphics."
					],
					"name": "image/png"
				},
				{
					"description": [
						"Used for form submissions that include files and text fields.",
						"Allows combining different data types in one request."
					],
					"name": "multipart/form-data"
				},
				{
					"description": [
						"Defines stylesheet content for web page styling in CSS.",
						"Controls layout, colors, and fonts of HTML documents."
					],
					"name": "text/css"
				},
				{
					"description": [
						"Represents HTML content to structure web pages.",
						"Defines elements like headings, paragraphs, and links."
					],
					"name": "text/html"
				},
				{
					"description": [
						"Denotes plain text without special formatting.",
						"Serves simple messages or logs in text form."
					],
					"name": "text/plain"
				},
				{
					"description": [
						"Encodes URL-encoded form data in key-value pairs.",
						"Pairs are separated by ampersands and percent-encoded if needed."
					],
					"name": "application/x-www-form-urlencoded"
				},
				{
					"description": [
						"Specifies MP4 multimedia container for video and audio.",
						"Supports subtitles and still images within the file."
					],
					"name": "video/mp4"
				}
			]
		},
		{
			"description": [
				"Explains how text characters are converted to binary code for transmission.",
				"Ensures the data is encoded and decoded correctly by both sender and receiver.",
				"Allows different encoding standards to maintain compatibility across systems."
			],
			"name": "Encoding",
			"type": "String",
			"values": [
				{
					"description": [
						"Uses 7-bit codes to represent 128 common characters such as letters, digits, and symbols.",
						"Forms the basis for many modern text encoding systems.",
						"Remains compatible with Unicode formats like UTF-8."
					],
					"name": "ASCII"
				},
				{
					"description": [
						"Stores each character in 16 bits with the most significant byte first.",
						"Commonly used on platforms that follow big-endian byte ordering.",
						"Ensures consistent decoding when big-endian formats are required."
					],
					"name": "BigEndianUnicode"
				},
				{
					"description": [
						"Also called ISO-8859-1 and covers many Western European languages.",
						"Uses one byte per character for a total of 256 symbols.",
						"Often used for legacy data but supports fewer characters than Unicode."
					],
					"name": "Latin1"
				},
				{
					"description": [
						"Assigns a unique code point to every character in most writing systems.",
						"Supports global text representation in a single standard.",
						"Forms the foundation for encodings like UTF-8 and UTF-16."
					],
					"name": "Unicode"
				},
				{
					"description": [
						"Encodes text using only 7-bit ASCII characters for safe transmission in restricted systems.",
						"Was originally designed for email use where 8-bit data could be problematic.",
						"Rarely used today because it is less efficient than modern encodings."
					],
					"name": "UTF7"
				},
				{
					"description": [
						"Variable-length encoding that uses one to four bytes per character.",
						"Covers all Unicode code points and is backward-compatible with ASCII.",
						"Widely adopted as the standard text format on the web."
					],
					"name": "UTF8"
				},
				{
					"description": [
						"Uses a fixed four bytes for each character’s code point.",
						"Simplifies text processing by providing a constant width per character.",
						"Consumes more memory but offers straightforward character indexing."
					],
					"name": "UTF32"
				}
			]
		},
		{
			"description": [
				"Defines a form field to include in the request body using key=value pairs.",
				"Encodes each field correctly so the server can read the data.",
				"Lets you send extra parameters when the server requires them during a delete operation."
			],
			"mandatory": false,
			"name": "Field",
			"type": "KeyValue"
		},
		{
			"description": [
				"Enables adding custom headers to an HTTP DELETE request.",
				"Each header uses a name=value format so the server can read it correctly.",
				"Allows you to repeat the parameter to include multiple headers.",
				"Custom headers let you send extra information like authentication tokens or tracing data."
			],
			"mandatory": false,
			"name": "Header",
			"type": "KeyValue"
		},
		{
			"description": [
				"Defines the web address where the delete request is sent.",
				"Tells the server which resource should be removed.",
				"Ensures the correct endpoint is targeted for deletion.",
				"Using an accurate URL helps prevent errors or deleting the wrong resource."
			],
			"mandatory": false,
			"name": "Url",
			"type": "Uri|String"
		}
	],
	"platforms": [
		"Any"
	],
	"pluginType": "HttpMethod",
	"properties": [
		{
			"description": [
				"Specifies where to send the HTTP GET request and what data to include.",
				"Allows dynamic values through templates or variable placeholders in the format {{$...}}.",
				"Makes it possible to customize the request URL or payload at runtime."
			],
			"mandatory": true,
			"name": "Argument",
			"type": "Uri|Expression"
		},
		{
			"description": [
				"Specifies the attribute whose value should be extracted from an element identified by the `OnElement` expression.",
				"Works with XML or HTML responses, returning the value of the given attribute.",
				"Enables precise retrieval of metadata embedded in tags for downstream workflow processing."
			],
			"mandatory": false,
			"name": "OnAttribute",
			"type": "String"
		},
		{
			"description": [
				"Targets specific parts of an API response by using XPath or JSONPath expressions.",
				"Works with both XML and JSON responses.",
				"Adapts to the response format to locate the right element.",
				"Helps ensure the correct data is extracted regardless of the API’s output format."
			],
			"mandatory": false,
			"name": "OnElement",
			"type": "String"
		},
		{
			"description": [
				"Defines a pattern for capturing and extracting specific data from a text response.",
				"Uses standard regular expression syntax to match and retrieve the parts you need.",
				"Enables precise extraction of values embedded in the response.",
				"Helps automate parsing of complex text outputs."
			],
			"mandatory": false,
			"name": "RegularExpression",
			"type": "Regex"
		}
	],
	"protocol": {
		"apiDocumentation": "None",
		"w3c": "None"
	},
	"summary": [
		"The Get plugin sends HTTP GET requests to servers or APIs to retrieve data with dynamic URLs, custom headers, and payload handling.",
		"It captures response details for use in downstream automation steps and RPA workflows, enabling real-time access to resources like customer or product records.",
		"It streamlines automation testing by verifying data retrieval accuracy and ensuring reliable regression testing of API endpoints."
	]
}
