{
	"author": {
		"name": "Roei Sabag",
		"link": "https://www.linkedin.com/in/roei-sabag-247aa18/"
	},
	"categories": [
		"Http"
	],
	"context": {
		"integration": {
			"github": {
				"document": "https://github.com/g4-api/g4-plugins/blob/main/docs/HttpMethods/Patch.md",
				"source": "https://github.com/g4-api/g4-plugins/blob/main/src/G4.Plugins.Common/HttpMethods/HttpPatchMethod.cs"
			},
			"rag": {
				"description": "The Patch plugin enables automation workflows to apply partial updates using HTTP PATCH requests. It enforces parameter and payload validation, supports dynamic URL, header, body, and encoding configurations, and maintains workflow reliability through built-in response extraction and comprehensive error handling.",
				"qa": [
					{
						"question": "What does the Patch plugin do?",
						"answer": "The Patch plugin applies partial updates to resources by sending HTTP PATCH requests, allowing workflows to update only necessary fields rather than entire data payloads."
					},
					{
						"question": "What are the key features and configurable parameters of the Patch plugin?",
						"answer": "It supports dynamic URL building, customizable headers, various body formats, encoding options, and response extraction rules, enabling flexible partial updates. Key parameters include Argument, Body, ContentType, Encoding, Field, Header, Url, OnElement, OnAttribute, OnJsonPath, and RegularExpression."
					},
					{
						"question": "How is the Patch plugin integrated into automation workflows?",
						"answer": "It installs under the HttpMethod plugin type in G4's automation engine and is invoked with Action rules specifying pluginName \"Patch\" and options like --Url and --Body in the Argument. Source code is in HttpPatchMethod.cs and documentation is in docs/HttpMethods/Patch.md on GitHub."
					},
					{
						"question": "What are the best practices for using the Patch plugin?",
						"answer": "Use precise endpoint URLs, validate JSON or form payloads before sending, handle edge cases like invalid data or network errors, capture HTTP status codes and headers, and apply extraction rules only when needed to maintain workflow reliability and clarity."
					},
					{
						"question": "What is the rule/schema structure for defining a Patch action?",
						"answer": "Actions use a JSON object with \"$type\": \"Action\", pluginName: \"Patch\", and an Argument property containing options like --Url, --Body, --ContentType, etc. Optional properties OnElement, OnAttribute, OnJsonPath, and RegularExpression enable response data extraction per manifestVersion 4 schema."
					},
					{
						"question": "Who is the author of the Patch plugin?",
						"answer": "The plugin author is Roei Sabag (https://www.linkedin.com/in/roei-sabag-247aa18/)."
					},
					{
						"question": "What categories is the Patch plugin listed under?",
						"answer": "It is categorized under \"Http\"."
					},
					{
						"question": "What is the key identifier for the Patch plugin?",
						"answer": "The plugin key is \"Patch\"."
					},
					{
						"question": "Which manifest version does the Patch plugin use?",
						"answer": "It uses manifestVersion 4."
					},
					{
						"question": "What pluginType is specified for the Patch plugin?",
						"answer": "The pluginType is \"HttpMethod\"."
					},
					{
						"question": "Which platforms does the Patch plugin support?",
						"answer": "It supports the \"Any\" platform."
					},
					{
						"question": "What is the summary of the Patch plugin?",
						"answer": "The summary explains that it applies partial updates via HTTP PATCH, supports dynamic URL building, content handling, and custom headers, and enables workflows to confirm updates without replacing entire records."
					},
					{
						"question": "Where can I find the source code and documentation for the Patch plugin?",
						"answer": "Source code is in HttpPatchMethod.cs at https://github.com/g4-api/g4-plugins/blob/main/src/G4.Plugins.Common/HttpMethods/HttpPatchMethod.cs and documentation is in docs/HttpMethods/Patch.md at https://github.com/g4-api/g4-plugins/blob/main/docs/HttpMethods/Patch.md."
					},
					{
						"question": "How does the Patch plugin handle errors and edge cases?",
						"answer": "It includes built-in handling for edge cases like empty or invalid bodies, malformed URLs, network failures, non-2xx responses, timeouts, resource not found, and unsupported content types or encodings. Workflows can inspect HttpStatusCode and HttpResponseHeaders to implement custom error logic."
					}
				]
			}
		}
	},
	"description": [
		"### Purpose",
		"",
		"The Patch plugin lets automation workflows update only the parts of a resource they need on a server or API.",
		"It uses the standard HTTP PATCH method to apply partial changes, so you don't have to send the whole resource every time.",
		"This plugin makes building partial updates simple and reliable across different automation tasks.",
		"",
		"### Key Features and Functionality",
		"",
		"| Feature                    | Description                                                                     |",
		"|----------------------------|---------------------------------------------------------------------------------|",
		"| Data Update                | Sends HTTP PATCH requests to partially update data on servers or APIs.          |",
		"| Dynamic Requests           | Builds request URLs dynamically and lets you send different payloads as needed. |",
		"| Custom Headers             | Lets you include any custom headers in the request.                             |",
		"| Content Types and Encoding | Supports different data formats and encoding options in the request body.       |",
		"| Response Handling          | Captures status code, headers, and body of responses for further processing.    |",
		"",
		"### Usages in RPA",
		"",
		"| Use Case             | Description                                                                                         |",
		"|----------------------|-----------------------------------------------------------------------------------------------------|",
		"| Data Management      | Partially update records in other systems or APIs, like updating user profiles or inventory counts. |",
		"| Workflow Adjustments | Use updated data to decide the next steps in your automation flow.                                  |",
		"",
		"### Usages in Automation Testing",
		"",
		"| Use Case                       | Description                                                                         |",
		"|--------------------------------|-------------------------------------------------------------------------------------|",
		"| API Data Update                | Use PATCH requests in tests to set up or modify test data on the server.            |",
		"| Data Integrity Checks          | Confirm that only the intended fields were changed on the server.                   |",
		"| Regression Testing for Updates | Check that partial update features keep working after code changes or new releases. |",
		""
	],
	"examples": [
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Empty body",
						"Invalid JSON body",
						"Invalid URL format",
						"Malformed patch document",
						"Missing body",
						"Network failure",
						"Non-2xx HTTP response",
						"Request timeout",
						"Resource not found",
						"Unprocessable entity",
						"Unsupported content type"
					],
					"expected_result": "The plugin sends an HTTP PATCH request with the specified body and content type to the specified URL and returns the raw response.",
					"notes": "This example uses only the `argument` field to specify URL, body, and content type. It does not include response extraction rules.",
					"use_case": "send_patch_request_with_body_and_content_type",
					"version": "1.0.0"
				},
				"labels": [
					"ContentType",
					"HttpBody",
					"HttpMethod",
					"Json",
					"Patch",
					"RestfulApi"
				]
			},
			"description": [
				"### PATCH request with request body and content type",
				"",
				"Use the `Patch` plugin to send an HTTP PATCH request with a request body and content type.",
				"Specify the endpoint URL via the `--Url` option in the `argument` field.",
				"Provide the request body with the `--Body` option containing a JSON object.",
				"Set the content type header with the `--ContentType` option."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:http://api.example.com/v1/12345 --Body:{\"status\":\"updated\"} --ContentType:application/json}}",
				"pluginName": "Patch"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Empty body",
						"Invalid JSON body",
						"Invalid URL format",
						"Malformed patch document",
						"Missing body",
						"Network failure",
						"Non-2xx HTTP response",
						"Request timeout",
						"Resource not found",
						"Unprocessable entity",
						"Unsupported content type",
						"Unsupported encoding"
					],
					"expected_result": "The plugin sends an HTTP PATCH request with the specified body, content type, and encoding to the specified URL and returns the raw response.",
					"notes": "This example uses only the `argument` field to specify URL, body, content type, and encoding. It does not include response extraction rules.",
					"use_case": "send_patch_request_with_encoding",
					"version": "1.0.0"
				},
				"labels": [
					"ContentType",
					"Encoding",
					"HttpBody",
					"HttpMethod",
					"Json",
					"Patch",
					"RestfulApi"
				]
			},
			"description": [
				"### PATCH request with encoding",
				"",
				"Use the `Patch` plugin to send an HTTP PATCH request with a specified encoding.",
				"Specify the endpoint URL via the `--Url` option in the `argument` field.",
				"Provide the request body with the `--Body` option containing a JSON object.",
				"Set the content type header with the `--ContentType` option.",
				"Set the request encoding using the `--Encoding` option."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:http://api.example.com/v1/12345 --Body:{\"status\":\"updated\"} --ContentType:application/json --Encoding:UTF8}}",
				"pluginName": "Patch"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Duplicate form fields",
						"Empty form field value",
						"Invalid field format",
						"Invalid URL format",
						"Malformed patch document",
						"Network failure",
						"Non-2xx HTTP response",
						"Request timeout",
						"Resource not found",
						"Unprocessable entity",
						"Unsupported content type"
					],
					"expected_result": "The plugin sends an HTTP PATCH request with form fields to the specified URL and returns the raw response.",
					"notes": "This example uses only the `argument` field to specify URL and form fields. It does not include response extraction rules.",
					"use_case": "send_patch_request_with_form_fields",
					"version": "1.0.0"
				},
				"labels": [
					"FormFields",
					"HttpBody",
					"HttpMethod",
					"Patch",
					"RestfulApi"
				]
			},
			"description": [
				"### PATCH request with form fields",
				"",
				"Use the `Patch` plugin to send an HTTP PATCH request with form fields.",
				"Specify the endpoint URL via the `--Url` option in the `argument` field.",
				"Provide form fields using the `--Field` option with key=value pairs.",
				"Include multiple form fields by repeating the `--Field` option."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:http://api.example.com/v1/12345 --Field:status=updated}}",
				"pluginName": "Patch"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Attribute not found",
						"Element not found",
						"Empty body",
						"Extraction failure",
						"Invalid element path",
						"Invalid JSON body",
						"Invalid URL format",
						"Malformed patch document",
						"Missing body",
						"Network failure",
						"Non-2xx HTTP response",
						"Request timeout",
						"Resource not found",
						"Unprocessable entity",
						"Unsupported content type"
					],
					"expected_result": "The plugin sends an HTTP PATCH request with the specified body and content type to the specified URL and extracts the value of the specified attribute from the matching response element.",
					"notes": "This example uses the `argument`, `onElement`, and `onAttribute` fields.",
					"use_case": "send_patch_request_with_response_extraction",
					"version": "1.0.0"
				},
				"labels": [
					"Extraction",
					"HttpBody",
					"HttpMethod",
					"Json",
					"Patch",
					"RestfulApi"
				]
			},
			"description": [
				"### PATCH request with response extraction",
				"",
				"Use the `Patch` plugin to send an HTTP PATCH request and extract a specific attribute from the response.",
				"Specify the endpoint URL via the `--Url` option in the `argument` field.",
				"Provide the request body with the `--Body` option containing a JSON object.",
				"Set the content type header with the `--ContentType` option.",
				"Extract the attribute by setting `onElement` to the target element path and `onAttribute` to the attribute name."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:http://api.example.com/v1/12345 --Body:{\"status\":\"updated\"} --ContentType:application/json}}",
				"onAttribute": "status",
				"onElement": "//response",
				"pluginName": "Patch"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Duplicate form fields",
						"Empty form field value",
						"Element not found",
						"Extraction failure",
						"Invalid element path",
						"Invalid field format",
						"Invalid URL format",
						"Malformed patch document",
						"Network failure",
						"Non-2xx HTTP response",
						"Request timeout",
						"Resource not found",
						"Unprocessable entity",
						"Unsupported content type"
					],
					"expected_result": "The plugin sends an HTTP PATCH request with form fields to the specified URL and returns the matching elements from the response using the specified XPath expression.",
					"notes": "This example uses the `argument` field to specify URL and form fields, and the `onElement` field for element targeting.",
					"use_case": "send_patch_request_targeting_elements",
					"version": "1.0.0"
				},
				"labels": [
					"Extraction",
					"FormFields",
					"HttpBody",
					"HttpMethod",
					"Patch",
					"RestfulApi"
				]
			},
			"description": [
				"### PATCH request targeting elements",
				"",
				"Use the `Patch` plugin to send an HTTP PATCH request and target response elements using an XPath expression.",
				"Specify the endpoint URL and form fields via the `--Url` and `--Field` options in the `argument` field.",
				"Set the XPath expression for element targeting with the `onElement` field."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:http://api.example.com/v1/12345 --Field:status=updated}}",
				"onElement": "//response/status",
				"pluginName": "Patch"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Duplicate form fields",
						"Empty form field value",
						"Invalid field format",
						"Invalid JSONPath expression",
						"Invalid URL format",
						"JSONPath no match",
						"Malformed patch document",
						"Network failure",
						"Non-2xx HTTP response",
						"Request timeout",
						"Resource not found",
						"Unprocessable entity",
						"Unsupported content type"
					],
					"expected_result": "The plugin sends an HTTP PATCH request with form fields to the specified URL and returns the matching elements from the response JSON using the specified JSONPath expression.",
					"notes": "This example uses the `argument` field to specify URL and form fields, and the `onJsonPath` field for element targeting.",
					"use_case": "send_patch_request_targeting_elements_jsonpath",
					"version": "1.0.0"
				},
				"labels": [
					"Extraction",
					"FormFields",
					"HttpBody",
					"HttpMethod",
					"JsonPath",
					"Patch",
					"RestfulApi"
				]
			},
			"description": [
				"### PATCH request targeting elements with JSONPath",
				"",
				"Use the `Patch` plugin to send an HTTP PATCH request and target response elements using a JSONPath expression.",
				"Specify the endpoint URL and form fields via the `--Url` and `--Field` options in the `argument` field.",
				"Set the JSONPath expression for element targeting with the `onJsonPath` field."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:http://api.example.com/v1/12345 --Field:status=updated}}",
				"onJsonPath": "$.response.status",
				"pluginName": "Patch"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Duplicate form fields",
						"Empty form field value",
						"Invalid field format",
						"Invalid JSON body",
						"Invalid regular expression",
						"Invalid URL format",
						"Malformed patch document",
						"Network failure",
						"No regex match",
						"Non-2xx HTTP response",
						"Request timeout",
						"Resource not found",
						"Unprocessable entity",
						"Unsupported content type"
					],
					"expected_result": "The plugin sends an HTTP PATCH request with form fields to the specified URL and extracts data from the response using the specified regular expression.",
					"notes": "This example uses the `argument` and `regularExpression` fields.",
					"use_case": "send_patch_request_with_regex_extraction",
					"version": "1.0.0"
				},
				"labels": [
					"Extraction",
					"FormFields",
					"HttpBody",
					"HttpMethod",
					"Patch",
					"RegExp",
					"RestfulApi"
				]
			},
			"description": [
				"### PATCH request with regex extraction",
				"",
				"Use the `Patch` plugin to send an HTTP PATCH request and apply a regular expression to extract specific data from the response.",
				"Specify the endpoint URL and form fields via the `--Url` and `--Field` options in the `argument` field.",
				"Set the regular expression for data extraction with the `regularExpression` field.",
				"The regex `\"id\":\\s*\"(\\d+)\"` extracts the numeric ID value from a JSON response."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:http://api.example.com/v1/12345 --Field:status=updated}}",
				"pluginName": "Patch",
				"regularExpression": "\\\"id\\\":\\s*\\\"(\\d+)\\\""
			}
		}
	],
	"key": "Patch",
	"manifestVersion": 4,
	"outputParameters": [
		{
			"description": [
				"Holds the content returned from an HTTP request after any specified extraction or processing rules have been applied.",
				"Provides a way to work with the processed response data instead of the raw body.",
				"Enables automation workflows to access the exact information they need from the HTTP response."
			],
			"name": "HttpResponse",
			"type": "Any"
		},
		{
			"description": [
				"Holds the HTTP response headers returned from an HTTP request.",
				"Contains key-value pairs that provide metadata about the response such as content type, date, and length.",
				"Enables workflows to inspect response details for logging or conditional logic."
			],
			"name": "HttpResponseHeaders",
			"type": "Any"
		},
		{
			"description": [
				"Holds the HTTP status code returned from an HTTP request.",
				"Represents the outcome of the request using a three-digit numeric code.",
				"Enables automation flows to check for success or failure of the HTTP operation.",
				"Supports error handling in workflows based on the status code value."
			],
			"name": "HttpStatusCode",
			"type": "Any"
		}
	],
	"parameters": [
		{
			"description": [
				"Defines the data payload sent with a DELETE request.",
				"Includes extra details the server may need to carry out the deletion.",
				"Helps ensure the API has the context required to process the delete operation."
			],
			"mandatory": false,
			"name": "Body",
			"type": "String"
		},
		{
			"description": [
				"Indicates the format of data sent in the request body.",
				"Helps the server understand how to parse and handle the payload.",
				"Supports formats such as JSON, XML, form data, and plain text."
			],
			"mandatory": false,
			"name": "ContentType",
			"type": "String",
			"values": [
				{
					"description": [
						"Represents JSON data encoded as JavaScript Object Notation.",
						"Allows for structured data that is easy to read and parse."
					],
					"name": "application/json"
				},
				{
					"description": [
						"Denotes a generic binary data stream when the format is unknown.",
						"Enables transferring files or data without predefined structure."
					],
					"name": "application/octet-stream"
				},
				{
					"description": [
						"Identifies Portable Document Format files for documents and forms.",
						"Ensures consistent rendering of printable content."
					],
					"name": "application/pdf"
				},
				{
					"description": [
						"Marks XML data formatted with Extensible Markup Language.",
						"Provides a generic way to represent structured data."
					],
					"name": "application/xml"
				},
				{
					"description": [
						"Specifies MPEG audio encoded in MP3 format.",
						"Offers compressed audio suitable for music and podcasts."
					],
					"name": "audio/mpeg"
				},
				{
					"description": [
						"Indicates JPEG images compressed for photographs.",
						"Balances image quality with file size."
					],
					"name": "image/jpeg"
				},
				{
					"description": [
						"Signals PNG images with lossless compression.",
						"Supports transparent backgrounds for web graphics."
					],
					"name": "image/png"
				},
				{
					"description": [
						"Used for form submissions that include files and text fields.",
						"Allows combining different data types in one request."
					],
					"name": "multipart/form-data"
				},
				{
					"description": [
						"Defines stylesheet content for web page styling in CSS.",
						"Controls layout, colors, and fonts of HTML documents."
					],
					"name": "text/css"
				},
				{
					"description": [
						"Represents HTML content to structure web pages.",
						"Defines elements like headings, paragraphs, and links."
					],
					"name": "text/html"
				},
				{
					"description": [
						"Denotes plain text without special formatting.",
						"Serves simple messages or logs in text form."
					],
					"name": "text/plain"
				},
				{
					"description": [
						"Encodes URL-encoded form data in key-value pairs.",
						"Pairs are separated by ampersands and percent-encoded if needed."
					],
					"name": "application/x-www-form-urlencoded"
				},
				{
					"description": [
						"Specifies MP4 multimedia container for video and audio.",
						"Supports subtitles and still images within the file."
					],
					"name": "video/mp4"
				}
			]
		},
		{
			"description": [
				"Explains how text characters are converted to binary code for transmission.",
				"Ensures the data is encoded and decoded correctly by both sender and receiver.",
				"Allows different encoding standards to maintain compatibility across systems."
			],
			"name": "Encoding",
			"type": "String",
			"values": [
				{
					"description": [
						"Uses 7-bit codes to represent 128 common characters such as letters, digits, and symbols.",
						"Forms the basis for many modern text encoding systems.",
						"Remains compatible with Unicode formats like UTF-8."
					],
					"name": "ASCII"
				},
				{
					"description": [
						"Stores each character in 16 bits with the most significant byte first.",
						"Commonly used on platforms that follow big-endian byte ordering.",
						"Ensures consistent decoding when big-endian formats are required."
					],
					"name": "BigEndianUnicode"
				},
				{
					"description": [
						"Also called ISO-8859-1 and covers many Western European languages.",
						"Uses one byte per character for a total of 256 symbols.",
						"Often used for legacy data but supports fewer characters than Unicode."
					],
					"name": "Latin1"
				},
				{
					"description": [
						"Assigns a unique code point to every character in most writing systems.",
						"Supports global text representation in a single standard.",
						"Forms the foundation for encodings like UTF-8 and UTF-16."
					],
					"name": "Unicode"
				},
				{
					"description": [
						"Encodes text using only 7-bit ASCII characters for safe transmission in restricted systems.",
						"Was originally designed for email use where 8-bit data could be problematic.",
						"Rarely used today because it is less efficient than modern encodings."
					],
					"name": "UTF7"
				},
				{
					"description": [
						"Variable-length encoding that uses one to four bytes per character.",
						"Covers all Unicode code points and is backward-compatible with ASCII.",
						"Widely adopted as the standard text format on the web."
					],
					"name": "UTF8"
				},
				{
					"description": [
						"Uses a fixed four bytes for each character’s code point.",
						"Simplifies text processing by providing a constant width per character.",
						"Consumes more memory but offers straightforward character indexing."
					],
					"name": "UTF32"
				}
			]
		},
		{
			"description": [
				"Defines a form field to include in the request body using key=value pairs.",
				"Encodes each field correctly so the server can read the data.",
				"Lets you send extra parameters when the server requires them during a delete operation."
			],
			"mandatory": false,
			"name": "Field",
			"type": "KeyValue"
		},
		{
			"description": [
				"Enables adding custom headers to an HTTP DELETE request.",
				"Each header uses a name=value format so the server can read it correctly.",
				"Allows you to repeat the parameter to include multiple headers.",
				"Custom headers let you send extra information like authentication tokens or tracing data."
			],
			"mandatory": false,
			"name": "Header",
			"type": "KeyValue"
		},
		{
			"description": [
				"Defines the web address where the delete request is sent.",
				"Tells the server which resource should be removed.",
				"Ensures the correct endpoint is targeted for deletion.",
				"Using an accurate URL helps prevent errors or deleting the wrong resource."
			],
			"mandatory": false,
			"name": "Url",
			"type": "Uri|String"
		}
	],
	"platforms": [
		"Any"
	],
	"pluginType": "HttpMethod",
	"properties": [
		{
			"description": [
				"Specifies where to send the HTTP PATH request and what data to include.",
				"Allows dynamic values through templates or variable placeholders in the format {{$...}}.",
				"Makes it possible to customize the request URL or payload at runtime."
			],
			"mandatory": true,
			"name": "Argument",
			"type": "Uri|Expression"
		},
		{
			"description": [
				"Specifies the attribute whose value should be extracted from an element identified by the `OnElement` expression.",
				"Works with XML or HTML responses, returning the value of the given attribute.",
				"Enables precise retrieval of metadata embedded in tags for downstream workflow processing."
			],
			"mandatory": false,
			"name": "OnAttribute",
			"type": "String"
		},
		{
			"description": [
				"Targets specific parts of an API response by using XPath or JSONPath expressions.",
				"Works with both XML and JSON responses.",
				"Adapts to the response format to locate the right element.",
				"Helps ensure the correct data is extracted regardless of the API’s output format."
			],
			"mandatory": false,
			"name": "OnElement",
			"type": "String"
		},
		{
			"description": [
				"Defines a pattern for capturing and extracting specific data from a text response.",
				"Uses standard regular expression syntax to match and retrieve the parts you need.",
				"Enables precise extraction of values embedded in the response.",
				"Helps automate parsing of complex text outputs."
			],
			"mandatory": false,
			"name": "RegularExpression",
			"type": "Regex"
		}
	],
	"protocol": {
		"apiDocumentation": "None",
		"w3c": "None"
	},
	"summary": [
		"The Patch plugin applies partial updates to data by sending HTTP PATCH requests.",
		"It supports dynamic URL building, request content handling, and custom headers for flexible API interactions.",
		"Users can update specific fields in external systems, like customer details or product info, without replacing entire records.",
		"It records system replies to confirm updates succeeded, helping automated workflows check that changes were applied."
	]
}
