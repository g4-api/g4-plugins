{
	"author": {
		"link": "https://www.linkedin.com/in/roei-sabag-247aa18/",
		"name": "Roei Sabag"
	},
	"categories": [
		"General"
	],
	"description": [
		"> [!WARNING]",
		"> This plugin is supported on Windows machines only.",
		"",
		"### Purpose",
		"",
		"The primary purpose of the `SetUserParameter` plugin is to set user-level parameters that are specific to the user running the automation session. This allows for flexible configuration management, enabling dynamic updates to parameters such as user-specific settings or configurations essential for automation workflows.",
		"",
		"### Key Features and Functionality",
		"",
		"| Feature                        | Description                                                                                            |",
		"|------------------------------- |--------------------------------------------------------------------------------------------------------|",
		"| Parameter Setting              | Sets user-level parameters that persist for the user running the automation session.                   |",
		"| User-Specific Parameters       | Allows for dynamic parameters that are specific to the user environment.                               |",
		"| Integration with Other Plugins | Can be used in conjunction with other plugins to dynamically set parameters based on automation needs. |",
		"",
		"### Usages in RPA",
		"",
		"| Usage                           | Description                                                                              |",
		"|---------------------------------|------------------------------------------------------------------------------------------|",
		"| Dynamic Configuration           | Set configuration settings dynamically based on user-specific requirements.              |",
		"| User-Specific Parameter Storage | Use a centralized location for storing and setting parameters that persist for the user. |",
		"",
		"### Usages in Automation Testing",
		"",
		"| Usage                    | Description                                                                           |",
		"|--------------------------|---------------------------------------------------------------------------------------|",
		"| User-Specific Testing    | Set parameters specific to the user, enabling more accurate and user-specific tests.  |",
		"| Configuration Management | Simplify configuration management by setting parameters directly within test scripts. |"
	],
	"examples": [
		{
			"description": [
				"This example demonstrates the usage of the `User` plugin to set a parameter named `UserSetting` directly.",
				"",
				"| Field      | Description                                                              |",
				"|------------|--------------------------------------------------------------------------|",
				"| pluginName | Identifies the specific plugin being utilized, which is `User`.          |",
				"| argument   | Specifies the value to set the parameter.                                |",
				"| onElement  | Specifies the name of the parameter to be set.                           |"
			],
			"rule": {
				"argument": "{{$ --Value:MyUserSetting}}",
				"onElement": "UserSetting",
				"pluginName": "User"
			}
		},
		{
			"description": [
				"This example demonstrates the usage of the macro to set a parameter named `UserSetting` and use it in a `RegisterParameter` action, utilizing the `OnAttribute` property.",
				"",
				"| Field       | Description                                                                                             |",
				"|-------------|---------------------------------------------------------------------------------------------------------|",
				"| pluginName  | Identifies the specific plugin being utilized, which is `RegisterParameter`.                            |",
				"| argument    | Specifies the use of the macro to set the parameter value dynamically.                                  |",
				"| onElement   | Specifies the target element whose attribute content will be saved as the parameter value.              |",
				"| onAttribute | Specifies the attribute of the element from which the value will be extracted.                          |",
				"| locator     | Specifies the locator type used to identify the target element, which is `CssSelector` in this example. |"
			],
			"rule": {
				"argument": "{{$ --Name:UserSetting --Scope:User}}",
				"locator": "CssSelector",
				"onAttribute": "data-value",
				"onElement": "#someElement",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"description": [
				"This example demonstrates setting a parameter named `UserSetting` from the text content of an element identified by its CSS selector.",
				"",
				"| Field      | Description                                                                                             |",
				"|------------|---------------------------------------------------------------------------------------------------------|",
				"| pluginName | Identifies the specific plugin being utilized, which is `RegisterParameter`.                            |",
				"| argument   | Specifies the use of the macro to set the parameter value dynamically.                                  |",
				"| onElement  | Specifies the target element whose text content will be saved as the parameter value.                   |",
				"| locator    | Specifies the locator type used to identify the target element, which is `CssSelector` in this example. |"
			],
			"rule": {
				"argument": "{{$ --Name:UserSetting --Scope:User}}",
				"locator": "CssSelector",
				"onElement": "#someElement",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"description": [
				"This example demonstrates setting a parameter named `APIKey` from the text content of an element identified by its CSS selector and using a regular expression to extract part of the text.",
				"",
				"| Field             | Description                                                                                             |",
				"|-------------------|---------------------------------------------------------------------------------------------------------|",
				"| pluginName        | Identifies the specific plugin being utilized, which is `RegisterParameter`.                            |",
				"| argument          | Specifies the use of the macro to set the parameter value dynamically.                                  |",
				"| onElement         | Specifies the target element whose text content will be saved as the parameter value.                   |",
				"| regularExpression | Specifies the regular expression to apply to the text content before saving the parameter value.        |",
				"| locator           | Specifies the locator type used to identify the target element, which is `CssSelector` in this example. |"
			],
			"rule": {
				"argument": "{{$ --Name:APIKey --Scope:User}}",
				"locator": "CssSelector",
				"onElement": "#apiElement",
				"pluginName": "RegisterParameter",
				"regularExpression": "^.*(?=\\sAPIKey$)"
			}
		}
	],
	"key": "User",
	"manifestVersion": 4,
	"parameters": [
		{
			"description": [
				"Specifies the value to be set for the parameter."
			],
			"mandatory": false,
			"name": "Value",
			"type": "String"
		}
	],
	"pluginType": "SetParameter",
	"properties": [
		{
			"description": [
				"Specifies the name of the parameter to be set."
			],
			"mandatory": true,
			"name": "OnElement",
			"type": "String"
		}
	],
	"protocol": {
		"apiDocumentation": "None",
		"w3c": "None"
	},
	"scope": [
		"Any"
	],
	"summary": [
		"The `SetUserParameter` plugin sets user-level parameters within automation workflows, enhancing configuration management."
	]
}
