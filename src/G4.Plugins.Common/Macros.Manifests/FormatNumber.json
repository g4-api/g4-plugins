{
	"aliases": [
		"FormatNumber",
		"fmtnum"
	],
	"author": {
		"link": "https://www.linkedin.com/in/roei-sabag-247aa18/",
		"name": "Roei Sabag"
	},
	"categories": [
		"Utilities"
	],
	"description": [
		"### Purpose",
		"",
		"The FormatNumber macro plugin formats numbers based on culture settings and custom formats for precise numeric representation.",
		"It ensures consistent number output across automation tasks.",
		"",
		"### Key Features and Functionality",
		"",
		"| Feature                     | Description                                                                     |",
		"|-----------------------------|---------------------------------------------------------------------------------|",
		"| Culture-specific Formatting | Formats numbers according to the specified culture for accurate representation. |",
		"| Custom Format               | Applies custom format strings to meet specific formatting requirements.         |",
		"",
		"### Usages in RPA",
		"",
		"| Use Case             | Description                                                                 |",
		"|----------------------|-----------------------------------------------------------------------------|",
		"| Financial Automation | Formats currency values using local conventions and culture-specific rules. |",
		"| Data Reporting       | Standardizes numeric data presentation in reports and dashboards.           |",
		"",
		"### Usages in Automation Testing",
		"",
		"| Use Case          | Description                                                                 |",
		"|-------------------|-----------------------------------------------------------------------------|",
		"| Data Validation   | Applies specific formats to verify numeric data consistency during testing. |",
		"| Result Formatting | Structures test results in a clear and standardized numeric format.         |",
		"",
		"### Additional Resources",
		"",
		"- [Standard Numeric Format Strings](https://learn.microsoft.com/en-us/dotnet/standard/base-types/standard-numeric-format-strings)",
		"- [Custom Numeric Format Strings](https://learn.microsoft.com/en-us/dotnet/standard/base-types/custom-numeric-format-strings)",
		"- [List of .NET Culture Country Codes](https://azuliadesigns.com/c-sharp-tutorials/list-net-culture-country-codes/)"
	],
	"examples": [
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Culture set to invariant",
						"Empty number string",
						"Extremely small decimal value",
						"Large integer part",
						"Non-numeric input",
						"Null element reference",
						"Unsupported format specifier",
						"Value exceeds Double precision"
					],
					"expected_result": "The FormatNumber macro evaluates to a round-trip formatted string for 123456789.12345678, and the SendKeys plugin types that string into #inputField.",
					"notes": "Illustrates how a macro supplies a runtime value to an action; the macro itself performs no UI interaction.",
					"use_case": "format_number_round_trip_sendkeys",
					"version": "1.0.1"
				},
				"labels": [
					"CssSelector",
					"FormatNumber",
					"Macro",
					"NumericFormatting",
					"SendKeys",
					"UiAutomation"
				]
			},
			"description": [
				"### Format a decimal number with the round-trip (`R`) specifier",
				"",
				"The `FormatNumber` macro evaluates `123456789.12345678` with the `R` format specifier.",
				"The resulting text is inserted where the macro token appears, providing a precise string to the `SendKeys` plugin, which then types it into the element selected by the CSS selector `#inputField`.",
				"Macros do not perform actions; they only generate values. Their output can be reused wherever a literal value is accepted, not just with `SendKeys`.",
				"While `R` preserves exact precision, you may prefer `G17` for `Double` or `G9` for `Single` values when performance is critical."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$FormatNumber --Number:123456789.12345678 --Format:R}}",
				"locator": "CssSelector",
				"onElement": "#inputField",
				"pluginName": "SendKeys"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Culture set to invariant",
						"Negative integer input",
						"Non-integral input",
						"Null element reference",
						"Precision specifier longer than digits",
						"Precision specifier shorter than digits",
						"Unsupported .NET version",
						"Zero value"
					],
					"expected_result": "The Format-Number macro produces the binary string for 42, and the SendKeys plugin types that string into #inputField.",
					"notes": "Demonstrates a macro that generates a binary-formatted value consumed by an action; the macro itself has no UI side-effects.",
					"use_case": "format_integer_binary_sendkeys",
					"version": "1.0.0"
				},
				"labels": [
					"BinaryFormatting",
					"CssSelector",
					"FormatNumber",
					"Macro",
					"SendKeys",
					"UiAutomation"
				]
			},
			"description": [
				"### Format an integer with the binary (`B`) specifier",
				"",
				"The `Format-Number` macro evaluates the value `42` using the `B` format specifier, producing its binary representation.",
				"That binary string replaces the macro token at runtime.",
				"The `SendKeys` plugin then types the generated string into the element identified by the CSS selector `#inputField`.",
				"Macros do not perform actions; they only supply values and can be reused anywhere a literal value is accepted.",
				"The `B` format specifier converts integral numbers to binary digits and is supported on .NET 8 and later.",
				"When a precision specifier is provided, the result is padded with leading zeros to reach the requested length, following the current `NumberFormatInfo` settings."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$Format-Number --Number:42 --Format:B}}",
				"locator": "CssSelector",
				"onElement": "#inputField",
				"pluginName": "SendKeys"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Culture set to invariant",
						"Negative integer input",
						"Non-integral input",
						"Null element reference",
						"Precision specifier longer than digits",
						"Precision specifier shorter than digits",
						"Unsupported .NET version",
						"Value exceeds 16 bits",
						"Zero value"
					],
					"expected_result": "The Format-Number macro produces the 16-digit binary string for 255, and the SendKeys plugin types that string into #inputField.",
					"notes": "Shows a macro that generates a binary-formatted value consumed by an action; the macro itself has no UI side-effects.",
					"use_case": "format_integer_binary16_sendkeys",
					"version": "1.0.0"
				},
				"labels": [
					"BinaryFormatting",
					"CssSelector",
					"FormatNumber",
					"Macro",
					"SendKeys",
					"UiAutomation"
				]
			},
			"description": [
				"### Format an integer with a 16-digit binary (`b16`) specifier",
				"",
				"The `Format-Number` macro evaluates the value `255` with the `b16` format specifier, producing its 16-digit binary representation.",
				"That binary string replaces the macro token at runtime.",
				"The `SendKeys` plugin then types the generated string into the element identified by the CSS selector `#inputField`.",
				"Macros only generate values; they never perform UI actions and can be reused anywhere a literal value is accepted.",
				"The binary (`b`) format converts integral numbers to binary digits and is supported on .NET 8 and later.",
				"When a precision specifier is provided, the result is padded with leading zeros to reach the requested length, following the current `NumberFormatInfo` settings."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$Format-Number --Number:255 --Format:b16}}",
				"locator": "CssSelector",
				"onElement": "#inputField",
				"pluginName": "SendKeys"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Culture set to invariant",
						"Negative integer input",
						"Non-integral input",
						"Null element reference",
						"Precision specifier longer than digits",
						"Precision specifier shorter than digits",
						"Unsupported type",
						"Zero value"
					],
					"expected_result": "The Format-Number macro produces the decimal string for 1234, and the SendKeys plugin types that string into #inputField.",
					"notes": "Illustrates a macro that generates a decimal-formatted value consumed by an action; the macro itself has no UI side-effects.",
					"use_case": "format_integer_decimal_sendkeys",
					"version": "1.0.0"
				},
				"labels": [
					"CssSelector",
					"DecimalFormatting",
					"FormatNumber",
					"Macro",
					"SendKeys",
					"UiAutomation"
				]
			},
			"description": [
				"### Format an integer with the decimal (`D`) specifier",
				"",
				"The `Format-Number` macro evaluates the value `1234` using the `D` format specifier, producing its decimal representation.",
				"That string replaces the macro token at runtime.",
				"The `SendKeys` plugin then types the generated string into the element identified by the CSS selector `#inputField`.",
				"Macros only generate values; they never perform UI actions and can be reused anywhere a literal value is accepted.",
				"The `D` specifier converts integral numbers to decimal digits and is supported for integral types only.",
				"A precision specifier pads the number with leading zeros to reach the requested length, according to the current `NumberFormatInfo` settings."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$Format-Number --Number:1234 --Format:D}}",
				"locator": "CssSelector",
				"onElement": "#inputField",
				"pluginName": "SendKeys"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Culture set to invariant",
						"Negative integer input",
						"Non-integral input",
						"Null element reference",
						"Precision specifier longer than digits",
						"Precision specifier shorter than digits",
						"Unsupported type",
						"Zero value"
					],
					"expected_result": "The Format-Number macro produces a zero-padded decimal string for -1234 with the D6 specifier, and the SendKeys plugin types that string into #inputField.",
					"notes": "Shows a macro that generates a padded decimal value consumed by an action; the macro itself has no UI side-effects.",
					"use_case": "format_integer_decimal6_sendkeys",
					"version": "1.0.0"
				},
				"labels": [
					"CssSelector",
					"DecimalFormatting",
					"FormatNumber",
					"Macro",
					"SendKeys",
					"UiAutomation"
				]
			},
			"description": [
				"### Format an integer with the `D6` decimal specifier",
				"",
				"The `Format-Number` macro evaluates the value `-1234` using the `D6` format specifier, producing a six-digit decimal string padded with leading zeros.",
				"That string replaces the macro token at runtime.",
				"The `SendKeys` plugin then types the generated string into the element identified by the CSS selector `#inputField`.",
				"Macros only generate values; they never perform UI actions and can be reused anywhere a literal value is accepted.",
				"The `D` specifier converts integral numbers to decimal digits and is supported for integral types only.",
				"A precision specifier pads the number with leading zeros to reach the requested length, according to the current `NumberFormatInfo` settings."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$Format-Number --Number:-1234 --Format:D6}}",
				"locator": "CssSelector",
				"onElement": "#inputField",
				"pluginName": "SendKeys"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Culture set to invariant",
						"Negative input for Byte type",
						"Non-integral input",
						"Null element reference",
						"Precision specifier longer than digits",
						"Unsupported .NET version",
						"Value exceeds byte range",
						"Zero value"
					],
					"expected_result": "The Format-Number macro produces the hexadecimal string for 255, and the SendKeys plugin types that string into #inputField.",
					"notes": "Demonstrates a macro that generates a hexadecimal value consumed by an action; the macro itself has no UI side-effects.",
					"use_case": "format_byte_hex_sendkeys",
					"version": "1.0.0"
				},
				"labels": [
					"ByteFormatting",
					"CssSelector",
					"FormatNumber",
					"Macro",
					"SendKeys",
					"UiAutomation"
				]
			},
			"description": [
				"### Format an unsigned byte with the hexadecimal (`X`) specifier",
				"",
				"The `Format-Number` macro evaluates the value `255` as an unsigned byte (`Byte`) using the `X` format specifier, producing its two-digit hexadecimal representation (`FF`).",
				"That hex string replaces the macro token at runtime.",
				"The `SendKeys` plugin then types the generated string into the element identified by the CSS selector `#inputField`.",
				"Macros only generate values; they never perform UI actions and can be reused anywhere a literal value is accepted.",
				"The `X` specifier converts integral numbers to hexadecimal digits (0-9, A-F).",
				"Formatting respects the current `NumberFormatInfo` settings."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$Format-Number --Number:255 --Format:X --NumberType:Byte}}",
				"locator": "CssSelector",
				"onElement": "#inputField",
				"pluginName": "SendKeys"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Culture set to invariant",
						"Negative integer input",
						"Non-integral input",
						"Null element reference",
						"Precision specifier longer than digits",
						"Precision specifier shorter than digits",
						"Unsupported type",
						"Zero value"
					],
					"expected_result": "The Format-Number macro produces an eight-digit hexadecimal string for 132190, and the SendKeys plugin types that string into #inputField.",
					"notes": "Shows a macro that generates a padded hexadecimal value consumed by an action; the macro itself has no UI side-effects.",
					"use_case": "format_integer_hex8_sendkeys",
					"version": "1.0.0"
				},
				"labels": [
					"CssSelector",
					"FormatNumber",
					"HexadecimalFormatting",
					"Macro",
					"SendKeys",
					"UiAutomation"
				]
			},
			"description": [
				"### Format an integer with the `X8` hexadecimal specifier",
				"",
				"The `Format-Number` macro evaluates the value `132190` using the `X8` format specifier, producing an eight-digit hexadecimal string padded with leading zeros.",
				"That string replaces the macro token at runtime.",
				"The `SendKeys` plugin then types the generated string into the element identified by the CSS selector `#inputField`.",
				"Macros only generate values; they never perform UI actions and can be reused anywhere a literal value is accepted.",
				"The `X` specifier converts integral numbers to hexadecimal digits (0-9, A-F), and a precision specifier pads the result to the requested length according to the current `NumberFormatInfo` settings."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$Format-Number --Number:132190 --Format:X8}}",
				"locator": "CssSelector",
				"onElement": "#inputField",
				"pluginName": "SendKeys"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Culture fallback to invariant",
						"Large decimal value",
						"Negative decimal input",
						"Non-numeric input",
						"Null element reference",
						"Rounding differences for currency",
						"Unsupported culture tag",
						"Zero value"
					],
					"expected_result": "The Format-Number macro produces a French currency string for 123.456 and the SendKeys plugin types that string into #inputField.",
					"notes": "Demonstrates a macro that generates a culture-specific currency value consumed by an action; the macro itself has no UI side-effects.",
					"use_case": "format_decimal_currency_fr_sendkeys",
					"version": "1.0.0"
				},
				"labels": [
					"CssSelector",
					"CurrencyFormatting",
					"FormatNumber",
					"Macro",
					"SendKeys",
					"UiAutomation"
				]
			},
			"description": [
				"### Format a decimal with the currency (`C`) specifier and French culture",
				"",
				"The `Format-Number` macro evaluates the value `123.456` with the `C` format specifier and the `fr-FR` culture, producing a currency string such as `123,46 €`.",
				"That string replaces the macro token at runtime.",
				"The `SendKeys` plugin then types the generated string into the element identified by the CSS selector `#inputField`.",
				"Macros only generate values; they never perform UI actions and can be reused anywhere a literal value is accepted.",
				"The `C` specifier formats numbers according to the currency pattern of the chosen culture, including the proper symbol, decimal separator, and grouping."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$Format-Number --Number:123.456 --Format:C --Culture:fr-FR}}",
				"locator": "CssSelector",
				"onElement": "#inputField",
				"pluginName": "SendKeys"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Culture fallback to invariant",
						"Large decimal value",
						"Negative decimal input",
						"Non-numeric input",
						"Null element reference",
						"Rounding differences for currency",
						"Unsupported culture tag",
						"Zero value"
					],
					"expected_result": "The Format-Number macro produces a Japanese currency string with three decimal places for -123.456, and the SendKeys plugin types that string into #inputField.",
					"notes": "Demonstrates a macro that generates a culture-specific currency value consumed by an action; the macro itself has no UI side-effects. The `C3` precision specifier overrides the ja-JP default of zero currency-decimal digits and rounds the value to three decimals. The Japanese CurrencyNegativePattern places the minus sign before the yen symbol (\"-¥n\").",
					"use_case": "format_decimal_currency3_ja_sendkeys",
					"version": "1.0.2"
				},
				"labels": [
					"CssSelector",
					"CurrencyFormatting",
					"FormatNumber",
					"Macro",
					"SendKeys",
					"UiAutomation"
				]
			},
			"description": [
				"### Format a negative decimal with the currency (`C3`) specifier and Japanese culture",
				"",
				"The `Format-Number` macro evaluates the value `-123.456` with the `C3` format specifier and the `ja-JP` culture.",
				"The `C3` precision specifier **overrides** Japan's default of zero currency-decimal digits and rounds the value to three fractional places before formatting.",
				"The resulting string is `-¥123.456`, where the minus sign precedes the yen symbol as defined by the Japanese `CurrencyNegativePattern`.",
				"That string replaces the macro token at runtime.",
				"The `SendKeys` plugin then types the generated string into the element identified by the CSS selector `#inputField`.",
				"Macros only generate values; they never perform UI actions and can be reused anywhere a literal value is accepted.",
				"If the source number contains more than three fractional digits (for example, `-123.4567`), it is first rounded to three decimals (`-123.457`) before being formatted."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$Format-Number --Number:-123.456 --Format:C3 --Culture:ja-JP}}",
				"locator": "CssSelector",
				"onElement": "#inputField",
				"pluginName": "SendKeys"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Culture fallback to invariant",
						"Large decimal value",
						"Negative decimal input",
						"Non-numeric input",
						"Null element reference",
						"Precision specifier mismatch",
						"Rounding differences for exponential",
						"Unsupported culture tag",
						"Zero value"
					],
					"expected_result": "The Format-Number macro produces a scientific-notation string for 1052.0329112756 and the SendKeys plugin types that string into #inputField.",
					"notes": "Illustrates a macro that generates a culture-specific scientific (E) notation value consumed by an action; the macro itself has no UI side-effects.",
					"use_case": "format_decimal_scientific_sendkeys",
					"version": "1.0.0"
				},
				"labels": [
					"CssSelector",
					"FormatNumber",
					"Macro",
					"ScientificFormatting",
					"SendKeys",
					"UiAutomation"
				]
			},
			"description": [
				"### Format a decimal with the scientific (E) specifier and US culture",
				"",
				"The Format-Number macro evaluates the value 1052.0329112756 with the E format specifier and the en-US culture, producing a scientific-notation string such as 1.052033E+003.",
				"That string replaces the macro token at runtime.",
				"The SendKeys plugin then types the generated string into the element identified by the CSS selector #inputField.",
				"Macros only generate values; they never perform UI actions and can be reused anywhere a literal value is accepted.",
				"The E specifier expresses numbers in scientific notation (d.dddE±ddd), rounding to the appropriate number of significant digits when necessary, and follows the formatting rules of the specified culture."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$Format-Number --Number:1052.0329112756 --Format:E --Culture:en-US}}",
				"locator": "CssSelector",
				"onElement": "#inputField",
				"pluginName": "SendKeys"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Culture fallback to invariant",
						"Exponent padding inconsistency",
						"Lowercase exponential specifier",
						"Negative decimal input",
						"Non-numeric input",
						"Null element reference",
						"Rounding behavior for two decimals",
						"Unsupported culture tag",
						"Zero value"
					],
					"expected_result": "The Format-Number macro converts -1052.0329112756 into an exponential-format string like -1.05e+03 and the SendKeys plugin types it into #inputField.",
					"notes": "Demonstrates using the `e2` format with a negative number; output respects culture-specific formatting and decimal rounding.",
					"use_case": "format_negative_decimal_e2_sendkeys",
					"version": "1.0.0"
				},
				"labels": [
					"CssSelector",
					"FormatNumber",
					"Macro",
					"ScientificFormatting",
					"SendKeys",
					"UiAutomation"
				]
			},
			"description": [
				"### Format a negative decimal with the `e2` specifier and US culture",
				"",
				"The `Format-Number` macro formats the value `-1052.0329112756` using the `e2` format and the `en-US` culture.",
				"This produces a scientific-notation string such as `-1.05e+03`, with two decimal places and a two-digit exponent.",
				"The resulting string replaces the macro token at runtime.",
				"The `SendKeys` plugin types this string into the element identified by the CSS selector `#inputField`.",
				"Macros only generate values and can be reused in any context where literal values are allowed.",
				"The `e2` specifier formats numbers in exponential form (`d.dddde±dd`) with two digits after the decimal point and two digits in the exponent."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$Format-Number --Number:-1052.0329112756 --Format:e2 --Culture:en-US}}",
				"locator": "CssSelector",
				"onElement": "#inputField",
				"pluginName": "SendKeys"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Culture fallback to invariant",
						"Decimal truncation",
						"Fixed-point rounding errors",
						"Negative decimal input",
						"Non-numeric input",
						"Null element reference",
						"Thousand separator mismatch",
						"Unsupported culture tag",
						"Zero value"
					],
					"expected_result": "The Format-Number macro formats 1234.567 as a fixed-point string using German culture, and the SendKeys plugin types it into #inputField.",
					"notes": "Demonstrates formatting with the `F` specifier and the `de-DE` culture; the macro output includes localized decimal and thousand separators.",
					"use_case": "format_fixedpoint_de_sendkeys",
					"version": "1.0.0"
				},
				"labels": [
					"CssSelector",
					"CultureFormatting",
					"FormatNumber",
					"Macro",
					"SendKeys",
					"UiAutomation"
				]
			},
			"description": [
				"### Format a decimal with the `F` specifier and German culture",
				"",
				"The `Format-Number` macro formats the value `1234.567` using the `F` specifier and the `de-DE` culture.",
				"This produces a fixed-point string like `1.234,57`, using a comma as the decimal separator and a period as the thousands separator.",
				"The result string replaces the macro token at runtime.",
				"The `SendKeys` plugin types the generated string into the element identified by the CSS selector `#inputField`.",
				"Macros only generate values and can be reused anywhere literal values are accepted.",
				"The `F` format specifier formats numbers using fixed-point notation and rounds to two decimal places by default."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$Format-Number --Number:1234.567 --Format:F --Culture:de-DE}}",
				"locator": "CssSelector",
				"onElement": "#inputField",
				"pluginName": "SendKeys"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Culture fallback to invariant",
						"Decimal truncation",
						"Fixed-point rounding errors",
						"Negative decimal input",
						"Non-numeric input",
						"Null element reference",
						"Thousand separator mismatch",
						"Unsupported culture tag",
						"Zero value"
					],
					"expected_result": "The Format-Number macro formats -1234.56 as a fixed-point string with four decimal places using US culture, and the SendKeys plugin types it into #inputField.",
					"notes": "Demonstrates the `F4` specifier with a negative number; output shows localized thousand and decimal separators and pads to four decimal places.",
					"use_case": "format_fixedpoint_f4_en_sendkeys",
					"version": "1.0.0"
				},
				"labels": [
					"CssSelector",
					"CultureFormatting",
					"FormatNumber",
					"Macro",
					"SendKeys",
					"UiAutomation"
				]
			},
			"description": [
				"### Format a negative decimal with the `F4` specifier and US culture",
				"",
				"The `Format-Number` macro formats the value `-1234.56` using the `F4` specifier and the `en-US` culture.",
				"This produces a fixed-point string like `-1,234.5600`, with a comma as the thousands separator and four digits after the decimal point.",
				"The resulting string replaces the macro token at runtime.",
				"The `SendKeys` plugin types this string into the element identified by the CSS selector `#inputField`.",
				"Macros only generate values and can be reused anywhere literal values are accepted.",
				"The `F4` specifier formats numbers using fixed-point notation and pads to four decimal places."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$Format-Number --Number:-1234.56 --Format:F4 --Culture:en-US}}",
				"locator": "CssSelector",
				"onElement": "#inputField",
				"pluginName": "SendKeys"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Culture fallback to invariant",
						"Large decimal value",
						"Negative decimal input",
						"Non-numeric input",
						"Null element reference",
						"Precision specifier applied",
						"Rounding behavior",
						"Unsupported culture tag",
						"Zero value"
					],
					"expected_result": "The Format-Number macro converts -123.456 into a compact general-format string (e.g., -123.456) and the SendKeys plugin types it into #inputField.",
					"notes": "Demonstrates the `G` (general) format with its automatic choice of fixed-point or scientific notation.",
					"use_case": "format_general_negative_sendkeys",
					"version": "1.0.0"
				},
				"labels": [
					"CssSelector",
					"FormatNumber",
					"GeneralFormatting",
					"Macro",
					"SendKeys",
					"UiAutomation"
				]
			},
			"description": [
				"### Format a decimal with the `G` specifier",
				"",
				"The `Format-Number` macro formats the value `-123.456` using the `G` (general) specifier.",
				"This produces a compact string such as `-123.456`, automatically choosing fixed-point or scientific notation based on the value’s magnitude and precision.",
				"The resulting string replaces the macro token at runtime.",
				"The `SendKeys` plugin types this string into the element identified by the CSS selector `#inputField`.",
				"Macros only generate values and can be reused anywhere literal values are accepted.",
				"The `G` specifier returns either fixed-point or exponential notation, preserving up to 15–17 significant digits when no precision specifier is supplied."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$Format-Number --Number:-123.456 --Format:G}}",
				"locator": "CssSelector",
				"onElement": "#inputField",
				"pluginName": "SendKeys"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Culture fallback to invariant",
						"Large decimal value",
						"Negative decimal input",
						"Non-numeric input",
						"Null element reference",
						"Precision specifier mismatch",
						"Rounding behavior",
						"Unsupported culture tag",
						"Zero value"
					],
					"expected_result": "The Format-Number macro converts 123.4546 into `123,5` (general-format string) and the SendKeys plugin types it into #inputField.",
					"notes": "Shows the `G4` specifier with Swedish culture; output uses a comma decimal separator and four significant digits.",
					"use_case": "format_general_precision_sv_sendkeys",
					"version": "1.0.0"
				},
				"labels": [
					"CssSelector",
					"CultureFormatting",
					"FormatNumber",
					"GeneralFormatting",
					"Macro",
					"SendKeys",
					"UiAutomation"
				]
			},
			"description": [
				"### Format a decimal with the `G4` specifier and Swedish culture",
				"",
				"The `Format-Number` macro formats `123.4546` using the `G4` specifier and the `sv-SE` culture.",
				"This produces a compact string such as `123,5`, choosing fixed-point notation with four significant digits and a comma as the decimal separator.",
				"The resulting string replaces the macro token at runtime.",
				"The `SendKeys` plugin types this string into the element identified by the CSS selector `#inputField`.",
				"Macros only generate values and can be reused anywhere literal values are accepted.",
				"The `G` specifier returns either fixed-point or exponential notation depending on the number’s magnitude; the precision specifier (`4`) limits the output to four significant digits."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$Format-Number --Number:123.4546 --Format:G4 --Culture:sv-SE}}",
				"locator": "CssSelector",
				"onElement": "#inputField",
				"pluginName": "SendKeys"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Culture fallback to invariant",
						"Large decimal value",
						"Negative decimal input",
						"Non-numeric input",
						"Null element reference",
						"Rounding behavior",
						"Thousand separator mismatch",
						"Unsupported culture tag",
						"Zero value"
					],
					"expected_result": "The Format-Number macro converts 1234.567 into `1 234,57` and the SendKeys plugin types it into #inputField.",
					"notes": "Uses the `N` specifier with Russian culture; output applies a space as the thousands separator and a comma as the decimal separator.",
					"use_case": "format_numeric_ru_sendkeys",
					"version": "1.0.0"
				},
				"labels": [
					"CssSelector",
					"CultureFormatting",
					"FormatNumber",
					"Macro",
					"SendKeys",
					"UiAutomation"
				]
			},
			"description": [
				"### Format a decimal with the `N` specifier and Russian culture",
				"",
				"The `Format-Number` macro formats the value `1234.567` using the `N` specifier and the `ru-RU` culture.",
				"This produces a localized string such as `1 234,57`, with a space as the thousands separator and a comma as the decimal separator.",
				"The resulting string replaces the macro token at runtime.",
				"The `SendKeys` plugin types this string into the element identified by the CSS selector `#inputField`.",
				"Macros only generate values and can be reused anywhere literal values are accepted.",
				"The `N` specifier formats numbers with thousands separators and two decimal places by default, following the rules of the specified culture."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$Format-Number --Number:1234.567 --Format:N --Culture:ru-RU}}",
				"locator": "CssSelector",
				"onElement": "#inputField",
				"pluginName": "SendKeys"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Culture fallback to invariant",
						"Large decimal value",
						"Negative decimal input",
						"Non-numeric input",
						"Null element reference",
						"Precision specifier mismatch",
						"Rounding behavior",
						"Thousand separator mismatch",
						"Unsupported culture tag",
						"Zero value"
					],
					"expected_result": "The Format-Number macro converts -1234.56 into `-1,234.560` and the SendKeys plugin types it into #inputField.",
					"notes": "Uses the `N3` specifier with US culture; output shows a comma thousands separator, a period decimal separator, three decimal digits, and a leading minus sign.",
					"use_case": "format_negative_numeric_n3_en_sendkeys",
					"version": "1.0.0"
				},
				"labels": [
					"CssSelector",
					"CultureFormatting",
					"FormatNumber",
					"Macro",
					"NumericFormatting",
					"SendKeys",
					"UiAutomation"
				]
			},
			"description": [
				"### Format a negative decimal with the `N3` specifier and US culture",
				"",
				"The `Format-Number` macro formats `-1234.56` using the `N3` specifier and the `en-US` culture.",
				"This produces a localized string such as `-1,234.560`, with a comma as the thousands separator, a period as the decimal separator, and three digits after the decimal point.",
				"The resulting string replaces the macro token at runtime.",
				"The `SendKeys` plugin types this string into the element identified by the CSS selector `#inputField`.",
				"Macros only generate values and can be reused anywhere literal values are accepted.",
				"The `N3` specifier formats numbers with thousands separators and exactly three decimal digits, following the rules of the specified culture."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$Format-Number --Number:-1234.56 --Format:N3 --Culture:en-US}}",
				"locator": "CssSelector",
				"onElement": "#inputField",
				"pluginName": "SendKeys"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Culture fallback to invariant",
						"Large decimal value",
						"Negative decimal input",
						"Non-numeric input",
						"Null element reference",
						"Percent scaling errors",
						"Rounding behavior",
						"Unsupported culture tag",
						"Zero value"
					],
					"expected_result": "The Format-Number macro converts 1 into `100,00 %` and the SendKeys plugin types it into #inputField.",
					"notes": "Demonstrates the `P` specifier with French culture; the value is multiplied by 100 and formatted with a comma decimal separator, a non-breaking space, and a trailing percent sign.",
					"use_case": "format_percentage_fr_sendkeys",
					"version": "1.0.0"
				},
				"labels": [
					"CssSelector",
					"CultureFormatting",
					"FormatNumber",
					"Macro",
					"PercentageFormatting",
					"SendKeys",
					"UiAutomation"
				]
			},
			"description": [
				"### Format the number 1 as a percentage with French culture",
				"",
				"The `Format-Number` macro formats the value `1` using the `P` (percentage) specifier and the `fr-FR` culture.",
				"This produces a string such as `100,00 %`, where the number is scaled by 100, rounded to two decimal places, uses a comma as the decimal separator, and inserts a non-breaking space before the percent sign.",
				"The resulting string replaces the macro token at runtime.",
				"The `SendKeys` plugin types this string into the element identified by the CSS selector `#inputField`.",
				"Macros only generate values and can be reused anywhere literal values are accepted.",
				"The `P` specifier multiplies the input by 100 and formats it as a localized percentage string according to the specified culture."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$Format-Number --Number:1 --Format:P --Culture:fr-FR}}",
				"locator": "CssSelector",
				"onElement": "#inputField",
				"pluginName": "SendKeys"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Culture fallback to invariant",
						"Large decimal value",
						"Negative decimal input",
						"Non-numeric input",
						"Null element reference",
						"Percent scaling errors",
						"Rounding behavior",
						"Unsupported culture tag",
						"Zero value"
					],
					"expected_result": "The Format-Number macro converts -0.39678 into `-39.7 %` and the SendKeys plugin types it into #inputField.",
					"notes": "Uses the `P1` specifier with US culture; the value is multiplied by 100, rounded to one decimal digit, uses a comma thousands separator (none needed here), a period decimal separator, a trailing space, and a percent sign.",
					"use_case": "format_negative_percentage_p1_en_sendkeys",
					"version": "1.0.0"
				},
				"labels": [
					"CssSelector",
					"CultureFormatting",
					"FormatNumber",
					"Macro",
					"PercentageFormatting",
					"SendKeys",
					"UiAutomation"
				]
			},
			"description": [
				"### Format a negative decimal with the `P1` specifier and US culture",
				"",
				"The `Format-Number` macro formats `-0.39678` using the `P1` (percentage, one decimal) specifier and the `en-US` culture.",
				"This produces a string such as `-39.7 %`, where the number is scaled by 100, rounded to one decimal place, and formatted with a space before the percent sign.",
				"The resulting string replaces the macro token at runtime.",
				"The `SendKeys` plugin types this string into the element identified by the CSS selector `#inputField`.",
				"Macros only generate values and can be reused anywhere literal values are accepted.",
				"The `P1` specifier multiplies the input by 100 and formats it as a localized percentage string with exactly one decimal digit."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$Format-Number --Number:-0.39678 --Format:P1 --Culture:en-US}}",
				"locator": "CssSelector",
				"onElement": "#inputField",
				"pluginName": "SendKeys"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Culture fallback to invariant",
						"Large decimal value",
						"Leading zero padding mismatch",
						"Negative decimal input",
						"Non-numeric input",
						"Null element reference",
						"Rounding behavior",
						"Unsupported culture tag",
						"Zero value"
					],
					"expected_result": "The Format-Number macro converts 0.45678 into `00.4568` and the SendKeys plugin types it into #inputField.",
					"notes": "Demonstrates a custom format string (`00.0000`) that pads with leading zeros and forces exactly four digits after the decimal point using US culture.",
					"use_case": "format_custom_leading_zero_sendkeys",
					"version": "1.0.0"
				},
				"labels": [
					"CssSelector",
					"CultureFormatting",
					"CustomNumberFormat",
					"FormatNumber",
					"Macro",
					"SendKeys",
					"UiAutomation"
				]
			},
			"description": [
				"### Format a decimal with a custom `00.0000` specifier and US culture",
				"",
				"The `Format-Number` macro formats `0.45678` with the custom format string `00.0000` and the `en-US` culture.",
				"This produces `00.4568`, padding the integer part with leading zeros and rounding the fractional part to four digits.",
				"The resulting string replaces the macro token at runtime.",
				"The `SendKeys` plugin types this string into the element identified by the CSS selector `#inputField`.",
				"Macros only generate values and can be reused anywhere literal values are accepted.",
				"In the format pattern `00.0000`, each `0` is a zero-placeholder symbol:",
				"- Digits appear where present; zeros are inserted where digits are absent.",
				"- Two zeros before the decimal ensure at least two integer digits, padded with leading zeros.",
				"- Four zeros after the decimal guarantee exactly four fractional digits, rounding as needed."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$Format-Number --Number:0.45678 --Format:00.0000 --Culture:en-US}}",
				"locator": "CssSelector",
				"onElement": "#inputField",
				"pluginName": "SendKeys"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Culture fallback to invariant",
						"Digit count mismatch",
						"Leading zero phone numbers",
						"Negative numeric input",
						"Non-numeric input",
						"Null element reference",
						"Unsupported culture tag",
						"Zero value"
					],
					"expected_result": "The Format-Number macro converts 1234567890 into `(123) 456-7890` and the SendKeys plugin types it into #inputField.",
					"notes": "Uses a custom pattern `(###) ###-####` to insert literal punctuation and map digits to placeholders; the macro has no UI side-effects.",
					"use_case": "format_phone_number_sendkeys",
					"version": "1.0.0"
				},
				"labels": [
					"CssSelector",
					"CustomNumberFormat",
					"FormatNumber",
					"Macro",
					"PhoneNumberFormatting",
					"SendKeys",
					"UiAutomation"
				]
			},
			"description": [
				"### Format a phone number with the `(###) ###-####` pattern",
				"",
				"The `Format-Number` macro formats the value `1234567890` using the custom format string `(###) ###-####`.",
				"This produces a string such as `(123) 456-7890`, where each `#` copies one digit from the source number and the literal characters `(`, `)`, space, and `-` appear unchanged.",
				"The resulting string replaces the macro token at runtime.",
				"The `SendKeys` plugin types this string into the element identified by the CSS selector `#inputField`.",
				"Macros only generate values and can be reused anywhere literal values are accepted.",
				"In the pattern `(###) ###-####`, digit-placeholder symbols (`#`) map the first ten digits of the input to their respective positions, while any extra digits are dropped."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$Format-Number --Number:1234567890 --Format:(###) ###-####}}",
				"locator": "CssSelector",
				"onElement": "#inputField",
				"pluginName": "SendKeys"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Culture with non-standard decimal separator",
						"Input number with more than two decimals",
						"Large magnitude numbers",
						"Negative numbers",
						"Very small decimal number",
						"Zero as input"
					],
					"expected_result": "The formatted string '0,46' is sent as keystrokes to the element with the specified CSS selector.",
					"notes": "Uses the Format-Number macro to apply fr-FR culture and a two-decimal precision format before sending the result using the SendKeys plugin. Ensures the macro remains purely value-generating.",
					"use_case": "format_number_with_decimal_precision_and_french_culture",
					"version": "1.0.0"
				},
				"labels": [
					"Formatting",
					"Localization",
					"SendKeys"
				]
			},
			"description": [
				"### Format and send a number localized for French (France)",
				"",
				"Convert the number `0.45678` to a string with two decimal places using the French (France) culture, then send it via keystrokes to the specified element.",
				"The `Format-Number` macro uses the format string `0.00` and culture `fr-FR` to produce `0,46`; .NET always requires `.` in the format pattern, which it replaces with the culture-specific decimal separator (`,` for fr-FR).",
				"If the original number were `-0.45678`, the output would be `-0,46`, showing that negative values are handled correctly.",
				"The macro remains side-effect-free, purely outputting the formatted string.",
				"The automation then passes that value to the `SendKeys` plugin, which sends the keystrokes to the element identified by the `CssSelector` locator."
			],
			"rule": {
				"argument": "{{$Format-Number --Number:0.45678 --Format:0.00 --Culture:fr-FR}}",
				"locator": "CssSelector",
				"onElement": "#inputField",
				"pluginName": "SendKeys",
				"$type": "Action"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Culture with non-standard decimal separator",
						"Input number with more than three group levels",
						"Large magnitude numbers",
						"Negative numbers",
						"Very small decimal number",
						"Zero as input"
					],
					"expected_result": "The formatted string '2.147.483.647' is sent as keystrokes to the element with the specified CSS selector.",
					"notes": "Uses the Format-Number macro to apply es-ES culture and the #,# pattern to insert thousands separators before sending the result with the SendKeys plugin. The macro itself is side-effect-free.",
					"use_case": "format_number_with_group_separators_spanish_culture",
					"version": "1.0.0"
				},
				"labels": [
					"Formatting",
					"Localization",
					"SendKeys"
				]
			},
			"description": [
				"### Format and send a grouped number localized for Spanish (Spain)",
				"",
				"Convert the number `2147483647` to a string that inserts thousands separators using the Spanish (Spain) culture, then send it via keystrokes to the specified element.",
				"The `Format-Number` macro applies the pattern `#,#` with culture `es-ES`, so .NET inserts periods (`.`) as group separators, producing `2.147.483.647`.",
				"Using `#,#` avoids the ×1 000 scaling that an extra comma (for example `#,#,,`) would trigger, as documented in the custom numeric format string rules.",
				"The macro remains side-effect-free, only outputting the formatted string.",
				"Automation then passes this string to the `SendKeys` plugin, which types it into the element identified by the `CssSelector` locator."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$Format-Number --Number:2147483647 --Format:#,# --Culture:es-ES}}",
				"locator": "CssSelector",
				"onElement": "#inputField",
				"pluginName": "SendKeys"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Culture with non-standard percent symbol",
						"Input number greater than one (e.g., 1.25 → 125.00%)",
						"Large magnitude numbers (e.g., 123456 → 12 345 600.00%)",
						"Negative numbers",
						"Very small decimal number",
						"Zero as input"
					],
					"expected_result": "The formatted string '36.97%' is sent as keystrokes to the element with the specified CSS selector.",
					"notes": "Uses the Format-Number macro to apply en-US culture and the #0.00% pattern to multiply by 100 and append the percent symbol before sending the result with the SendKeys plugin. The macro itself is side-effect-free.",
					"use_case": "format_decimal_as_percentage_en_us",
					"version": "1.0.0"
				},
				"labels": [
					"Formatting",
					"Localization",
					"SendKeys"
				]
			},
			"description": [
				"### Format and send a percentage localized for English (United States)",
				"",
				"Convert the number `0.3697` to a percentage string with two decimal places using the English (United States) culture, then send it via keystrokes to the specified element.",
				"The `Format-Number` macro applies the pattern `#0.00%` with culture `en-US`, multiplying the value by 100 and adding a percent symbol, producing `36.97%`.",
				"The macro remains side-effect-free, only outputting the formatted string.",
				"Automation then passes this string to the `SendKeys` plugin, which types it into the element identified by the `CssSelector` locator."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$Format-Number --Number:0.3697 --Format:#0.00% --Culture:en-US}}",
				"locator": "CssSelector",
				"onElement": "#inputField",
				"pluginName": "SendKeys"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Culture with non-standard per mille symbol",
						"Input number greater than one (e.g., 1.25 → 1 250,00‰)",
						"Large magnitude numbers (e.g., 123456 → 123 456 000,00‰)",
						"Negative numbers",
						"Very small decimal number",
						"Zero as input"
					],
					"expected_result": "The formatted string '36,97‰' is sent as keystrokes to the element with the specified CSS selector.",
					"notes": "Uses the Format-Number macro to apply ru-RU culture and the #0.00‰ pattern to multiply by 1000 and append the per-mille symbol before sending the result with the SendKeys plugin. The macro itself is side-effect-free.",
					"use_case": "format_decimal_as_per_mille_ru_ru",
					"version": "1.0.0"
				},
				"labels": [
					"Formatting",
					"Localization",
					"SendKeys"
				]
			},
			"description": [
				"### Format and send a per-mille value localized for Russian (Russia)",
				"",
				"Convert the number `0.03697` to a per-mille string with two decimal places using the Russian (Russia) culture, then send it via keystrokes to the specified element.",
				"The `Format-Number` macro applies the pattern `#0.00‰` with culture `ru-RU`, multiplying the value by 1000 and adding the per-mille symbol, producing `36,97‰`.",
				"The format string still uses a period (`.`); .NET automatically replaces it with the culture-specific decimal separator (a comma for Russian).",
				"The per-mille sign (`‰`) is supplied by the culture’s `NumberFormatInfo.PerMilleSymbol` setting.",
				"The macro remains side-effect-free, only outputting the formatted string.",
				"Automation then passes this string to the `SendKeys` plugin, which types it into the element identified by the `CssSelector` locator."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$Format-Number --Number:0.03697 --Format:#0.00‰ --Culture:ru-RU}}",
				"locator": "CssSelector",
				"onElement": "#inputField",
				"pluginName": "SendKeys"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Culture with alternative exponent symbol",
						"Input number less than one (e.g., 0.00042 → 4.2e-04)",
						"Large magnitude numbers (e.g., 9.46e+15)",
						"Negative exponent values",
						"Negative numbers",
						"Very small decimal number",
						"Zero as input"
					],
					"expected_result": "The formatted string '1.5e+03' is sent as keystrokes to the element with the specified CSS selector.",
					"notes": "Uses the Format-Number macro with pattern 0.0e+00 to force one decimal place and pad the exponent to two digits while always showing a plus sign for positive values. The macro is purely value-generating.",
					"use_case": "format_number_scientific_notation_with_two_digit_exponent",
					"version": "1.0.0"
				},
				"labels": [
					"Formatting",
					"Localization",
					"ScientificNotation",
					"SendKeys"
				]
			},
			"description": [
				"### Format and send a scientific-notation value",
				"",
				"Convert the number `1503.92311` to scientific notation with exactly one decimal place, a plus sign, and at least two digits in the exponent, then send it via keystrokes to the specified element.",
				"The `Format-Number` macro applies the pattern `0.0e+00`, where `0.0` forces a single decimal digit, and `e+00` pads the exponent to two digits while always displaying a `+` for positive exponents.",
				"When formatted, the value becomes `1.5e+03`, since 1503.92311 equals 1.5 × 10³ after rounding.",
				"The macro remains side-effect-free, only outputting the formatted string.",
				"Automation then passes this string to the `SendKeys` plugin, which types it into the element identified by the `CssSelector` locator."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$Format-Number --Number:1503.92311 --Format:0.0e+00}}",
				"locator": "CssSelector",
				"onElement": "#inputField",
				"pluginName": "SendKeys"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Culture with alternative literal-symbol rules",
						"Input number shorter than pattern",
						"Large magnitude numbers",
						"Negative numbers",
						"Very small decimal number",
						"Zero as input"
					],
					"expected_result": "The formatted string '#987654#' is sent as keystrokes to the element with the specified CSS selector.",
					"notes": "Uses the Format-Number macro with a custom pattern that escapes literal characters (\\#) to wrap the value in hash symbols. No --Culture flag is supplied; therefore, any locale setting affects parsing only—this pattern contains no group or decimal placeholders, so the output is culture-agnostic. The macro is purely value-generating.",
					"use_case": "format_number_with_literal_characters_escape_char",
					"version": "1.0.0"
				},
				"labels": [
					"Formatting",
					"LiteralCharacters",
					"Localization",
					"SendKeys"
				]
			},
			"description": [
				"### Format and send a number with literal characters",
				"",
				"Convert the number `987654` to a string that embeds literal hash symbols using the escape character (`\\`) in the custom format string, then send it via keystrokes to the specified element.",
				"The `Format-Number` macro applies the pattern `\\###00\\#` in JSON. Because JSON doubles backslashes, .NET receives the runtime format string `\\###00\\#`; each \\# escapes the hash so it appears literally in the output. The `###00` portion allows up to three optional digits followed by two required digits, padding with zeros if necessary (for example, `12` formats as `#0012#`).",
				"The pattern contains no group or decimal placeholders, so the output remains the same across cultures; only numeric parsing would respect the current thread culture.",
				"The macro remains side-effect-free, outputting only the formatted string.",
				"Automation then passes this string to the `SendKeys` plugin, which types it into the element identified by the `CssSelector` locator."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$Format-Number --Number:987654 --Format:\\###00\\#}}",
				"locator": "CssSelector",
				"onElement": "#inputField",
				"pluginName": "SendKeys"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Culture with alternative group separator",
						"Large magnitude numbers",
						"Negative numbers",
						"Positive numbers",
						"Zero as input"
					],
					"expected_result": "The formatted string '**Zero**' is sent as keystrokes to the element with the specified CSS selector.",
					"notes": "Uses the Format-Number macro with a three-section format string separated by semicolons: positive; negative; zero. The third section formats the value 0 as the literal **Zero**. The macro is purely value-generating.",
					"use_case": "conditional_number_formatting_with_zero_literal",
					"version": "1.0.0"
				},
				"labels": [
					"ConditionalFormatting",
					"Formatting",
					"LiteralCharacters",
					"Localization",
					"SendKeys"
				]
			},
			"description": [
				"### Format and send a number with conditional formatting",
				"",
				"Convert the number `0` to a string using a three-section custom format (`##;(##);**Zero**`), then send it via keystrokes to the specified element.",
				"The format string sections are separated by semicolons: the first (`##`) applies to positive numbers, the second (`(##)`) to negatives, and the third (`**Zero**`) to zero values. For an input of `0`, the macro outputs the literal string `**Zero**`.",
				"The macro remains side-effect-free, outputting only the formatted string.",
				"Automation passes this string to the `SendKeys` plugin, which types it into the element identified by the `CssSelector` locator."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$Format-Number --Number:0 --Format:##;(##);**Zero**}}",
				"locator": "CssSelector",
				"onElement": "#inputField",
				"pluginName": "SendKeys"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Culture with alternative decimal separator",
						"Input number requiring thousands separator (e.g., 1234.5 → 1,234.5K)",
						"Large magnitude numbers",
						"Negative numbers",
						"Very small decimal number",
						"Zero as input"
					],
					"expected_result": "The formatted string '123.8K' is sent as keystrokes to the element with the specified CSS selector.",
					"notes": "Uses the Format-Number macro with a custom format string `#,##0.0K`, where `K` is a literal character. No --Culture flag is supplied; any locale setting affects group or decimal separators, but the literal `K` remains unchanged. The macro is purely value-generating.",
					"use_case": "format_number_with_k_literal_suffix",
					"version": "1.0.0"
				},
				"labels": [
					"Formatting",
					"LiteralCharacters",
					"Localization",
					"SendKeys"
				]
			},
			"description": [
				"### Format and send a number with a literal suffix",
				"",
				"Convert the number `123.8` to a string using the custom format `#,##0.0K`, then send it via keystrokes to the specified element.",
				"The format string components are: `#,##0` (forces at least one digit, adds group separators), `.0` (one decimal place), and `K` (a literal character that is emitted unchanged). For the input `123.8`, the macro outputs `123.8K`.",
				"Literal characters cannot be `0`, `#`, `%`, `‰`, `'`, `\\`, `.`, `,`, or `E/e` unless escaped, so `K` may be used without escaping.",
				"The macro remains side-effect-free, outputting only the formatted string.",
				"Automation passes this string to the `SendKeys` plugin, which types it into the element identified by the `CssSelector` locator."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$Format-Number --Number:123.8 --Format:#,##0.0K}}",
				"locator": "CssSelector",
				"onElement": "#inputField",
				"pluginName": "SendKeys"
			}
		}
	],
	"key": "Format-Number",
	"manifestVersion": 4,
	"parameters": [
		{
			"description": [
				"Culture determines how numbers are formatted according to regional settings.",
				"Different culture codes change decimal and group separators to match local conventions.",
				"Using the correct culture code helps ensure numbers appear correctly for users in various regions.",
				"If no culture is specified, the system uses the invariant culture to provide a consistent format."
			],
			"links": [
				{
					"link": "https://azuliadesigns.com/c-sharp-tutorials/list-net-culture-country-codes/",
					"title": "List of .NET Culture Country Codes"
				}
			],
			"mandatory": false,
			"name": "Culture",
			"type": "String"
		},
		{
			"description": [
				"Number specifies the numeric value to be formatted into a displayable string.",
				"Formatting the number ensures it appears correctly for end users.",
				"Valid numeric input prevents errors during the formatting process."
			],
			"mandatory": true,
			"name": "Number",
			"type": "String"
		},
		{
			"default": "None",
			"description": [
				"Format defines how numeric values are represented as text.",
				"Using a format string lets you control decimal places, grouping separators, and overall layout.",
				"Applying the correct format string ensures numbers appear in the expected style for users.",
				"If no format string is provided, the original numeric value is returned without alteration."
			],
			"links": [
				{
					"title": "Standard Numeric Format Strings",
					"link": "https://learn.microsoft.com/en-us/dotnet/standard/base-types/standard-numeric-format-strings"
				},
				{
					"title": "Custom Numeric Format Strings",
					"link": "https://learn.microsoft.com/en-us/dotnet/standard/base-types/custom-numeric-format-strings"
				}
			],
			"mandatory": false,
			"name": "Format",
			"type": "String"
		},
		{
			"default": "Integer",
			"description": [
				"NumberType determines the numeric data type used for processing and storage.",
				"Selecting the appropriate type ensures values have the correct range and precision.",
				"Preventing errors during conversion improves reliability when handling numeric inputs.",
				"Leaving it unset uses Integer by default to handle whole numbers safely."
			],
			"mandatory": false,
			"name": "NumberType",
			"type": "String",
			"values": [
				{
					"description": [
						"Byte represents an 8-bit unsigned integer that holds values from 0 to 255.",
						"Using Byte reduces memory usage when only small positive whole numbers are needed."
					],
					"name": "Byte"
				},
				{
					"description": [
						"Double provides a 64-bit floating point number with high precision for decimal values.",
						"It supports large and fractional numbers for calculations requiring detail."
					],
					"name": "Double"
				},
				{
					"description": [
						"Integer stores a 32-bit signed whole number between -2,147,483,648 and 2,147,483,647.",
						"It suits counting, indexing, and scenarios where decimal precision is not required."
					],
					"name": "Integer"
				},
				{
					"description": [
						"Long uses 64 bits to represent signed whole numbers in a very large range.",
						"It prevents overflow when Integer cannot hold large values."
					],
					"name": "Long"
				},
				{
					"description": [
						"SByte represents an 8-bit signed whole number with a range from -128 to 127.",
						"It saves memory when small integers including negatives are expected."
					],
					"name": "SByte"
				}
			]
		}
	],
	"platforms": [
		"Any"
	],
	"pluginType": "Macro",
	"protocol": {
		"apiDocumentation": "None",
		"w3c": "None"
	},
	"summary": [
		"The FormaNumber plugin formats numeric values into strings using specified culture settings and format patterns.",
		"It supports locale-based formatting and custom patterns to ensure numbers display correctly in different regions.",
		"This plugin makes automation workflows produce consistent, readable numbers in reports, logs, and interfaces.",
		"It reduces manual formatting work and minimizes errors in numeric representation across diverse locales."
	]
}
