{
	"aliases": [
		"getparam",
		"GetParameter"
	],
	"author": {
		"link": "https://www.linkedin.com/in/roei-sabag-247aa18/",
		"name": "Roei Sabag"
	},
	"categories": [
		"DataManagement"
	],
	"context": {
		"integration": {
			"github": {
				"document": "https://github.com/g4-api/g4-plugins/blob/main/docs/Macros/Get-Parameter.md",
				"source": "https://github.com/g4-api/g4-plugins/blob/main/src/G4.Plugins.Common/Macros/GetParameter.cs"
			}
		}
	},
	"description": [
		"### Purpose",
		"",
		"The GetParameter plugin fetches configuration and secret values from defined storage scopes at runtime.",
		"It instantly substitutes placeholders with live data so automation flows keep moving without manual edits.",
		"It can safely decode or decrypt values that were stored in base-64 or encrypted form by the RegisterParameter plugin.",
		"This keeps configuration handling secure, consistent, and environment-aware across robots, tests, and services.",
		"",
		"### Key Features and Functionality",
		"",
		"| Feature                     | Description                                                                             |",
		"|-----------------------------|-----------------------------------------------------------------------------------------|",
		"| Environment-Scope Retrieval | Pulls parameters from Application, User, Machine, Process, or Session scopes.           |",
		"| Environment Targeting       | Directs lookups to specific stores such as test, staging, or prod for clean separation. |",
		"| Dynamic Injection           | Replaces tokens in workflow inputs or outputs on the fly to keep data current.          |",
		"| Encoding Support            | Decodes or encodes base-64 strings to ensure safe transport and storage.                |",
		"| Encryption Support          | Decrypts values protected by RegisterParameter when given a valid EncryptionKey.        |",
		"",
		"### Usages in RPA",
		"",
		"| Use Case                        | Description                                                                          |",
		"|---------------------------------|--------------------------------------------------------------------------------------|",
		"| Task Orchestration              | Supplies critical runtime parameters so multi-step bots execute with the right data. |",
		"| Environment-Specific Automation | Adapts bots to different environments by pulling the matching configuration set.     |",
		"",
		"### Usages in Automation Testing",
		"",
		"| Use Case                        | Description                                                                            |",
		"|---------------------------------|----------------------------------------------------------------------------------------|",
		"| Data-Driven Testing             | Retrieves test data parameters to generate scenarios on demand.                        |",
		"| Configuration Management        | Injects current runtime settings so tests adjust automatically to changing conditions. |",
		"| Environment-Based Customization | Pulls environment-specific values to tailor test runs for accurate coverage.           |"
	],
	"examples": [
		{
			"description": [
				"Retrieve 'AppVersion' from SystemParameters in Application scope; use SendKeys to target #appVersionInput."
			],
			"rule": {
				"argument": "{{$Get-Parameter --Name:AppVersion --Scope:Application --Environment:SystemParameters}}",
				"locator": "CssSelector",
				"onElement": "#appVersionInput",
				"pluginName": "SendKeys"
			}
		},
		{
			"description": [
				"Retrieve 'AppVersion' from default SystemParameters in Application scope; use SendKeys to target #appVersionInput."
			],
			"rule": {
				"argument": "{{$Get-Parameter --Name:AppVersion --Scope:Application}}",
				"locator": "CssSelector",
				"onElement": "#appVersionInput",
				"pluginName": "SendKeys"
			}
		},
		{
			"description": [
				"Retrieve 'Email' from User scope; use SendKeys to target #emailInput."
			],
			"rule": {
				"argument": "{{$Get-Parameter --Name:Email --Scope:User}}",
				"locator": "CssSelector",
				"onElement": "#emailInput",
				"pluginName": "SendKeys"
			}
		},
		{
			"description": [
				"Retrieve 'MachineName' from Machine scope; use SendKeys to target #machineNameInput."
			],
			"rule": {
				"argument": "{{$Get-Parameter --Name:MachineName --Scope:Machine}}",
				"locator": "CssSelector",
				"onElement": "#machineNameInput",
				"pluginName": "SendKeys"
			}
		},
		{
			"description": [
				"Retrieve 'ProcessId' from Process scope; use SendKeys to target #processIdInput."
			],
			"rule": {
				"argument": "{{$Get-Parameter --Name:ProcessId --Scope:Process}}",
				"locator": "CssSelector",
				"onElement": "#processIdInput",
				"pluginName": "SendKeys"
			}
		},
		{
			"description": [
				"Retrieve 'SecretParam' from SystemParameters in Application scope using EncryptionKey for decryption; use SendKeys to target #secretInput."
			],
			"rule": {
				"argument": "{{$Get-Parameter --Name:SecretParam --Scope:Application --Environment:SystemParameters --EncryptionKey:myEncryptionKey}}",
				"locator": "CssSelector",
				"onElement": "#secretInput",
				"pluginName": "SendKeys"
			}
		}
	],
	"key": "Get-Parameter",
	"manifestVersion": 4,
	"parameters": [
		{
			"description": [
				"Identifies the parameter whose value you want to fetch.",
				"Accurate naming ensures the plugin locates the correct stored value."
			],
			"mandatory": true,
			"name": "Name",
			"type": "String"
		},
		{
			"default": "Session",
			"description": [
				"Indicates the storage scope to search for the parameter.",
				"Accepts 'Application', 'User', 'Machine', 'Process', or 'Session'.",
				"Omit this property to fall back to the 'Session' scope."
			],
			"mandatory": false,
			"name": "Scope",
			"type": "GetParameter"
		},
		{
			"description": [
				"Designates the environment collection that holds the parameter.",
				"Defaults to 'SystemParameters' when the property is not supplied."
			],
			"mandatory": false,
			"name": "Environment",
			"type": "String"
		},
		{
			"description": [
				"Provides the symmetric key used to decrypt secure parameter values.",
				"Include this key only when the value was encrypted by the RegisterParameter plugin."
			],
			"mandatory": false,
			"name": "EncryptionKey",
			"type": "String"
		}
	],
	"platforms": [
		"Any"
	],
	"pluginType": "Macro",
	"protocol": {
		"apiDocumentation": "None",
		"w3c": "None"
	},
	"summary": [
		"The GetParameter plugin fetches a named parameter from application, user, machine, process, or session scopes in any environment.",
		"It swaps placeholders with the live value during execution, letting automation steps adjust instantly to current settings.",
		"The plugin also decodes base64 and, with an EncryptionKey, decrypts secrets saved by RegisterParameter, keeping sensitive data secure yet usable."
	]
}
