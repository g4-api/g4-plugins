{
	"aliases": [
		"NewRandomNumber",
		"newrnd",
		"rndnum"
	],
	"author": {
		"link": "https://www.linkedin.com/in/roei-sabag-247aa18/",
		"name": "Roei Sabag"
	},
	"categories": [
		"Utilities"
	],
	"description": [
		"### Purpose",
		"",
		"The primary purpose of the New-RandomNumber macro plugin is to generate a random numbers within automation workflows.",
		"It lets you set minimum and maximum values and pick from different numeric types like Byte, Integer, Long, Float, or Double.",
		"This helps create dynamic test data and drive decisions in RPA and automation testing.",
		"Building random number support directly into workflows removes the need for extra scripts and speeds up automation tasks.",
		"",
		"### Key Features and Functionality",
		"",
		"| Feature                  | Description                                                    |",
		"|--------------------------|----------------------------------------------------------------|",
		"| Random Number Generation | Generates random numbers within a user-defined range.          |",
		"| Range Configuration      | Allows specifying MinValue and MaxValue to control limits.     |",
		"| Number Type Selection    | Supports different types: Byte, Integer, Long, Float, Double.  |",
		"| Workflow Integration     | Works directly in automation workflows without external tools. |",
		"",
		"### Usages in RPA",
		"",
		"| Use Case          | Description                                                       |",
		"|-------------------|-------------------------------------------------------------------|",
		"| Data Generation   | Populate RPA tasks with random numbers for data-driven processes. |",
		"| Conditional Logic | Provide dynamic values for decision-making steps in workflows.    |",
		"",
		"### Usages in Automation Testing",
		"",
		"| Use Case            | Description                                                         |",
		"|---------------------|---------------------------------------------------------------------|",
		"| Data-Driven Testing | Use random values as inputs to test software with varied datasets.  |",
		"| Boundary Testing    | Generate edge-case values to test system limits and error handling. |"
	],
	"examples": [
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"CSS selector not matching any element",
						"Element not found",
						"Empty macro output",
						"KeyboardInput plugin failure",
						"Macro evaluation failure",
						"Timeout locating element"
					],
					"expected_result": "The example generates a random integer at runtime using the NewRandomNumber macro plugin and inputs it into the element identified by '#inputField' using the SendKeys plugin.",
					"notes": "The `argument` field uses the `New-RandomNumber` macro call. The macro is evaluated at runtime and its output is passed to the SendKeys plugin as keystrokes.",
					"use_case": "generate_and_send_random_number",
					"version": "1.0.0"
				},
				"labels": [
					"AutomationIntegration",
					"KeyboardInput",
					"Macro",
					"RandomNumber"
				]
			},
			"description": [
				"### Generate and Send Random Number",
				"",
				"Use the `NewRandomNumber` macro plugin to generate a new random integer at runtime and pass it to the `SendKeys` plugin.  ",
				"Use the `SendKeys` plugin to input the generated integer into the element identified by the CSS selector `#inputField`.  "
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$New-RandomNumber}}",
				"locator": "CssSelector",
				"onElement": "#inputField",
				"pluginName": "SendKeys"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Empty macro output",
						"Invalid parameter name",
						"Invalid scope value",
						"Macro evaluation failure",
						"Parameter registration failure",
						"Session not available"
					],
					"expected_result": "Generate a new random integer using the NewRandomNumber macro plugin and register it as a session-scoped parameter named 'RandomNumber' via the RegisterParameter plugin.",
					"notes": "The `argument` field uses the New-RandomNumber macro call with flags for name, value, and session scope. The macro is evaluated at runtime and its output is consumed by the RegisterParameter plugin.",
					"use_case": "register_random_number_parameter_session_scope",
					"version": "1.0.0"
				},
				"labels": [
					"AutomationIntegration",
					"Macro",
					"ParameterRegistration",
					"RandomNumber",
					"SessionScope"
				]
			},
			"description": [
				"### Register Random Number Parameter with Session Scope",
				"",
				"Use the `NewRandomNumber` macro plugin to generate a new random integer at runtime and pass it to the `RegisterParameter` plugin.  ",
				"Use the `RegisterParameter` plugin to register a parameter named `RandomNumber` with session scope using the generated value.  "
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Name:RandomNumber --Value:{{$New-RandomNumber}} --Scope:Session}}",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"CSS selector not matching any element",
						"Element not found",
						"Empty macro output",
						"KeyboardInput plugin failure",
						"Macro evaluation failure",
						"Timeout locating element"
					],
					"expected_result": "Generate a random integer between 100 and int.Max at runtime using the NewRandomNumber macro plugin and input it into the element identified by '#inputField' using the SendKeys plugin.",
					"notes": "The `argument` field uses the `New-RandomNumber --MinValue:100` macro call. The `--MinValue:100` flag sets the minimum value; the maximum value defaults to `int.Max`. The macro output is passed to the SendKeys plugin as keystrokes.",
					"use_case": "generate_and_send_random_number_with_min_value",
					"version": "1.0.0"
				},
				"labels": [
					"AutomationIntegration",
					"KeyboardInput",
					"Macro",
					"RandomNumber"
				]
			},
			"description": [
				"### Generate and Send Random Number with Minimum Value",
				"",
				"Use the `NewRandomNumber` macro plugin with the `--MinValue:100` flag to generate a random integer between 100 and int.Max at runtime.  ",
				"Use the `SendKeys` plugin to input the generated integer into the element identified by the CSS selector `#inputField`.  "
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$New-RandomNumber --MinValue:100}}",
				"locator": "CssSelector",
				"onElement": "#inputField",
				"pluginName": "SendKeys"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Empty macro output",
						"Invalid parameter name",
						"Invalid scope value",
						"Macro evaluation failure",
						"Parameter registration failure",
						"Session not available"
					],
					"expected_result": "Generate a random integer between 100 and int.Max at runtime using the NewRandomNumber macro plugin and register it as a session-scoped parameter named 'RandomNumber' via the RegisterParameter plugin.",
					"notes": "The `argument` field uses the `New-RandomNumber --MinValue:100` macro call with flags for name, min value, and session scope. The macro is evaluated at runtime and its output is consumed by the RegisterParameter plugin.",
					"use_case": "register_random_number_parameter_with_min_value_session_scope",
					"version": "1.0.0"
				},
				"labels": [
					"AutomationIntegration",
					"Macro",
					"ParameterRegistration",
					"RandomNumber",
					"SessionScope"
				]
			},
			"description": [
				"### Register Random Number Parameter with Session Scope and Minimum Value",
				"",
				"Use the `NewRandomNumber` macro plugin with the `--MinValue:100` flag to generate a random integer between 100 and int.Max at runtime and pass it to the `RegisterParameter` plugin.  ",
				"Use the `RegisterParameter` plugin to register a parameter named `RandomNumber` with session scope using the generated value.  "
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Name:RandomNumber --Value:{{$New-RandomNumber --MinValue:100}} --Scope:Session}}",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"CSS selector not matching any element",
						"Element not found",
						"Empty macro output",
						"KeyboardInput plugin failure",
						"Macro evaluation failure",
						"Timeout locating element"
					],
					"expected_result": "Generate a random integer between int.Min and 1000 at runtime using the NewRandomNumber macro plugin and input it into the element identified by '#inputField' using the SendKeys plugin.",
					"notes": "The `argument` field uses the `New-RandomNumber --MaxValue:1000` macro call. The `--MaxValue:1000` flag sets the maximum value; the minimum value defaults to `int.Min`. The macro output is passed to the SendKeys plugin as keystrokes.",
					"use_case": "generate_and_send_random_number_with_max_value",
					"version": "1.0.0"
				},
				"labels": [
					"AutomationIntegration",
					"KeyboardInput",
					"Macro",
					"RandomNumber"
				]
			},
			"description": [
				"### Generate and Send Random Number with Maximum Value",
				"",
				"Use the `NewRandomNumber` macro plugin with the `--MaxValue:1000` flag to generate a random integer between int.Min and 1000 at runtime.  ",
				"Use the `SendKeys` plugin to input the generated integer into the element identified by the CSS selector `#inputField`.  "
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$New-RandomNumber --MaxValue:1000}}",
				"locator": "CssSelector",
				"onElement": "#inputField",
				"pluginName": "SendKeys"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Empty macro output",
						"Invalid parameter name",
						"Invalid scope value",
						"Macro evaluation failure",
						"Parameter registration failure",
						"Session not available"
					],
					"expected_result": "Generate a random integer between int.Min and 1000 at runtime using the NewRandomNumber macro plugin and register it as a session-scoped parameter named 'RandomNumber' via the RegisterParameter plugin.",
					"notes": "The `argument` field includes three flags: `--Name:RandomNumber` to specify the parameter name, `--Value:{{$New-RandomNumber --MaxValue:1000}}` where the `NewRandomNumber` macro plugin (evaluated with `--MaxValue:1000`) generates a runtime random integer between int.Min and 1000, and `--Scope:Session` to set session scope. The macro is evaluated at runtime, and its output is consumed by the RegisterParameter plugin to register the parameter.",
					"use_case": "register_random_number_parameter_with_max_value_session_scope",
					"version": "1.0.0"
				},
				"labels": [
					"AutomationIntegration",
					"Macro",
					"ParameterRegistration",
					"RandomNumber",
					"SessionScope"
				]
			},
			"description": [
				"### Register Random Number Parameter with Session Scope and Maximum Value",
				"",
				"Evaluate the `NewRandomNumber` macro plugin with the `--MaxValue:1000` flag to generate a random integer between int.Min and 1000 at runtime and pass it to the `RegisterParameter` plugin.  ",
				"Use the `RegisterParameter` plugin to register a parameter named `RandomNumber` with session scope using the generated value.  "
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Name:RandomNumber --Value:{{$New-RandomNumber --MaxValue:1000}} --Scope:Session}}",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"CSS selector not matching any element",
						"Element not found",
						"Empty macro output",
						"KeyboardInput plugin failure",
						"Macro evaluation failure",
						"Timeout locating element"
					],
					"expected_result": "Generate a random long integer at runtime using the NewRandomNumber macro plugin with the --NumberType:Long flag and input it into the element identified by '#inputField' using the SendKeys plugin.",
					"notes": "The `argument` field uses the `New-RandomNumber --NumberType:Long` macro call. The `--NumberType:Long` flag sets the random number type to a 64-bit long integer. When no `--MinValue` or `--MaxValue` flags are provided, the macro defaults to generating a long integer between `int.Min` and `int.Max`. The macro is evaluated at runtime, and its output is passed to the SendKeys plugin as keystrokes.",
					"use_case": "generate_and_send_random_long_integer",
					"version": "1.0.0"
				},
				"labels": [
					"AutomationIntegration",
					"KeyboardInput",
					"Macro",
					"RandomNumber"
				]
			},
			"description": [
				"### Generate and Send Random Long Integer",
				"",
				"Evaluate the `NewRandomNumber` macro plugin with the `--NumberType:Long` flag to generate a random long integer at runtime and pass it to the `SendKeys` plugin.  ",
				"Use the `SendKeys` plugin to input the generated long integer into the element identified by the CSS selector `#inputField`.  "
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$New-RandomNumber --NumberType:Long}}",
				"locator": "CssSelector",
				"onElement": "#inputField",
				"pluginName": "SendKeys"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Empty macro output",
						"Invalid parameter name",
						"Invalid scope value",
						"Macro evaluation failure",
						"Parameter registration failure",
						"Session not available"
					],
					"expected_result": "Generate a random long integer at runtime using the NewRandomNumber macro plugin with the --NumberType:Long flag and register it as a session-scoped parameter named 'RandomNumber' via the RegisterParameter plugin.",
					"notes": "The `argument` field includes three flags: `--Name:RandomNumber` to specify the parameter name, `--Value:{{$New-RandomNumber --NumberType:Long}}` where the `NewRandomNumber` macro plugin (evaluated with `--NumberType:Long`) generates a 64-bit long integer at runtime (defaulting to a value between `int.Min` and `int.Max` when no min or max flags are set), and `--Scope:Session` to set the session scope. The macro is evaluated at runtime, and its output is consumed by the RegisterParameter plugin to register the parameter.",
					"use_case": "register_random_long_integer_parameter_session_scope",
					"version": "1.0.0"
				},
				"labels": [
					"AutomationIntegration",
					"Macro",
					"ParameterRegistration",
					"RandomNumber",
					"SessionScope"
				]
			},
			"description": [
				"### Register Random Long Integer Parameter with Session Scope",
				"",
				"Evaluate the `NewRandomNumber` macro plugin with the `--NumberType:Long` flag to generate a random long integer at runtime and pass it to the `RegisterParameter` plugin.  ",
				"Use the `RegisterParameter` plugin to register a parameter named `RandomNumber` with session scope using the generated value.  "
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Name:RandomNumber --Value:{{$New-RandomNumber --NumberType:Long}} --Scope:Session}}",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Empty macro output",
						"Invalid parameter name",
						"Invalid scope value",
						"Macro evaluation failure",
						"Parameter registration failure",
						"Session not available"
					],
					"expected_result": "Generate a random long integer at runtime using the NewRandomNumber macro plugin with the --MinValue:100 and --NumberType:Long flags and register it as a session-scoped parameter named 'RandomNumber' via the RegisterParameter plugin.",
					"notes": "The `argument` field includes three flags: `--Name:RandomNumber` to specify the parameter name, `--Value:{{$New-RandomNumber --MinValue:100 --NumberType:Long}}` where the NewRandomNumber macro plugin (evaluated with `--MinValue:100` and `--NumberType:Long`) generates a 64-bit long integer at runtime between 100 and `int.Max`, and `--Scope:Session` to set the session scope. The macro is evaluated at runtime, and its output is consumed by the RegisterParameter plugin to register the parameter.",
					"use_case": "register_random_long_integer_parameter_with_min_value_session_scope",
					"version": "1.0.0"
				},
				"labels": [
					"AutomationIntegration",
					"Macro",
					"ParameterRegistration",
					"RandomNumber",
					"SessionScope"
				]
			},
			"description": [
				"### Register Random Long Integer Parameter with Session Scope and Minimum Value",
				"",
				"Evaluate the `NewRandomNumber` macro plugin with the `--MinValue:100` and `--NumberType:Long` flags to generate a random long integer at runtime and pass it to the `RegisterParameter` plugin.  ",
				"Use the `RegisterParameter` plugin to register a parameter named `RandomNumber` with session scope using the generated value.  "
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Name:RandomNumber --Value:{{$New-RandomNumber --MinValue:100 --NumberType:Long}} --Scope:Session}}",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"CSS selector not matching any element",
						"Element not found",
						"Empty macro output",
						"KeyboardInput plugin failure",
						"Macro evaluation failure",
						"Timeout locating element"
					],
					"expected_result": "Generate a random long integer at runtime using the NewRandomNumber macro plugin with the --MinValue:100 and --NumberType:Long flags and input it into the element identified by '#inputField' using the SendKeys plugin.",
					"notes": "The `argument` field uses the `New-RandomNumber --MinValue:100 --NumberType:Long` macro call. The `--MinValue:100` flag sets the minimum value, and the `--NumberType:Long` flag sets the number type to a 64-bit long integer. The macro is evaluated at runtime, and its output is passed to the SendKeys plugin as keystrokes.",
					"use_case": "generate_and_send_random_long_integer_with_min_value",
					"version": "1.0.0"
				},
				"labels": [
					"AutomationIntegration",
					"KeyboardInput",
					"Macro",
					"RandomNumber"
				]
			},
			"description": [
				"### Generate and Send Random Long Integer with Minimum Value",
				"",
				"Evaluate the `NewRandomNumber` macro plugin with the `--MinValue:100` and `--NumberType:Long` flags to generate a random long integer at runtime and pass it to the `SendKeys` plugin.  ",
				"Use the `SendKeys` plugin to input the generated long integer into the element identified by the CSS selector `#inputField`.  "
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$New-RandomNumber --MinValue:100 --NumberType:Long}}",
				"locator": "CssSelector",
				"onElement": "#inputField",
				"pluginName": "SendKeys"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Empty macro output",
						"Invalid parameter name",
						"Invalid scope value",
						"Macro evaluation failure",
						"Parameter registration failure",
						"Session not available"
					],
					"expected_result": "Generate a random long integer at runtime using the NewRandomNumber macro plugin with the --MaxValue:1000 and --NumberType:Long flags and register it as a session-scoped parameter named 'RandomNumber' via the RegisterParameter plugin.",
					"notes": "The `argument` field includes three flags: `--Name:RandomNumber` to specify the parameter name, `--Value:{{$New-RandomNumber --MaxValue:1000 --NumberType:Long}}` where the NewRandomNumber macro plugin (evaluated with `--MaxValue:1000` and `--NumberType:Long`) generates a 64-bit long integer at runtime between `int.Min` and 1000, and `--Scope:Session` to set session scope. The macro is evaluated at runtime, and its output is consumed by the RegisterParameter plugin to register the parameter.",
					"use_case": "register_random_long_integer_parameter_with_max_value_session_scope",
					"version": "1.0.0"
				},
				"labels": [
					"AutomationIntegration",
					"Macro",
					"ParameterRegistration",
					"RandomNumber",
					"SessionScope"
				]
			},
			"description": [
				"### Register Random Long Integer Parameter with Session Scope and Maximum Value",
				"",
				"Evaluate the `NewRandomNumber` macro plugin with the `--MaxValue:1000` and `--NumberType:Long` flags to generate a random long integer at runtime and pass it to the `RegisterParameter` plugin.  ",
				"Use the `RegisterParameter` plugin to register a parameter named `RandomNumber` with session scope using the generated value.  "
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Name:RandomNumber --Value:{{$New-RandomNumber --MaxValue:1000 --NumberType:Long}} --Scope:Session}}",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"CSS selector not matching any element",
						"Element not found",
						"Empty macro output",
						"KeyboardInput plugin failure",
						"Macro evaluation failure",
						"Timeout locating element"
					],
					"expected_result": "Generate a random long integer at runtime using the NewRandomNumber macro plugin with the --MaxValue:1000 and --NumberType:Long flags and input it into the element identified by '#inputField' using the SendKeys plugin.",
					"notes": "The `argument` field uses the `New-RandomNumber --MaxValue:1000 --NumberType:Long` macro call. The `--MaxValue:1000` flag sets the maximum value; the `--NumberType:Long` flag sets the number type to a 64-bit long integer. When no `--MinValue` flag is provided, the minimum value defaults to `int.Min`. The macro is evaluated at runtime, and its output is passed to the SendKeys plugin as keystrokes.",
					"use_case": "generate_and_send_random_long_integer_with_max_value",
					"version": "1.0.0"
				},
				"labels": [
					"AutomationIntegration",
					"KeyboardInput",
					"Macro",
					"RandomNumber"
				]
			},
			"description": [
				"### Generate and Send Random Long Integer with Maximum Value",
				"",
				"Evaluate the `NewRandomNumber` macro plugin with the `--MaxValue:1000` and `--NumberType:Long` flags to generate a random long integer at runtime and pass it to the `SendKeys` plugin.  ",
				"Use the `SendKeys` plugin to input the generated long integer into the element identified by the CSS selector `#inputField`.  "
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$New-RandomNumber --MaxValue:1000 --NumberType:Long}}",
				"locator": "CssSelector",
				"onElement": "#inputField",
				"pluginName": "SendKeys"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"CSS selector not matching any element",
						"Element not found",
						"Empty macro output",
						"KeyboardInput plugin failure",
						"Macro evaluation failure",
						"Timeout locating element"
					],
					"expected_result": "Generate a random long integer at runtime using the NewRandomNumber macro plugin with the --MinValue:-2147483649, --MaxValue:2147483648, and --NumberType:Long flags and input it into the element identified by '#inputField' using the SendKeys plugin.",
					"notes": "The `argument` field uses the `New-RandomNumber --MinValue:-2147483649 --MaxValue:2147483648 --NumberType:Long` macro call. The `--MinValue:-2147483649` flag sets the lower bound, the `--MaxValue:2147483648` flag sets the upper bound, and the `--NumberType:Long` flag sets the number type to a 64-bit long integer. The macro is evaluated at runtime, and its output is passed to the SendKeys plugin as keystrokes.",
					"use_case": "generate_and_send_random_long_integer_with_min_and_max_values",
					"version": "1.0.0"
				},
				"labels": [
					"AutomationIntegration",
					"KeyboardInput",
					"Macro",
					"RandomNumber"
				]
			},
			"description": [
				"### Generate and Send Random Long Integer with Specified Range",
				"",
				"Evaluate the `NewRandomNumber` macro plugin with the `--MinValue:-2147483649`, `--MaxValue:2147483648`, and `--NumberType:Long` flags to generate a random long integer at runtime and pass it to the `SendKeys` plugin.  ",
				"Use the `SendKeys` plugin to input the generated long integer into the element identified by the CSS selector `#inputField`.  "
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$New-RandomNumber --MinValue:-2147483649 --MaxValue:2147483648 --NumberType:Long}}",
				"locator": "CssSelector",
				"onElement": "#inputField",
				"pluginName": "SendKeys"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Empty macro output",
						"Invalid parameter name",
						"Invalid scope value",
						"Macro evaluation failure",
						"Parameter registration failure",
						"Session not available"
					],
					"expected_result": "Generate a random long integer at runtime using the NewRandomNumber macro plugin with the --MinValue:-2147483649, --MaxValue:2147483648, and --NumberType:Long flags and register it as a session-scoped parameter named 'RandomNumber' via the RegisterParameter plugin.",
					"notes": "The `argument` field includes three flags: `--Name:RandomNumber` to specify the parameter name, `--Value:{{$New-RandomNumber --MinValue:-2147483649 --MaxValue:2147483648 --NumberType:Long}}` where the `NewRandomNumber` macro plugin (evaluated with `--MinValue:-2147483649`, `--MaxValue:2147483648`, and `--NumberType:Long`) generates a 64-bit long integer at runtime within the specified range, and `--Scope:Session` to set session scope. The macro is evaluated at runtime, and its output is consumed by the RegisterParameter plugin to register the parameter.",
					"use_case": "register_random_long_integer_parameter_with_min_and_max_values_session_scope",
					"version": "1.0.0"
				},
				"labels": [
					"AutomationIntegration",
					"Macro",
					"ParameterRegistration",
					"RandomNumber",
					"SessionScope"
				]
			},
			"description": [
				"### Register Random Long Integer Parameter with Session Scope and Specified Range",
				"",
				"Evaluate the `NewRandomNumber` macro plugin with the `--MinValue:-2147483649`, `--MaxValue:2147483648`, and `--NumberType:Long` flags to generate a random long integer at runtime and pass it to the `RegisterParameter` plugin.  ",
				"Use the `RegisterParameter` plugin to register a parameter named `RandomNumber` with session scope using the generated value.  "
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Name:RandomNumber --Value:{{$New-RandomNumber --MinValue:-2147483649 --MaxValue:2147483648 --NumberType:Long}} --Scope:Session}}",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"CSS selector not matching any element",
						"Element not found",
						"Empty macro output",
						"KeyboardInput plugin failure",
						"Macro evaluation failure",
						"Timeout locating element"
					],
					"expected_result": "Generate a random byte value (0–255) at runtime using the NewRandomNumber macro plugin with the --NumberType:Byte flag and input it into the element identified by '#inputField' using the SendKeys plugin.",
					"notes": "The `argument` field uses the `New-RandomNumber --NumberType:Byte` macro call. The `--NumberType:Byte` flag sets the random number type to a byte (0–255). The macro is evaluated at runtime, and its output is passed to the SendKeys plugin as keystrokes.",
					"use_case": "generate_and_send_random_byte",
					"version": "1.0.0"
				},
				"labels": [
					"AutomationIntegration",
					"KeyboardInput",
					"Macro",
					"RandomNumber"
				]
			},
			"description": [
				"### Generate and Send Random Byte",
				"",
				"Evaluate the `NewRandomNumber` macro plugin with the `--NumberType:Byte` flag to generate a random byte value at runtime and pass it to the `SendKeys` plugin.  ",
				"Use the `SendKeys` plugin to input the generated byte value into the element identified by the CSS selector `#inputField`.  "
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$New-RandomNumber --NumberType:Byte}}",
				"locator": "CssSelector",
				"onElement": "#inputField",
				"pluginName": "SendKeys"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Empty macro output",
						"Invalid parameter name",
						"Invalid scope value",
						"Macro evaluation failure",
						"Parameter registration failure",
						"Session not available"
					],
					"expected_result": "Generate a random byte value (0–255) at runtime using the NewRandomNumber macro plugin with the --NumberType:Byte flag and register it as a session-scoped parameter named 'RandomNumber' via the RegisterParameter plugin.",
					"notes": "The `argument` field includes three flags: `--Name:RandomNumber` to specify the parameter name, `--Value:{{$New-RandomNumber --NumberType:Byte}}` where the NewRandomNumber macro plugin (evaluated with `--NumberType:Byte`) generates a byte value between 0 and 255, and `--Scope:Session` to set session scope. The macro is evaluated at runtime, and its output is consumed by the RegisterParameter plugin to register the parameter.",
					"use_case": "register_random_byte_parameter_session_scope",
					"version": "1.0.0"
				},
				"labels": [
					"AutomationIntegration",
					"Macro",
					"ParameterRegistration",
					"RandomNumber",
					"SessionScope"
				]
			},
			"description": [
				"### Register Random Byte Parameter with Session Scope",
				"",
				"Evaluate the `NewRandomNumber` macro plugin with the `--NumberType:Byte` flag to generate a random byte value at runtime and pass it to the `RegisterParameter` plugin.  ",
				"Use the `RegisterParameter` plugin to register a parameter named `RandomNumber` with session scope using the generated value.  "
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Name:RandomNumber --Value:{{$New-RandomNumber --NumberType:Byte}} --Scope:Session}}",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"CSS selector not matching any element",
						"Element not found",
						"Empty macro output",
						"KeyboardInput plugin failure",
						"Macro evaluation failure",
						"Timeout locating element"
					],
					"expected_result": "Generate a random byte value between 100 and 150 at runtime using the NewRandomNumber macro plugin with the --MinValue:100, --MaxValue:150, and --NumberType:Byte flags and input it into the element identified by '#inputField' using the SendKeys plugin.",
					"notes": "The `argument` field uses the `New-RandomNumber --MinValue:100 --MaxValue:150 --NumberType:Byte` macro call. The `--MinValue:100` and `--MaxValue:150` flags set the range, and the `--NumberType:Byte` flag sets the type to a byte (0–255). The macro is evaluated at runtime, and its output is passed to the SendKeys plugin as keystrokes.",
					"use_case": "generate_and_send_random_byte_with_specified_range",
					"version": "1.0.0"
				},
				"labels": [
					"AutomationIntegration",
					"KeyboardInput",
					"Macro",
					"RandomNumber"
				]
			},
			"description": [
				"### Generate and Send Random Byte with Specified Range",
				"",
				"Evaluate the `NewRandomNumber` macro plugin with the `--MinValue:100`, `--MaxValue:150`, and `--NumberType:Byte` flags to generate a random byte value at runtime and pass it to the `SendKeys` plugin.  ",
				"Use the `SendKeys` plugin to input the generated byte value into the element identified by the CSS selector `#inputField`.  "
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$New-RandomNumber --MinValue:100 --MaxValue:150 --NumberType:Byte}}",
				"locator": "CssSelector",
				"onElement": "#inputField",
				"pluginName": "SendKeys"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Empty macro output",
						"Invalid parameter name",
						"Invalid range: MinValue greater than MaxValue",
						"Invalid scope value",
						"Macro evaluation failure",
						"Parameter registration failure",
						"Session not available"
					],
					"expected_result": "Generate a random byte value between 100 and 150 at runtime using the NewRandomNumber macro plugin with the --MinValue:100, --MaxValue:150, and --NumberType:Byte flags and register it as a session-scoped parameter named 'RandomNumber' via the RegisterParameter plugin.",
					"notes": "The `argument` field includes three flags: `--Name:RandomNumber` to specify the parameter name, `--Value:{{$New-RandomNumber --MinValue:100 --MaxValue:150 --NumberType:Byte}}` where the NewRandomNumber macro plugin (evaluated with `--MinValue:100`, `--MaxValue:150`, and `--NumberType:Byte`) generates a byte value at runtime between 100 and 150, and `--Scope:Session` to set session scope. The macro is evaluated at runtime, and its output is consumed by the RegisterParameter plugin to register the parameter.",
					"use_case": "register_random_byte_parameter_with_specified_range_session_scope",
					"version": "1.0.0"
				},
				"labels": [
					"AutomationIntegration",
					"Macro",
					"ParameterRegistration",
					"RandomNumber",
					"SessionScope"
				]
			},
			"description": [
				"### Register Random Byte Parameter with Session Scope and Specified Range",
				"",
				"Evaluate the `NewRandomNumber` macro plugin with the `--MinValue:100`, `--MaxValue:150`, and `--NumberType:Byte` flags to generate a random byte value at runtime and pass it to the `RegisterParameter` plugin.  ",
				"Use the `RegisterParameter` plugin to register a parameter named `RandomNumber` with session scope using the generated value.  "
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Name:RandomNumber --Value:{{$New-RandomNumber --MinValue:100 --MaxValue:150 --NumberType:Byte}} --Scope:Session}}",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"CSS selector not matching any element",
						"Element not found",
						"Empty macro output",
						"KeyboardInput plugin failure",
						"Macro evaluation failure",
						"Timeout locating element"
					],
					"expected_result": "Generate a random byte value greater than or equal to 100 at runtime using the NewRandomNumber macro plugin with the --MinValue:100 and --NumberType:Byte flags and input it into the element identified by '#inputField' using the SendKeys plugin.",
					"notes": "The `argument` field uses the `New-RandomNumber --MinValue:100 --NumberType:Byte` macro call. The `--MinValue:100` flag sets the lower bound. The `--NumberType:Byte` flag sets the type to a byte (0–255), defaulting to a maximum of 255 when no `--MaxValue` flag is provided. The macro is evaluated at runtime, and its output is passed to the SendKeys plugin as keystrokes.",
					"use_case": "generate_and_send_random_byte_with_min_value",
					"version": "1.0.0"
				},
				"labels": [
					"AutomationIntegration",
					"KeyboardInput",
					"Macro",
					"RandomNumber"
				]
			},
			"description": [
				"### Generate and Send Random Byte with Minimum Value",
				"",
				"Evaluate the `NewRandomNumber` macro plugin with the `--MinValue:100` and `--NumberType:Byte` flags to generate a random byte value greater than or equal to 100 at runtime and pass it to the `SendKeys` plugin.  ",
				"Use the `SendKeys` plugin to input the generated byte value into the element identified by the CSS selector `#inputField`.  "
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$New-RandomNumber --MinValue:100 --NumberType:Byte}}",
				"locator": "CssSelector",
				"onElement": "#inputField",
				"pluginName": "SendKeys"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Empty macro output",
						"Invalid parameter name",
						"Invalid scope value",
						"Macro evaluation failure",
						"Parameter registration failure",
						"Session not available"
					],
					"expected_result": "Generate a random byte value greater than or equal to 100 at runtime using the NewRandomNumber macro plugin with the --MinValue:100 and --NumberType:Byte flags and register it as a session-scoped parameter named 'RandomNumber' via the RegisterParameter plugin.",
					"notes": "The `argument` field includes three flags: `--Name:RandomNumber` to specify the parameter name, `--Value:{{$New-RandomNumber --MinValue:100 --NumberType:Byte}}` where the NewRandomNumber macro plugin (evaluated with `--MinValue:100` and `--NumberType:Byte`) generates a byte value at runtime between 100 and the default maximum of 255, and `--Scope:Session` to set session scope. The macro is evaluated at runtime, and its output is consumed by the RegisterParameter plugin to register the parameter.",
					"use_case": "register_random_byte_parameter_with_min_value_session_scope",
					"version": "1.0.0"
				},
				"labels": [
					"AutomationIntegration",
					"Macro",
					"ParameterRegistration",
					"RandomNumber",
					"SessionScope"
				]
			},
			"description": [
				"### Register Random Byte Parameter with Session Scope and Minimum Value",
				"",
				"Evaluate the `NewRandomNumber` macro plugin with the `--MinValue:100` and `--NumberType:Byte` flags to generate a random byte value at runtime and pass it to the `RegisterParameter` plugin.  ",
				"Use the `RegisterParameter` plugin to register a parameter named `RandomNumber` with session scope using the generated value.  "
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Name:RandomNumber --Value:{{$New-RandomNumber --MinValue:100 --NumberType:Byte}} --Scope:Session}}",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"CSS selector not matching any element",
						"Element not found",
						"Empty macro output",
						"KeyboardInput plugin failure",
						"Macro evaluation failure",
						"Timeout locating element"
					],
					"expected_result": "Generate a random byte value less than or equal to 150 at runtime using the NewRandomNumber macro plugin with the --MaxValue:150 and --NumberType:Byte flags and input it into the element identified by '#inputField' using the SendKeys plugin.",
					"notes": "The `argument` field uses the `New-RandomNumber --MaxValue:150 --NumberType:Byte` macro call. The `--MaxValue:150` flag sets the upper bound, and the `--NumberType:Byte` flag sets the type to a byte (0–255). When no `--MinValue` flag is provided, the lower bound defaults to 0. The macro is evaluated at runtime, and its output is passed to the SendKeys plugin as keystrokes.",
					"use_case": "generate_and_send_random_byte_with_max_value",
					"version": "1.0.0"
				},
				"labels": [
					"AutomationIntegration",
					"KeyboardInput",
					"Macro",
					"RandomNumber"
				]
			},
			"description": [
				"### Generate and Send Random Byte with Maximum Value",
				"",
				"Evaluate the `NewRandomNumber` macro plugin with the `--MaxValue:150` and `--NumberType:Byte` flags to generate a random byte value less than or equal to 150 at runtime and pass it to the `SendKeys` plugin.  ",
				"Use the `SendKeys` plugin to input the generated byte value into the element identified by the CSS selector `#inputField`.  "
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$New-RandomNumber --MaxValue:150 --NumberType:Byte}}",
				"locator": "CssSelector",
				"onElement": "#inputField",
				"pluginName": "SendKeys"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Empty macro output",
						"Invalid parameter name",
						"Invalid scope value",
						"Macro evaluation failure",
						"Parameter registration failure",
						"Session not available"
					],
					"expected_result": "Generate a random byte value less than or equal to 150 at runtime using the NewRandomNumber macro plugin with the --MaxValue:150 and --NumberType:Byte flags and register it as a session-scoped parameter named 'RandomNumber' via the RegisterParameter plugin.",
					"notes": "The `argument` field includes three flags: `--Name:RandomNumber` to specify the parameter name, `--Value:{{$New-RandomNumber --MaxValue:150 --NumberType:Byte}}` where the NewRandomNumber macro plugin (evaluated with `--MaxValue:150` and `--NumberType:Byte`) generates a byte value at runtime less than or equal to 150 (with the lower bound defaulting to 0), and `--Scope:Session` to set session scope. The macro is evaluated at runtime, and its output is consumed by the RegisterParameter plugin to register the parameter.",
					"use_case": "register_random_byte_parameter_with_max_value_session_scope",
					"version": "1.0.0"
				},
				"labels": [
					"AutomationIntegration",
					"Macro",
					"ParameterRegistration",
					"RandomNumber",
					"SessionScope"
				]
			},
			"description": [
				"### Register Random Byte Parameter with Session Scope and Maximum Value",
				"",
				"Evaluate the `NewRandomNumber` macro plugin with the `--MaxValue:150` and `--NumberType:Byte` flags to generate a random byte value at runtime and pass it to the `RegisterParameter` plugin.  ",
				"Use the `RegisterParameter` plugin to register a parameter named `RandomNumber` with session scope using the generated value.  "
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Name:RandomNumber --Value:{{$New-RandomNumber --MaxValue:150 --NumberType:Byte}} --Scope:Session}}",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"CSS selector not matching any element",
						"Element not found",
						"Empty macro output",
						"KeyboardInput plugin failure",
						"Macro evaluation failure",
						"Timeout locating element"
					],
					"expected_result": "Generate a random float value between 0 and 1 (exclusive) at runtime using the NewRandomNumber macro plugin with the --NumberType:Float flag and input it into the element identified by '#inputField' using the SendKeys plugin.",
					"notes": "The `argument` field uses the `New-RandomNumber --NumberType:Float` macro call. The `--NumberType:Float` flag sets the number type to a floating-point value between 0 and 1 (exclusive). The macro is evaluated at runtime, and its output is passed to the SendKeys plugin as keystrokes.",
					"use_case": "generate_and_send_random_float",
					"version": "1.0.0"
				},
				"labels": [
					"AutomationIntegration",
					"KeyboardInput",
					"Macro",
					"RandomNumber"
				]
			},
			"description": [
				"### Generate and Send Random Float",
				"",
				"Evaluate the `NewRandomNumber` macro plugin with the `--NumberType:Float` flag to generate a random float value between 0 and 1 (exclusive) at runtime and pass it to the `SendKeys` plugin.  ",
				"Use the `SendKeys` plugin to input the generated float value into the element identified by the CSS selector `#inputField`.  "
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$New-RandomNumber --NumberType:Float}}",
				"locator": "CssSelector",
				"onElement": "#inputField",
				"pluginName": "SendKeys"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Empty macro output",
						"Invalid parameter name",
						"Invalid scope value",
						"Macro evaluation failure",
						"Parameter registration failure",
						"Session not available"
					],
					"expected_result": "Generate a random float value between 0 and 1 (exclusive) at runtime using the NewRandomNumber macro plugin with the --NumberType:Float flag and register it as a session-scoped parameter named 'RandomNumber' via the RegisterParameter plugin.",
					"notes": "The `argument` field includes three flags: `--Name:RandomNumber` to specify the parameter name, `--Value:{{$New-RandomNumber --NumberType:Float}}` where the NewRandomNumber macro plugin (evaluated with `--NumberType:Float`) generates a float between 0 and 1 (exclusive), and `--Scope:Session` to set session scope. The macro is evaluated at runtime, and its output is consumed by the RegisterParameter plugin to register the parameter.",
					"use_case": "register_random_float_parameter_session_scope",
					"version": "1.0.0"
				},
				"labels": [
					"AutomationIntegration",
					"Macro",
					"ParameterRegistration",
					"RandomNumber",
					"SessionScope"
				]
			},
			"description": [
				"### Register Random Float Parameter with Session Scope",
				"",
				"Evaluate the `NewRandomNumber` macro plugin with the `--NumberType:Float` flag to generate a random float value between 0 and 1 (exclusive) at runtime and pass it to the `RegisterParameter` plugin.  ",
				"Use the `RegisterParameter` plugin to register a parameter named `RandomNumber` with session scope using the generated value.  "
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Name:RandomNumber --Value:{{$New-RandomNumber --NumberType:Float}} --Scope:Session}}",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"CSS selector not matching any element",
						"Element not found",
						"Empty macro output",
						"KeyboardInput plugin failure",
						"Macro evaluation failure",
						"Timeout locating element"
					],
					"expected_result": "Generate a random double value between 0 and 1 (exclusive) at runtime using the NewRandomNumber macro plugin with the --NumberType:Double flag and input it into the element identified by '#inputField' using the SendKeys plugin.",
					"notes": "The `argument` field uses the `New-RandomNumber --NumberType:Double` macro call. The `--NumberType:Double` flag sets the random number type to a double precision floating-point value between 0 and 1 (exclusive). The macro is evaluated at runtime, and its output is passed to the SendKeys plugin as keystrokes.",
					"use_case": "generate_and_send_random_double",
					"version": "1.0.0"
				},
				"labels": [
					"AutomationIntegration",
					"KeyboardInput",
					"Macro",
					"RandomNumber"
				]
			},
			"description": [
				"### Generate and Send Random Double",
				"",
				"Evaluate the `NewRandomNumber` macro plugin with the `--NumberType:Double` flag to generate a random double value between 0 and 1 (exclusive) at runtime and pass it to the `SendKeys` plugin.  ",
				"Use the `SendKeys` plugin to input the generated double value into the element identified by the CSS selector `#inputField`.  "
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$New-RandomNumber --NumberType:Double}}",
				"locator": "CssSelector",
				"onElement": "#inputField",
				"pluginName": "SendKeys"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Empty macro output",
						"Invalid parameter name",
						"Invalid scope value",
						"Macro evaluation failure",
						"Parameter registration failure",
						"Session not available"
					],
					"expected_result": "Generate a random double value between 0 and 1 (exclusive) at runtime using the NewRandomNumber macro plugin with the --NumberType:Double flag and register it as a session-scoped parameter named 'RandomNumber' via the RegisterParameter plugin.",
					"notes": "The `argument` field includes three flags: `--Name:RandomNumber` to specify the parameter name, `--Value:{{$New-RandomNumber --NumberType:Double}}` where the NewRandomNumber macro plugin (evaluated with `--NumberType:Double`) generates a double value between 0 and 1 (exclusive), and `--Scope:Session` to set session scope. The macro is evaluated at runtime, and its output is consumed by the RegisterParameter plugin to register the parameter.",
					"use_case": "register_random_double_parameter_session_scope",
					"version": "1.0.0"
				},
				"labels": [
					"AutomationIntegration",
					"Macro",
					"ParameterRegistration",
					"RandomNumber",
					"SessionScope"
				]
			},
			"description": [
				"### Register Random Double Parameter with Session Scope",
				"",
				"Evaluate the `NewRandomNumber` macro plugin with the `--NumberType:Double` flag to generate a random double value between 0 and 1 (exclusive) at runtime and pass it to the `RegisterParameter` plugin.  ",
				"Use the `RegisterParameter` plugin to register a parameter named `RandomNumber` with session scope using the generated value.  "
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Name:RandomNumber --Value:{{$New-RandomNumber --NumberType:Double}} --Scope:Session}}",
				"pluginName": "RegisterParameter"
			}
		}
	],
	"key": "New-RandomNumber",
	"manifestVersion": 4,
	"parameters": [
		{
			"description": [
				"MinValue sets the smallest number that can be generated by the random number function.",
				"Defining a lower bound ensures results stay within a known range.",
				"Omitting MinValue causes the function to use the lowest value supported by the integer type.",
				"Specifying MinValue helps prevent values that are too low for the intended use."
			],
			"mandatory": false,
			"name": "MinValue",
			"type": "Number"
		},
		{
			"description": [
				"MaxValue sets the highest number that the random number generator can produce.",
				"Establishing an upper limit ensures outputs stay within a predictable range.",
				"Omitting MaxValue causes the function to use the maximum supported integer value.",
				"Defining MaxValue helps avoid values that exceed intended limits."
			],
			"mandatory": false,
			"name": "MaxValue",
			"type": "Number"
		},
		{
			"default": "Integer",
			"description": [
				"NumberType determines which numeric format the generator will produce.",
				"Choosing the right type ensures output matches the needed precision and range.",
				"Omitting NumberType results in Integer values by default.",
				"Specifying NumberType prevents unexpected numeric formats in results."
			],
			"mandatory": false,
			"name": "NumberType",
			"type": "String",
			"values": [
				{
					"description": [
						"Byte generates whole number values between 0 and 255.",
						"Choosing Byte reduces memory use for small-range data.",
						"Using Byte fits scenarios like binary file operations."
					],
					"name": "Byte"
				},
				{
					"description": [
						"Double produces floating-point values from 0.0 up to but not including 1.0 with high precision.",
						"Using Double supports tasks requiring about 15 decimal digits of accuracy.",
						"Choosing Double helps in scientific calculations and detailed simulations."
					],
					"name": "Double"
				},
				{
					"description": [
						"Float produces floating-point values from 0.0 up to but not including 1.0 with moderate precision.",
						"Using Float saves memory when about 7 decimal digits of accuracy are sufficient.",
						"Choosing Float is useful for graphics and real-time applications."
					],
					"name": "Float"
				},
				{
					"description": [
						"Integer generates whole number values without any decimal part.",
						"Using Integer simplifies tasks that require counts or indexing."
					],
					"name": "Integer"
				},
				{
					"description": [
						"Long produces whole numbers beyond the standard integer range.",
						"Using Long prevents overflow in large-scale computations.",
						"Choosing Long is ideal for timestamps and very large counters."
					],
					"name": "Long"
				}
			]
		}
	],
	"platforms": [
		"Any"
	],
	"pluginType": "Macro",
	"protocol": {
		"apiDocumentation": "None",
		"w3c": "None"
	},
	"summary": [
		"The New-RandomNumber macro plugin generates random number values on demand within automation workflows.",
		"It lets users specify minimum and maximum ranges and select different number types, including Integer, Long, Float, Double, or Byte.",
		"This flexibility supports tasks like data-driven testing, boundary testing, and dynamic data population in automation processes.",
		"By integrating random value generation directly into workflows, it reduces the need for external scripts and streamlines automated testing and RPA tasks."
	]
}
