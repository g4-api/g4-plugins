{
	"aliases": [
		"date",
		"NewDate"
	],
	"author": {
		"link": "https://www.linkedin.com/in/roei-sabag-247aa18/",
		"name": "Roei Sabag"
	},
	"categories": [
		"Utilities"
	],
	"context": {
		"integration": {
			"github": {
				"document": "https://github.com/g4-api/g4-plugins/blob/main/docs/Macros/New-Date.md",
				"source": "https://github.com/g4-api/g4-plugins/blob/main/src/G4.Plugins.Common/Macros/NewDate.cs"
			}
		}
	},
	"description": [
		"### Purpose",
		"",
		"The primary purpose of the NewDate macro plugin is to provide functionalities for date and time manipulation, including adding or subtracting time, extracting specific date parts, and formatting dates according to custom formats.",
		"",
		"### Key Features",
		"",
		"| Feature              | Description                                                                 |",
		"|----------------------|-----------------------------------------------------------------------------|",
		"| Date Manipulation    | Add or subtract time from the current date and time.                        |",
		"| Date Formatting      | Format dates according to custom formats.                                   |",
		"| Date Part Extraction | Extract specific parts of the date and time, such as year, month, day, etc. |",
		"",
		"### Usages in RPA",
		"",
		"| Usage            | Description                                                             |",
		"|------------------|-------------------------------------------------------------------------|",
		"| Date Calculation | Perform calculations involving dates and times in automation workflows. |",
		"| Date Formatting  | Format dates for logging or display purposes.                           |",
		"| Data Processing  | Extract specific date parts for further processing or validation.       |",
		"",
		"### Usages in Automation Testing",
		"",
		"| Usage             | Description                                                                                |",
		"|-------------------|--------------------------------------------------------------------------------------------|",
		"| Date Verification | Verify date-related behaviors or outputs during automated testing.                         |",
		"| Data Generation   | Generate test data involving dates and times.                                              |",
		"| Test Scheduling   | Schedule tests to run at specific dates or times for regression testing or other purposes. |"
	],
	"examples": [
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Empty macro output",
						"Incorrect date format",
						"Invalid CSS selector",
						"Locator not matching",
						"SendKeys failure"
					],
					"expected_result": "The plugin sends the current date and time as keystrokes to the element matching the CSS selector `.example-element`.",
					"notes": "This example uses the `NewDate` macro (`{{$New-Date}}`) to generate the argument for the `SendKeys` plugin.",
					"use_case": "sendkeys_with_newdate_macro",
					"version": "1.0.0"
				},
				"labels": [
					"CssSelector",
					"DateTime",
					"Macro",
					"NewDate",
					"SendKeys"
				]
			},
			"description": [
				"### SendKeys Plugin with NewDate Macro",
				"",
				"Use the `SendKeys` plugin to send the current date and time to the specified element matching the CSS selector `.example-element`.",
				"Generate the argument by applying the `NewDate` macro (`{{$New-Date}}`), which returns the current local date and time as a string."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$New-Date}}",
				"locator": "CssSelector",
				"onElement": ".example-element",
				"pluginName": "SendKeys"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Empty macro output",
						"Invalid date format",
						"Missing parameter name",
						"Nested macro syntax error",
						"Parameter name conflict",
						"Plugin failure",
						"Session scope unsupported",
						"Unexpected whitespace in argument"
					],
					"expected_result": "The RegisterParameter plugin registers a session-scoped parameter named DataParameter with the current date in yyyy-MM-dd format.",
					"notes": "This example first evaluates the `NewDate` macro (`{{$New-Date --Format:yyyy-MM-dd}}`) to produce the date string, then passes that string verbatim in the argument (`--Name:DataParameter --Value:<date string> --Scope:Session`) to the `RegisterParameter` plugin.",
					"use_case": "register_parameter_current_date_session",
					"version": "1.0.0"
				},
				"labels": [
					"DateTime",
					"Macro",
					"NewDate",
					"Parameter",
					"RegisterParameter",
					"Session"
				]
			},
			"description": [
				"### RegisterParameter Plugin with NewDate Macro",
				"",
				"Evaluate the `NewDate` macro (`{{$New-Date --Format:yyyy-MM-dd}}`) to produce a date string in `yyyy-MM-dd` format.",
				"Pass the verbatim argument string (`{{$ --Name:DataParameter --Value:<date string> --Scope:Session}}`) to the `RegisterParameter` plugin to register a session-scoped parameter named `DataParameter` with the generated date string."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Name:DataParameter --Value:{{$New-Date --Format:yyyy-MM-dd}} --Scope:Session}}",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"description": [
				"This example demonstrates the usage of the `WriteLog` plugin to log a meaningful message including the current date obtained from the `NewDate` macro plugin.",
				"This example instructs the automation system to utilize the `WriteLog` plugin to write a log entry including the current date obtained from the `NewDate` macro plugin."
			],
			"rule": {
				"argument": "Log entry created at {{$New-Date --Format:yyyy-MM-dd}}",
				"pluginName": "WriteLog"
			}
		},
		{
			"description": [
				"This example demonstrates the usage of the `SendKeys` plugin with the `{{$New-Date --Format:yyyy-MM-dd --Utc}}` macro as the argument.",
				"",
				"| Field      | Description                                                                                                                                                                                               |",
				"|------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|",
				"| pluginName | Identifies the specific plugin being utilized, which is `SendKeys`. This plugin is used to send keystrokes to a specified element.                                                                        |",
				"| locator    | Specifies the locating mechanism, such as CSS selector, XPath, etc., for the target element where the keystrokes will be sent.                                                                            |",
				"| onElement  | Indicates the value of the locator, representing the element where the keystrokes will be sent.                                                                                                           |",
				"| argument   | The macro token `{{$New-Date --Format:yyyy-MM-dd --Utc}}` represents the usage of the `NewDate` macro plugin to retrieve the current date in the format `yyyy-MM-dd` in UTC (Coordinated Universal Time). |",
				"",
				"This example instructs the automation system to utilize the `SendKeys` plugin to send the current date obtained from the `NewDate` macro plugin in UTC format to the specified element."
			],
			"rule": {
				"argument": "{{$New-Date --Format:yyyy-MM-dd --Utc}}",
				"locator": "CssSelector",
				"onElement": ".example-element",
				"pluginName": "SendKeys"
			}
		},
		{
			"description": [
				"This example demonstrates the usage of the `Click` plugin to click on a button containing the current year as its value, using the `{{$New-Date --Format:yyyy}}` macro as part of the XPath locator.",
				"",
				"| Field      | Description                                                                                                                                |",
				"|------------|--------------------------------------------------------------------------------------------------------------------------------------------|",
				"| pluginName | Identifies the specific plugin being utilized, which is `Click`. This plugin is used to perform a click action on a specified element.     |",
				"| locator    | Specifies the locating mechanism, which is XPath in this case, for the target element where the click action will be performed.            |",
				"| onElement  | Indicates the value of the locator, representing the XPath expression that identifies the button containing the current year as its value. |",
				"",
				"This example instructs the automation system to utilize the `Click` plugin to click on a button containing the current year as its value, using the `{{$New-Date --Format:yyyy}}` macro to dynamically construct the XPath locator."
			],
			"rule": {
				"locator": "Xpath",
				"onElement": "//button[contains(text(), '{{$New-Date --Format:yyyy}}')]",
				"pluginName": "Click"
			}
		},
		{
			"description": [
				"This example demonstrates the usage of the `WriteLog` plugin to log the current date and time in Unix epoch format, obtained from the `NewDate` macro plugin.",
				"",
				"| Field      | Description                                                                                                                                                |",
				"|------------|------------------------------------------------------------------------------------------------------------------------------------------------------------|",
				"| pluginName | Identifies the specific plugin being utilized, which is `WriteLog`. This plugin is used to write information to the host console.                           |",
				"| argument   | The macro token `{{$New-Date --UnixEpoch}}` represents the usage of the `NewDate` macro plugin to retrieve the current date and time in Unix epoch format. |",
				"",
				"This example instructs the automation system to utilize the `WriteLog` plugin to log the current date and time in Unix epoch format."
			],
			"rule": {
				"argument": "{{$New-Date --UnixEpoch}}",
				"pluginName": "WriteLog"
			}
		},
		{
			"description": [
				"This example demonstrates the usage of the `SendKeys` plugin to input the current date and time in OLE Automation Date format, obtained from the `NewDate` macro plugin, into a text field.",
				"",
				"| Field      | Description                                                                                                                                                      |",
				"|------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------|",
				"| pluginName | Identifies the specific plugin being utilized, which is `SendKeys`. This plugin is used to send keystrokes to a specified element.                               |",
				"| locator    | Specifies the locating mechanism for the target text field where the keystrokes will be sent.                                                                    |",
				"| onElement  | Indicates the value of the locator, representing the text field where the keystrokes will be sent.                                                               |",
				"| argument   | The macro token `{{$New-Date --OaDate}}` represents the usage of the `NewDate` macro plugin to retrieve the current date and time in OLE Automation Date format. |",
				"",
				"This example instructs the automation system to utilize the `SendKeys` plugin to input the current date and time in OLE Automation Date format into a text field.",
				"",
				"In OLE Automation, dates are represented as floating-point numbers, where the integer part represents the number of days since December 30, 1899, and the fractional part represents the time of day."
			],
			"rule": {
				"locator": "CssSelector",
				"onElement": ".text-field",
				"argument": "{{$New-Date --OaDate}}",
				"pluginName": "SendKeys"
			}
		},
		{
			"description": [
				"This example demonstrates the usage of the `SendKeys` plugin to input the current year obtained from the `NewDate` macro plugin into a text field.",
				"",
				"| Field      | Description                                                                                                                        |",
				"|------------|------------------------------------------------------------------------------------------------------------------------------------|",
				"| pluginName | Identifies the specific plugin being utilized, which is `SendKeys`. This plugin is used to send keystrokes to a specified element. |",
				"| locator    | Specifies the locating mechanism for the target text field where the keystrokes will be sent.                                      |",
				"| onElement  | Indicates the value of the locator, representing the text field where the keystrokes will be sent.                                 |",
				"| argument   | The macro token `{{$New-Date --DatePart:Year}}` represents the usage of the `NewDate` macro plugin to retrieve the current year.   |",
				"",
				"This example instructs the automation system to utilize the `SendKeys` plugin to input the current year obtained from the `NewDate` macro plugin into a text field."
			],
			"rule": {
				"argument": "{{$New-Date --DatePart:Year}}",
				"locator": "CssSelector",
				"onElement": ".text-field",
				"pluginName": "SendKeys"
			}
		},
		{
			"description": [
				"This example demonstrates the usage of the `SendKeys` plugin to input the current month obtained from the `NewDate` macro plugin into a text field.",
				"",
				"| Field      | Description                                                                                                                        |",
				"|------------|------------------------------------------------------------------------------------------------------------------------------------|",
				"| pluginName | Identifies the specific plugin being utilized, which is `SendKeys`. This plugin is used to send keystrokes to a specified element. |",
				"| locator    | Specifies the locating mechanism for the target text field where the keystrokes will be sent.                                      |",
				"| onElement  | Indicates the value of the locator, representing the text field where the keystrokes will be sent.                                 |",
				"| argument   | The macro token `{{$New-Date --DatePart:Month}}` represents the usage of the `NewDate` macro plugin to retrieve the current month. |",
				"",
				"This example instructs the automation system to utilize the `SendKeys` plugin to input the current month obtained from the `NewDate` macro plugin into a text field."
			],
			"rule": {
				"argument": "{{$New-Date --DatePart:Month}}",
				"locator": "CssSelector",
				"onElement": ".text-field",
				"pluginName": "SendKeys"
			}
		},
		{
			"description": [
				"This example demonstrates the usage of the `SendKeys` plugin to input the current day obtained from the `NewDate` macro plugin into a text field.",
				"",
				"| Field      | Description                                                                                                                        |",
				"|------------|------------------------------------------------------------------------------------------------------------------------------------|",
				"| pluginName | Identifies the specific plugin being utilized, which is `SendKeys`. This plugin is used to send keystrokes to a specified element. |",
				"| locator    | Specifies the locating mechanism for the target text field where the keystrokes will be sent.                                      |",
				"| onElement  | Indicates the value of the locator, representing the text field where the keystrokes will be sent.                                 |",
				"| argument   | The macro token `{{$New-Date --DatePart:Day}}` represents the usage of the `NewDate` macro plugin to retrieve the current day.     |",
				"",
				"This example instructs the automation system to utilize the `SendKeys` plugin to input the current day obtained from the `NewDate` macro plugin into a text field."
			],
			"rule": {
				"argument": "{{$New-Date --DatePart:Day}}",
				"locator": "CssSelector",
				"onElement": ".text-field",
				"pluginName": "SendKeys"
			}
		},
		{
			"description": [
				"This example demonstrates the usage of the `SendKeys` plugin to input the current hour obtained from the `NewDate` macro plugin into a text field.",
				"",
				"| Field       | Description                                                                                                                        |",
				"|-------------|------------------------------------------------------------------------------------------------------------------------------------|",
				"| pluginName  | Identifies the specific plugin being utilized, which is `SendKeys`. This plugin is used to send keystrokes to a specified element. |",
				"| locator     | Specifies the locating mechanism for the target text field where the keystrokes will be sent.                                      |",
				"| onElement   | Indicates the value of the locator, representing the text field where the keystrokes will be sent.                                 |",
				"| argument    | The macro token `{{$New-Date --DatePart:Hour}}` represents the usage of the `NewDate` macro plugin to retrieve the current hour.   |",
				"",
				"This example instructs the automation system to utilize the `SendKeys` plugin to input the current hour obtained from the `NewDate` macro plugin into a text field."
			],
			"rule": {
				"argument": "{{$New-Date --DatePart:Hour}}",
				"locator": "CssSelector",
				"onElement": ".text-field",
				"pluginName": "SendKeys"
			}
		},
		{
			"description": [
				"This example demonstrates the usage of the `SendKeys` plugin to input the current minute obtained from the `NewDate` macro plugin into a text field.",
				"",
				"| Field      | Description                                                                                                                          |",
				"|------------|--------------------------------------------------------------------------------------------------------------------------------------|",
				"| pluginName | Identifies the specific plugin being utilized, which is `SendKeys`. This plugin is used to send keystrokes to a specified element.   |",
				"| locator    | Specifies the locating mechanism for the target text field where the keystrokes will be sent.                                        |",
				"| onElement  | Indicates the value of the locator, representing the text field where the keystrokes will be sent.                                   |",
				"| argument   | The macro token `{{$New-Date --DatePart:Minute}}` represents the usage of the `NewDate` macro plugin to retrieve the current minute. |",
				"",
				"This example instructs the automation system to utilize the `SendKeys` plugin to input the current minute obtained from the `NewDate` macro plugin into a text field."
			],
			"rule": {
				"argument": "{{$New-Date --DatePart:Minute}}",
				"locator": "CssSelector",
				"onElement": ".text-field",
				"pluginName": "SendKeys"
			}
		},
		{
			"description": [
				"This example demonstrates the usage of the `SendKeys` plugin to input the current second obtained from the `NewDate` macro plugin into a text field.",
				"",
				"| Field      | Description                                                                                                                          |",
				"|------------|--------------------------------------------------------------------------------------------------------------------------------------|",
				"| pluginName | Identifies the specific plugin being utilized, which is `SendKeys`. This plugin is used to send keystrokes to a specified element.   |",
				"| locator    | Specifies the locating mechanism for the target text field where the keystrokes will be sent.                                        |",
				"| onElement  | Indicates the value of the locator, representing the text field where the keystrokes will be sent.                                   |",
				"| argument   | The macro token `{{$New-Date --DatePart:Second}}` represents the usage of the `NewDate` macro plugin to retrieve the current second. |",
				"",
				"This example instructs the automation system to utilize the `SendKeys` plugin to input the current second obtained from the `NewDate` macro plugin into a text field."
			],
			"rule": {
				"argument": "{{$New-Date --DatePart:Second}}",
				"locator": "CssSelector",
				"onElement": ".text-field",
				"pluginName": "SendKeys"
			}
		},
		{
			"description": [
				"This example demonstrates the usage of the `SendKeys` plugin to input the current millisecond obtained from the `NewDate` macro plugin into a text field.",
				"",
				"| Field      | Description                                                                                                                                    |",
				"|------------|------------------------------------------------------------------------------------------------------------------------------------------------|",
				"| pluginName | Identifies the specific plugin being utilized, which is `SendKeys`. This plugin is used to send keystrokes to a specified element.             |",
				"| locator    | Specifies the locating mechanism for the target text field where the keystrokes will be sent.                                                  |",
				"| onElement  | Indicates the value of the locator, representing the text field where the keystrokes will be sent.                                             |",
				"| argument   | The macro token `{{$New-Date --DatePart:Millisecond}}` represents the usage of the `NewDate` macro plugin to retrieve the current millisecond. |",
				"",
				"This example instructs the automation system to utilize the `SendKeys` plugin to input the current millisecond obtained from the `NewDate` macro plugin into a text field."
			],
			"rule": {
				"argument": "{{$New-Date --DatePart:Millisecond}}",
				"locator": "CssSelector",
				"onElement": ".text-field",
				"pluginName": "SendKeys"
			}
		},
		{
			"description": [
				"This example demonstrates the usage of the `SendKeys` plugin to input the current nanosecond obtained from the `NewDate` macro plugin into a text field.",
				"",
				"| Field      | Description                                                                                                                                  |",
				"|------------|----------------------------------------------------------------------------------------------------------------------------------------------|",
				"| pluginName | Identifies the specific plugin being utilized, which is `SendKeys`. This plugin is used to send keystrokes to a specified element.           |",
				"| locator    | Specifies the locating mechanism for the target text field where the keystrokes will be sent.                                                |",
				"| onElement  | Indicates the value of the locator, representing the text field where the keystrokes will be sent.                                           |",
				"| argument   | The macro token `{{$New-Date --DatePart:Nanosecond}}` represents the usage of the `NewDate` macro plugin to retrieve the current nanosecond. |",
				"",
				"This example instructs the automation system to utilize the `SendKeys` plugin to input the current nanosecond obtained from the `NewDate` macro plugin into a text field."
			],
			"rule": {
				"argument": "{{$New-Date --DatePart:Nanosecond}}",
				"locator": "CssSelector",
				"onElement": ".text-field",
				"pluginName": "SendKeys"
			}
		},
		{
			"description": [
				"This example demonstrates the usage of the `SendKeys` plugin to input the current microsecond obtained from the `NewDate` macro plugin into a text field.",
				"",
				"| Field      | Description                                                                                                                                    |",
				"|------------|------------------------------------------------------------------------------------------------------------------------------------------------|",
				"| pluginName | Identifies the specific plugin being utilized, which is `SendKeys`. This plugin is used to send keystrokes to a specified element.             |",
				"| locator    | Specifies the locating mechanism for the target text field where the keystrokes will be sent.                                                  |",
				"| onElement  | Indicates the value of the locator, representing the text field where the keystrokes will be sent.                                             |",
				"| argument   | The macro token `{{$New-Date --DatePart:Microsecond}}` represents the usage of the `NewDate` macro plugin to retrieve the current microsecond. |",
				"",
				"This example instructs the automation system to utilize the `SendKeys` plugin to input the current microsecond obtained from the `NewDate` macro plugin into a text field."
			],
			"rule": {
				"argument": "{{$New-Date --DatePart:Microsecond}}",
				"locator": "CssSelector",
				"onElement": ".text-field",
				"pluginName": "SendKeys"
			}
		},
		{
			"description": [
				"This example demonstrates the usage of the `SendKeys` plugin to input the current ticks obtained from the `NewDate` macro plugin into a text field.",
				"",
				"| Field      | Description                                                                                                                        |",
				"|------------|------------------------------------------------------------------------------------------------------------------------------------|",
				"| pluginName | Identifies the specific plugin being utilized, which is `SendKeys`. This plugin is used to send keystrokes to a specified element. |",
				"| locator    | Specifies the locating mechanism for the target text field where the keystrokes will be sent.                                      |",
				"| onElement  | Indicates the value of the locator, representing the text field where the keystrokes will be sent.                                 |",
				"| argument   | The macro token `{{$New-Date --DatePart:Ticks}}` represents the usage of the `NewDate` macro plugin to retrieve the current ticks. |",
				"",
				"This example instructs the automation system to utilize the `SendKeys` plugin to input the current ticks obtained from the `NewDate` macro plugin into a text field."
			],
			"rule": {
				"argument": "{{$New-Date --DatePart:Ticks}}",
				"locator": "CssSelector",
				"onElement": ".text-field",
				"pluginName": "SendKeys"
			}
		}
	],
	"key": "New-Date",
	"manifestVersion": 4,
	"parameters": [
		{
			"description": [
				"Amount of time to add to the current date and time.",
				"Use positive or negative values to move the timestamp forward or backward.",
				"Supports durations such as days, hours, minutes, and seconds."
			],
			"mandatory": false,
			"name": "AddTime",
			"type": "Time"
		},
		{
			"description": [
				"Amount of time to subtract from the current date and time.",
				"Define the duration in units like days, hours, minutes, or seconds.",
				"Creates a past timestamp relative to now."
			],
			"mandatory": false,
			"name": "SubtructTime",
			"type": "Time"
		},
		{
			"default": "yyyy-MM-ddTHH:mm:ss.ffffffK",
			"description": [
				"Custom pattern that dictates how the date and time are displayed.",
				"Uses standard .NET format tokens for precise control over order, separators, and precision.",
				"Defaults to `yyyy-MM-ddTHH:mm:ss.ffffffK` when no format is provided."
			],
			"links": [
				{
					"link": "https://learn.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings",
					"title": "Custom Date and Time Format Strings"
				},
				{
					"link": "https://learn.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings",
					"title": "Standard Date and Time Format Strings"
				}
			],
			"mandatory": false,
			"name": "Format",
			"type": "String"
		},
		{
			"description": [
				"Choose one element of the date and time, like year, month, or day, when you need only part of the full timestamp.",
				"Selecting 'Hour' or 'Minute' lets you work with the exact time of day for scheduling or logging.",
				"Using 'Second', 'Millisecond', or smaller units helps when you need precise timing in your application.",
				"Specifying 'Ticks' returns the raw tick count for very fine measurements and analysis."
			],
			"mandatory": false,
			"name": "DatePart",
			"type": "String",
			"values": [
				{
					"description": [
						"Extracts the year from the date and time input.",
						"Using the year value helps group or filter data by calendar year.",
						"Value appears as a four-digit number like 2025."
					],
					"name": "Year"
				},
				{
					"description": [
						"Extracts the month number from the date and time, where January is 1 and December is 12.",
						"Month values help sort events or data within a single year.",
						"Useful for generating monthly reports or determining seasonal patterns."
					],
					"name": "Month"
				},
				{
					"description": [
						"Extracts the day of the month from the date and time.",
						"Day values range from 1 to 31 depending on the month.",
						"Scheduling or tracking tasks on specific dates becomes easier."
					],
					"name": "Day"
				},
				{
					"description": [
						"Extracts the hour part of the time using a 24-hour clock.",
						"Hour values range from 0 to 23.",
						"This is useful when you need to trigger actions at a specific hour."
					],
					"name": "Hour"
				},
				{
					"description": [
						"Extracts the minute part of the time, ranging from 0 to 59.",
						"Using minutes allows finer-grained time schedules or logs.",
						"Combining with hours defines precise times like 14:30."
					],
					"name": "Minute"
				},
				{
					"description": [
						"Extracts the second part of the time, ranging from 0 to 59.",
						"Seconds allow tracking events at a one-second resolution.",
						"Useful for timestamping or measuring short delays."
					],
					"name": "Second"
				},
				{
					"description": [
						"Extracts the millisecond part of the time, ranging from 0 to 999.",
						"Milliseconds help measure short intervals with high precision.",
						"Essential for applications that record or analyze rapid events."
					],
					"name": "Millisecond"
				},
				{
					"description": [
						"Extracts the nanosecond component, measuring one billionth of a second.",
						"Nanoseconds provide extremely fine timing for specialized scenarios.",
						"Useful for high-resolution timestamps in scientific or performance analysis."
					],
					"name": "Nanosecond"
				},
				{
					"description": [
						"Extracts the microsecond component, measuring one millionth of a second.",
						"Microseconds allow very precise time calculations below the millisecond level.",
						"Helpful for profiling code performance or detailed logging."
					],
					"name": "Microsecond"
				},
				{
					"description": [
						"Extracts the total number of ticks from the time value, where each tick is 100 nanoseconds.",
						"Ticks provide the raw count of time intervals for maximum precision.",
						"Useful for comparing or calculating time spans at the lowest resolution."
					],
					"name": "Ticks"
				}
			]
		},
		{
			"description": [
				"Records date and time values using Coordinated Universal Time instead of the local time zone.",
				"Standardizing on UTC helps avoid errors caused by time zone differences.",
				"A universal time reference improves consistency when processing timestamps across regions."
			],
			"mandatory": false,
			"name": "Utc",
			"type": "Switch"
		},
		{
			"description": [
				"Converts date and time values into the number of seconds that have elapsed since January 1, 1970 (the Unix epoch).",
				"Epoch time is a common format for storing and comparing timestamps across systems.",
				"Using a numeric timestamp simplifies interoperability across platforms and languages."
			],
			"mandatory": false,
			"name": "UnixEpoch",
			"type": "Switch"
		},
		{
			"description": [
				"Transforms date and time values into OLE Automation Date format, which represents dates as floating-point numbers.",
				"The integer part counts days since December 30, 1899 and the fractional part represents the time of day.",
				"Many Microsoft automation tools use this format to maintain compatibility."
			],
			"mandatory": false,
			"name": "OaDate",
			"type": "Switch"
		},
		{
			"description": [
				"Returns the day number within the year for the given date and time.",
				"Day-of-year values help compute spans and filter data across an annual period.",
				"Continuous day counts support features like annual reports and milestone tracking."
			],
			"mandatory": false,
			"name": "DayOfYear",
			"type": "Switch"
		},
		{
			"description": [
				"Retrieves the day of the week for the provided date and time.",
				"Weekday information helps schedule tasks and enforce business rules.",
				"Calendar views and weekly summaries depend on accurate weekday values."
			],
			"mandatory": false,
			"name": "DayOfWeek",
			"type": "Switch"
		}
	],
	"platforms": [
		"Any"
	],
	"pluginType": "Macro",
	"protocol": {
		"apiDocumentation": "None",
		"w3c": "None"
	},
	"summary": [
		"The NewDate plugin instantly creates date and time values, including the current moment or a value shifted by an amount you choose.",
		"It can return full timestamps, individual parts such as year or minute, or special formats like Unix epoch and OLE Automation numbers.",
		"Custom formatting and a UTC switch help automations stamp logs, fill inputs, and schedule tasks without hand-written date math."
	]
}
