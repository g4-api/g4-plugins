{
	"aliases": [
		"Wait",
		"WaitForCondition"
	],
	"author": {
		"name": "Roei Sabag",
		"link": "https://www.linkedin.com/in/roei-sabag-247aa18/"
	},
	"categories": [
		"FlowControl"
	],
	"context": {
		"integration": {
			"sequentialWorkflow": {
				"componentType": "task",
				"iconProvider": "wait",
				"model": "ActionRuleModel"
			}
		}
	},
	"description": [
		"### Purpose",
		"",
		"The `WaitFlow` plugin is essential for managing the execution flow in both Robotic Process Automation (RPA) and automation testing. ",
		"Its primary objective is to pause the execution of an automation script until a specified condition is met or a timeout duration has elapsed.",
		"",
		"### Key Features and Functionality",
		"",
		"| Feature                     | Description                                                                                              |",
		"|-----------------------------|----------------------------------------------------------------------------------------------------------|",
		"| Conditional Waiting         | Waits until a specified condition is met, allowing for dynamic flow control based on runtime conditions. |",
		"| Timeout Handling            | Implements simple delays using specified timeout durations, ensuring controlled execution timing.        |",
		"| Meta Action                 | Creates, sends, and evaluates assertion plugins to determine whether to proceed based on conditions.     |",
		"| Integration with Assertions | Utilizes assertion plugins to evaluate conditions, ensuring flexible and dynamic waiting logic.          |",
		"",
		"### Usages in RPA",
		"",
		"| Usage                    | Description                                                                                        |",
		"|--------------------------|--------------------------------------------------------------------------------------------------- |",
		"| Conditional Flow Control | Pause execution until specific conditions are met, ensuring proper sequencing in automation tasks. |",
		"| Timed Delays             | Implement delays in the workflow to avoid race conditions or ensure timing between steps.          |",
		"| Dynamic Task Management  | Manage dynamic tasks that require waiting for certain conditions to be true before proceeding.     |",
		"",
		"### Usages in Automation Testing",
		"",
		"| Usage                       | Description                                                                                                           |",
		"|-----------------------------|-----------------------------------------------------------------------------------------------------------------------|",
		"| Wait for Element Visibility | Wait for elements to become visible on the page before interacting with them, ensuring stable and reliable tests.     |",
		"| Synchronization Points      | Introduce synchronization points in test scripts, waiting for specific conditions to be met before continuing.        |",
		"| Handle Asynchronous Events  | Manage asynchronous events by waiting for conditions to be met, ensuring tests adapt to dynamic application behavior. |"
	],
	"examples": [
		{
			"description": [
				"Wait for the element with the CSS selector `#loading` to become visible, with a maximum timeout of 10 seconds."
			],
			"rule": {
				"argument": "{{$ --Condition:ElementVisible --Timeout:10000}}",
				"locator": "CssSelector",
				"onElement": "#loading",
				"pluginName": "WaitFlow"
			}
		},
		{
			"description": [
				"Pause execution for 5 seconds before proceeding to the next action."
			],
			"rule": {
				"argument": "00:00:05",
				"pluginName": "WaitFlow"
			}
		},
		{
			"description": [
				"Wait for the attribute `class` of the element with the XPath `//div[@id='status']` to match the regular expression `completed`, with a timeout of 15 seconds."
			],
			"rule": {
				"argument": "{{$ --Condition:ElementAttribute --Operator:Match --Expected:completed --Timeout:15000}}",
				"locator": "XPath",
				"onAttribute": "class",
				"onElement": "//div[@id='status']",
				"pluginName": "WaitFlow"
			}
		},
		{
			"description": [
				"Wait for a specific text `Success` to be present in the element with the CSS selector `#result` before proceeding."
			],
			"rule": {
				"argument": "{{$ --Condition:ElementText --Operator:Equal --Expected:Success}}",
				"locator": "CssSelector",
				"onElement": "#result",
				"pluginName": "WaitFlow"
			}
		},
		{
			"description": [
				"Pause execution for 3 seconds before proceeding to the next action."
			],
			"rule": {
				"argument": "3000",
				"pluginName": "WaitFlow"
			}
		}
	],
	"key": "WaitFlow",
	"manifestVersion": 4,
	"parameters": [
		{
			"description": [
				"Specifies the criteria or state that must be evaluated or met during the execution of a plugin or action."
			],
			"mandatory": false,
			"name": "Condition",
			"type": "Assertion"
		},
		{
			"description": [
				"Specifies the value or pattern that the automation script expects to find or match during the execution of a condition."
			],
			"mandatory": false,
			"name": "Expected"
		},
		{
			"description": [
				"Specifies the type of comparison or operation to be performed when evaluating a condition."
			],
			"mandatory": false,
			"name": "Operator",
			"type": "Operator"
		},
		{
			"description": [
				"Specifies the maximum duration the automation script should wait for a condition to be met before proceeding with the next step, after which it will terminate."
			],
			"mandatory": false,
			"name": "Timeout",
			"type": "Number|Time"
		}
	],
	"pluginType": "Action",
	"properties": [
		{
			"description": [
				"Defines the duration to wait or the condition to evaluate, based on the type of wait specified. For time-based waits, it takes a `TimeSpan` format. For condition-based waits, it specifies the condition and parameters."
			],
			"mandatory": true,
			"name": "Argument",
			"type": "Number|Expression"
		},
		{
			"default": "Xpath",
			"description": [
				"Specifies how elements should be located on a webpage or within an application."
			],
			"mandatory": false,
			"name": "Locator",
			"type": "String"
		},
		{
			"description": [
				"Specifies the attribute of the target element that will be interacted with or evaluated during automation."
			],
			"mandatory": false,
			"name": "OnAttribute",
			"type": "String"
		},
		{
			"description": [
				"Specifies the target element on which conditions will be evaluated during the automation process."
			],
			"mandatory": false,
			"name": "OnElement",
			"type": "String"
		}
	],
	"protocol": {
		"apiDocumentation": "None",
		"w3c": "None"
	},
	"scopes": [
		"Any"
	],
	"summary": [
		"The `WaitFlow` plugin pauses the execution of an automation script until a specified condition is met or a timeout duration has elapsed, providing essential flow control in RPA and automation testing.",
		"It supports conditional waiting and timeout handling, allowing for dynamic flow control based on runtime conditions and ensuring controlled execution timing.",
		"Key features include conditional waiting, timeout handling, and integration with assertion plugins for flexible and dynamic waiting logic.",
		"Common use cases include conditional flow control, timed delays, dynamic task management in RPA, waiting for element visibility, synchronization points, and handling asynchronous events in automation testing."
	]
}
