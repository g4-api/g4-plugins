{
	"aliases": [
		"InvokeWebRequest",
		"SendWebRequest"
	],
	"author": {
		"name": "Roei Sabag",
		"link": "https://www.linkedin.com/in/roei-sabag-247aa18/"
	},
	"categories": [
		"Http"
	],
	"context": {
		"integration": {
			"sequentialWorkflow": {
				"$type": "Action",
				"componentType": "task",
				"iconProvider": "http",
				"model": "ActionRuleModel"
			}
		}
	},
	"description": [
		"### Purpose",
		"",
		"The SendHttpRequest plugin automates sending HTTP requests to web services and REST APIs. ",
		"It lets users choose the HTTP method (GET, POST, PUT, DELETE, PATCH, or any other supported method) and set the request URL at run time. ",
		"It also lets users customize headers, body content, and query parameters. ",
		"",
		"### Key Features and Functionality",
		"",
		"| Feature                  | Description                                                                                   |",
		"|--------------------------|-----------------------------------------------------------------------------------------------|",
		"| HTTP Method Selection    | Choose methods like GET, POST, PUT, DELETE, PATCH, or any HttpMethod plugin type at run time. |",
		"| URL Configuration        | Set the request URL dynamically during execution.                                             |",
		"| Custom Headers & Payload | Define headers, body content, and query parameters for each request.                          |",
		"",
		"### Usages in RPA",
		"",
		"| Use Case                | Description                                                 |",
		"|-------------------------|-------------------------------------------------------------|",
		"| Web Service Integration | Let robots connect to external APIs to get or send data.    |",
		"| Workflow Orchestration  | Use API calls alongside other automation steps in one flow. |",
		"",
		"### Usages in Automation Testing",
		"",
		"| Use Case          | Description                                                         |",
		"|-------------------|---------------------------------------------------------------------|",
		"| API Testing       | Send different requests to check API behavior and validate results. |",
		"| Data Verification | Fetch data from services and compare it with expected values.       |",
		"| Load Testing      | Send many requests at once to see how the system handles traffic.   |"
	],
	"examples": [
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid URL format",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Method argument",
						"Missing --Url argument",
						"Network error or timeout",
						"Unexpected HTTP status code",
						"Unsupported pluginName value",
						"Unsupported or missing JSONPath/XPath expression",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "An HTTP GET request is sent to `https://api.example.com/v1/items/search?category=Electronics` and the full JSON response is returned.",
					"notes": "Sends an HTTP GET request and returns the raw response.",
					"test_case": "send_http_request_get_full_response",
					"version": "1.0"
				},
				"labels": [
					"HttpRequest",
					"ResponseRetrieval",
					"SendHttpRequest"
				]
			},
			"description": [
				"### SendHttpRequest: GET Full Response",
				"",
				"This example demonstrates how to send an HTTP GET request to `https://api.example.com/v1/items/search?category=Electronics` using the `SendHttpRequest` plugin to retrieve the full JSON response.",
				"After execution, the entire JSON payload is available for subsequent extraction or validation."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items/search?category=Electronics --Method:Get}}",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid URL format",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Method argument",
						"Missing --Url argument",
						"Missing regularExpression argument",
						"No regex match",
						"Network error or timeout",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The `resultCount` field is extracted from the JSON response and returned as a numeric value.",
					"notes": "Applies a regex to the JSON response body to extract the `resultCount` value.",
					"test_case": "send_http_request_get_resultcount_with_regex",
					"version": "1.0"
				},
				"labels": [
					"HttpRequest",
					"RegexValidation",
					"ResponseRetrieval",
					"SendHttpRequest"
				]
			},
			"description": [
				"### SendHttpRequest: Extract resultCount via Regex",
				"",
				"This example demonstrates how to send an HTTP GET request to `https://api.example.com/v1/items/search?category=Electronics` and apply the regex `(?<=\\\"resultCount\\\":)\\d+` to the response body to extract the `resultCount` value.",
				"After execution, the extracted count is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items/search?category=Electronics --Method:Get}}",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=\\\"resultCount\\\":)\\d+"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid onElement expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Method argument",
						"Missing --Url argument",
						"Network error or timeout",
						"No matching element in XML response",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The first `<Item>` element with `stockAvailable='true'` is returned.",
					"notes": "Selects the first in-stock item element from the XML response.",
					"test_case": "send_http_request_get_first_instock_xml_element",
					"version": "1.0"
				},
				"labels": [
					"HttpRequest",
					"ResponseElementExtraction",
					"SendHttpRequest",
					"XPathExtraction"
				]
			},
			"description": [
				"### SendHttpRequest: Extract First In-Stock XML Element",
				"",
				"This example demonstrates how to send an HTTP GET request to `https://api.example.com/v1/items/search?category=Electronics` and use the XPath `(//Item[@stockAvailable='true'])[1]` to select the first in-stock `<Item>` element from the XML response.",
				"After execution, that element is available for further attribute or content extraction."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items/search?category=Electronics --Method:Get}}",
				"onElement": "(//Item[@stockAvailable='true'])[1]",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid onElement expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Method argument",
						"Missing --Url argument",
						"Missing regularExpression argument",
						"No regex match",
						"Network error or timeout",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The `name` attribute of the first in-stock `<Item>` element is extracted.",
					"notes": "Applies a regex to the XML element string to extract the item name.",
					"test_case": "send_http_request_get_first_instock_name_with_regex",
					"version": "1.0"
				},
				"labels": [
					"HttpRequest",
					"RegexValidation",
					"ResponseElementExtraction",
					"SendHttpRequest",
					"XPathExtraction"
				]
			},
			"description": [
				"### SendHttpRequest: Extract In-Stock Item Name via Regex",
				"",
				"This example demonstrates how to send an HTTP GET request to `https://api.example.com/v1/items/search?category=Electronics`, select the first in-stock `<Item>` element using XPath `(//Item[@stockAvailable='true'])[1]`, and apply the regex `(?<=name=\")[^\"]+` to extract its `name` attribute.",
				"After execution, the extracted name is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items/search?category=Electronics --Method:Get}}",
				"onElement": "(//Item[@stockAvailable='true'])[1]",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=name=\")[^\"]+"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid JSONPath expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Method argument",
						"Missing --Url argument",
						"Network error or timeout",
						"No matching items in JSON response",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "All items with `stockAvailable==true` are returned as a JSON array.",
					"notes": "Selects in-stock items using a JSONPath filter.",
					"test_case": "send_http_request_get_all_instock_jsonpath",
					"version": "1.0"
				},
				"labels": [
					"HttpRequest",
					"JsonPathExtraction",
					"ResponseElementExtraction",
					"SendHttpRequest"
				]
			},
			"description": [
				"### SendHttpRequest: Extract All In-Stock Items via JSONPath",
				"",
				"This example demonstrates how to send an HTTP GET request to `https://api.example.com/v1/items/search?category=Electronics` and use the JSONPath `$.items[?(@.stockAvailable==true)]` to select all in-stock items from the JSON response.",
				"After execution, the filtered array is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items/search?category=Electronics --Method:Get}}",
				"onElement": "$.items[?(@.stockAvailable==true)]",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid JSONPath expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Method argument",
						"Missing --Url argument",
						"Network error or timeout",
						"Index out of bounds",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The first item in the `items` array is returned.",
					"notes": "Selects the first item using JSONPath index.",
					"test_case": "send_http_request_get_first_item_jsonpath",
					"version": "1.0"
				},
				"labels": [
					"HttpRequest",
					"JsonPathExtraction",
					"ResponseElementExtraction",
					"SendHttpRequest"
				]
			},
			"description": [
				"### SendHttpRequest: Extract First Item via JSONPath",
				"",
				"This example demonstrates how to send an HTTP GET request to `https://api.example.com/v1/items/search?category=Electronics` and use the JSONPath `$.items[0]` to select the first item from the JSON response.",
				"After execution, that object is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items/search?category=Electronics --Method:Get}}",
				"onElement": "$.items[0]",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid XPath expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Method argument",
						"Missing --Url argument",
						"Network error or timeout",
						"No matching element in XML response",
						"Missing onAttribute argument",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The `price` attribute of the first in-stock `<Item>` element is returned.",
					"notes": "Extracts an attribute from an XML element.",
					"test_case": "send_http_request_get_first_instock_price_attribute",
					"version": "1.0"
				},
				"labels": [
					"HttpRequest",
					"ResponseAttributeExtraction",
					"SendHttpRequest",
					"XPathExtraction"
				]
			},
			"description": [
				"### SendHttpRequest: Extract First In-Stock Item Price Attribute",
				"",
				"This example demonstrates how to send an HTTP GET request to `https://api.example.com/v1/items/search?category=Electronics`, select the first in-stock `<Item>` element using XPath `(//Item[@stockAvailable='true'])[1]`, and extract its `price` attribute.",
				"After execution, the price value is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items/search?category=Electronics --Method:Get}}",
				"onAttribute": "price",
				"onElement": "(//Item[@stockAvailable='true'])[1]",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid XPath expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Method argument",
						"Missing --Url argument",
						"Missing regularExpression argument",
						"No regex match",
						"Network error or timeout",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The numeric `id` attribute of the first in-stock `<Item>` element is extracted.",
					"notes": "Applies a regex to an attribute value to extract digits.",
					"test_case": "send_http_request_get_first_instock_id_with_regex",
					"version": "1.0"
				},
				"labels": [
					"HttpRequest",
					"RegexValidation",
					"ResponseAttributeExtraction",
					"SendHttpRequest",
					"XPathExtraction"
				]
			},
			"description": [
				"### SendHttpRequest: Extract First In-Stock Item ID via Regex",
				"",
				"This example demonstrates how to send an HTTP GET request to `https://api.example.com/v1/items/search?category=Electronics`, select the first in-stock `<Item>` element using XPath `(//Item[@stockAvailable='true'])[1]`, and apply the regex `\\d+` to its `id` attribute to extract digits.",
				"After execution, the extracted ID is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items/search?category=Electronics --Method:Get}}",
				"onAttribute": "id",
				"onElement": "(//Item[@stockAvailable='true'])[1]",
				"pluginName": "SendHttpRequest",
				"regularExpression": "\\d+"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid URL format",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Header argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Network error or timeout",
						"Unexpected HTTP status code",
						"Unsupported pluginName value",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "An HTTP GET request with Basic authentication is sent to `https://api.example.com/v1/items/search?category=Electronics` and the full JSON response is returned.",
					"notes": "Sends an authenticated HTTP GET request and returns the raw response.",
					"test_case": "send_http_request_get_full_response_with_header",
					"version": "1.0"
				},
				"labels": [
					"HeaderManagement",
					"HttpRequest",
					"ResponseRetrieval",
					"SendHttpRequest"
				]
			},
			"description": [
				"### SendHttpRequest: GET Full Response with Authorization Header",
				"",
				"This example demonstrates how to send an HTTP GET request to `https://api.example.com/v1/items/search?category=Electronics` using the `SendHttpRequest` plugin with the header `Authorization: Basic username:password` to retrieve the full JSON response.",
				"After execution, the entire JSON payload is available for subsequent extraction or validation."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items/search?category=Electronics --Header:Authorization=Basic username:password --Method:Get}}",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid URL format",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Header argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Missing regularExpression argument",
						"No regex match",
						"Network error or timeout",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The `resultCount` field is extracted from the authenticated JSON response and returned as a numeric value.",
					"notes": "Applies a regex to the JSON response body to extract the `resultCount` value.",
					"test_case": "send_http_request_get_resultcount_with_regex_and_header",
					"version": "1.0"
				},
				"labels": [
					"HeaderManagement",
					"HttpRequest",
					"RegexValidation",
					"ResponseRetrieval",
					"SendHttpRequest"
				]
			},
			"description": [
				"### SendHttpRequest: Extract resultCount via Regex with Authorization Header",
				"",
				"This example demonstrates how to send an HTTP GET request to `https://api.example.com/v1/items/search?category=Electronics` with the header `Authorization: Basic username:password` and apply the regex `(?<=\\\"resultCount\\\":)\\d+` to the response body to extract the `resultCount` value.",
				"After execution, the extracted count is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items/search?category=Electronics --Header:Authorization=Basic username:password --Method:Get}}",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=\\\"resultCount\\\":)\\d+"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid onElement expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Header argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Network error or timeout",
						"No matching element in XML response",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The first `<Item>` element with `stockAvailable='true'` is returned from the authenticated XML response.",
					"notes": "Selects the first in-stock item element from the XML response.",
					"test_case": "send_http_request_get_first_instock_xml_element_with_header",
					"version": "1.0"
				},
				"labels": [
					"HeaderManagement",
					"HttpRequest",
					"ResponseElementExtraction",
					"SendHttpRequest",
					"XPathExtraction"
				]
			},
			"description": [
				"### SendHttpRequest: Extract First In-Stock XML Element with Authorization Header",
				"",
				"This example demonstrates how to send an HTTP GET request to `https://api.example.com/v1/items/search?category=Electronics` with the header `Authorization: Basic username:password` and use the XPath `(//Item[@stockAvailable='true'])[1]` to select the first in-stock `<Item>` element from the XML response.",
				"After execution, that element is available for further attribute or content extraction."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items/search?category=Electronics --Header:Authorization=Basic username:password --Method:Get}}",
				"onElement": "(//Item[@stockAvailable='true'])[1]",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid onElement expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Header argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Missing regularExpression argument",
						"No regex match",
						"Network error or timeout",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The `name` attribute of the first in-stock `<Item>` element is extracted from the authenticated XML response.",
					"notes": "Applies a regex to the XML element string to extract the item name.",
					"test_case": "send_http_request_get_first_instock_name_with_regex_and_header",
					"version": "1.0"
				},
				"labels": [
					"HeaderManagement",
					"HttpRequest",
					"RegexValidation",
					"ResponseElementExtraction",
					"SendHttpRequest",
					"XPathExtraction"
				]
			},
			"description": [
				"### SendHttpRequest: Extract In-Stock Item Name via Regex with Authorization Header",
				"",
				"This example demonstrates how to send an HTTP GET request to `https://api.example.com/v1/items/search?category=Electronics` with the header `Authorization: Basic username:password`, select the first in-stock `<Item>` element using XPath `(//Item[@stockAvailable='true'])[1]`, and apply the regex `(?<=name=\")[^\"]+` to extract its `name` attribute.",
				"After execution, the extracted name is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items/search?category=Electronics --Header:Authorization=Basic username:password --Method:Get}}",
				"onElement": "(//Item[@stockAvailable='true'])[1]",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=name=\")[^\"]+"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid JSONPath expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Header argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Network error or timeout",
						"No matching items in JSON response",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "All items with `stockAvailable==true` are returned as a JSON array from the authenticated response.",
					"notes": "Selects in-stock items using a JSONPath filter.",
					"test_case": "send_http_request_get_all_instock_jsonpath_with_header",
					"version": "1.0"
				},
				"labels": [
					"HeaderManagement",
					"HttpRequest",
					"JsonPathExtraction",
					"ResponseElementExtraction",
					"SendHttpRequest"
				]
			},
			"description": [
				"### SendHttpRequest: Extract All In-Stock Items via JSONPath with Authorization Header",
				"",
				"This example demonstrates how to send an HTTP GET request to `https://api.example.com/v1/items/search?category=Electronics` with the header `Authorization: Basic username:password` and use the JSONPath `$.items[?(@.stockAvailable==true)]` to select all in-stock items from the JSON response.",
				"After execution, the filtered array is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items/search?category=Electronics --Header:Authorization=Basic username:password --Method:Get}}",
				"onElement": "$.items[?(@.stockAvailable==true)]",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid JSONPath expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Header argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Network error or timeout",
						"Index out of bounds",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The first item in the `items` array is returned from the authenticated JSON response.",
					"notes": "Selects the first item using JSONPath index.",
					"test_case": "send_http_request_get_first_item_jsonpath_with_header",
					"version": "1.0"
				},
				"labels": [
					"HeaderManagement",
					"HttpRequest",
					"JsonPathExtraction",
					"ResponseElementExtraction",
					"SendHttpRequest"
				]
			},
			"description": [
				"### SendHttpRequest: Extract First Item via JSONPath with Authorization Header",
				"",
				"This example demonstrates how to send an HTTP GET request to `https://api.example.com/v1/items/search?category=Electronics` with the header `Authorization: Basic username:password` and use the JSONPath `$.items[0]` to select the first item from the JSON response.",
				"After execution, that object is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items/search?category=Electronics --Header:Authorization=Basic username:password --Method:Get}}",
				"onElement": "$.items[0]",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid XPath expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Header argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Network error or timeout",
						"No matching element in XML response",
						"Missing onAttribute argument",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The `price` attribute of the first in-stock `<Item>` element is returned from the authenticated XML response.",
					"notes": "Extracts an attribute from an XML element.",
					"test_case": "send_http_request_get_first_instock_price_attribute_with_header",
					"version": "1.0"
				},
				"labels": [
					"HeaderManagement",
					"HttpRequest",
					"ResponseAttributeExtraction",
					"SendHttpRequest",
					"XPathExtraction"
				]
			},
			"description": [
				"### SendHttpRequest: Extract First In-Stock Item Price Attribute with Authorization Header",
				"",
				"This example demonstrates how to send an HTTP GET request to `https://api.example.com/v1/items/search?category=Electronics` with the header `Authorization: Basic username:password`, select the first in-stock `<Item>` element using XPath `(//Item[@stockAvailable='true'])[1]`, and extract its `price` attribute.",
				"After execution, the price value is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items/search?category=Electronics --Header:Authorization=Basic username:password --Method:Get}}",
				"onAttribute": "price",
				"onElement": "(//Item[@stockAvailable='true'])[1]",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid XPath expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Header argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Missing regularExpression argument",
						"No regex match",
						"Network error or timeout",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The numeric `id` attribute of the first in-stock `<Item>` element is extracted from the authenticated XML response.",
					"notes": "Applies a regex to an attribute value to extract digits.",
					"test_case": "send_http_request_get_first_instock_id_with_regex_and_header",
					"version": "1.0"
				},
				"labels": [
					"HeaderManagement",
					"HttpRequest",
					"RegexValidation",
					"ResponseAttributeExtraction",
					"SendHttpRequest",
					"XPathExtraction"
				]
			},
			"description": [
				"### SendHttpRequest: Extract First In-Stock Item ID via Regex with Authorization Header",
				"",
				"This example demonstrates how to send an HTTP GET request to `https://api.example.com/v1/items/search?category=Electronics` with the header `Authorization: Basic username:password`, select the first in-stock `<Item>` element using XPath `(//Item[@stockAvailable='true'])[1]`, and apply the regex `\\d+` to its `id` attribute to extract digits.",
				"After execution, the extracted ID is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items/search?category=Electronics --Header:Authorization=Basic username:password --Method:Get}}",
				"onAttribute": "id",
				"onElement": "(//Item[@stockAvailable='true'])[1]",
				"pluginName": "SendHttpRequest",
				"regularExpression": "\\d+"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid URL format",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Header argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Network error or timeout",
						"Unexpected HTTP status code",
						"Unsupported pluginName value",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "An HTTP GET request with Bearer token and custom UserAgent header is sent to `https://api.example.com/v1/items/search?category=Electronics` and the full JSON response is returned.",
					"notes": "Sends an authenticated HTTP GET request with multiple headers and returns the raw response.",
					"test_case": "send_http_request_get_full_response_with_multiple_headers",
					"version": "1.0"
				},
				"labels": [
					"HeaderManagement",
					"HttpRequest",
					"ResponseRetrieval",
					"SendHttpRequest"
				]
			},
			"description": [
				"### SendHttpRequest: GET Full Response with Multiple Headers",
				"",
				"This example demonstrates how to send an HTTP GET request to `https://api.example.com/v1/items/search?category=Electronics` using the `SendHttpRequest` plugin with headers `Authorization: Bearer YourAccessToken` and `UserAgent: MyCustomUserAgent` to retrieve the full JSON response.",
				"After execution, the entire JSON payload is available for subsequent extraction or validation."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items/search?category=Electronics --Header:Authorization=Bearer YourAccessToken --Header:UserAgent=MyCustomUserAgent --Method:Get}}",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid URL format",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Header argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Missing regularExpression argument",
						"No regex match",
						"Network error or timeout",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The `resultCount` field is extracted from the authenticated JSON response and returned as a numeric value.",
					"notes": "Applies a regex to the JSON response body to extract the `resultCount` value.",
					"test_case": "send_http_request_get_resultcount_with_regex_and_multiple_headers",
					"version": "1.0"
				},
				"labels": [
					"HeaderManagement",
					"HttpRequest",
					"RegexValidation",
					"ResponseRetrieval",
					"SendHttpRequest"
				]
			},
			"description": [
				"### SendHttpRequest: Extract resultCount via Regex with Multiple Headers",
				"",
				"This example demonstrates how to send an HTTP GET request to `https://api.example.com/v1/items/search?category=Electronics` with headers `Authorization: Bearer YourAccessToken` and `UserAgent: MyCustomUserAgent`, and apply the regex `(?<=\\\"resultCount\\\":)\\d+` to the response body to extract the `resultCount` value.",
				"After execution, the extracted count is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items/search?category=Electronics --Header:Authorization=Bearer YourAccessToken --Header:UserAgent=MyCustomUserAgent --Method:Get}}",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=\\\"resultCount\\\":)\\d+"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid onElement expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Header argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Network error or timeout",
						"No matching element in XML response",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The first `<Item>` element with `stockAvailable='true'` is returned from the authenticated XML response.",
					"notes": "Selects the first in-stock item element from the XML response.",
					"test_case": "send_http_request_get_first_instock_xml_element_with_multiple_headers",
					"version": "1.0"
				},
				"labels": [
					"HeaderManagement",
					"HttpRequest",
					"ResponseElementExtraction",
					"SendHttpRequest",
					"XPathExtraction"
				]
			},
			"description": [
				"### SendHttpRequest: Extract First In-Stock XML Element with Multiple Headers",
				"",
				"This example demonstrates how to send an HTTP GET request to `https://api.example.com/v1/items/search?category=Electronics` with headers `Authorization: Bearer YourAccessToken` and `UserAgent: MyCustomUserAgent`, and use the XPath `(//Item[@stockAvailable='true'])[1]` to select the first in-stock `<Item>` element from the XML response.",
				"After execution, that element is available for further attribute or content extraction."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items/search?category=Electronics --Header:Authorization=Bearer YourAccessToken --Header:UserAgent=MyCustomUserAgent --Method:Get}}",
				"onElement": "(//Item[@stockAvailable='true'])[1]",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid onElement expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Header argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Missing regularExpression argument",
						"No regex match",
						"Network error or timeout",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The `name` attribute of the first in-stock `<Item>` element is extracted from the authenticated XML response.",
					"notes": "Applies a regex to the XML element string to extract the item name.",
					"test_case": "send_http_request_get_first_instock_name_with_regex_and_multiple_headers",
					"version": "1.0"
				},
				"labels": [
					"HeaderManagement",
					"HttpRequest",
					"RegexValidation",
					"ResponseElementExtraction",
					"SendHttpRequest",
					"XPathExtraction"
				]
			},
			"description": [
				"### SendHttpRequest: Extract In-Stock Item Name via Regex with Multiple Headers",
				"",
				"This example demonstrates how to send an HTTP GET request to `https://api.example.com/v1/items/search?category=Electronics` with headers `Authorization: Bearer YourAccessToken` and `UserAgent: MyCustomUserAgent`, select the first in-stock `<Item>` element using XPath `(//Item[@stockAvailable='true'])[1]`, and apply the regex `(?<=name=\")[^\"]+` to extract its `name` attribute.",
				"After execution, the extracted name is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items/search?category=Electronics --Header:Authorization=Bearer YourAccessToken --Header:UserAgent=MyCustomUserAgent --Method:Get}}",
				"onElement": "(//Item[@stockAvailable='true'])[1]",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=name=\")[^\"]+"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid JSONPath expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Header argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Network error or timeout",
						"No matching items in JSON response",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "All items with `stockAvailable==true` are returned as a JSON array from the authenticated response.",
					"notes": "Selects in-stock items using a JSONPath filter.",
					"test_case": "send_http_request_get_all_instock_jsonpath_with_multiple_headers",
					"version": "1.0"
				},
				"labels": [
					"HeaderManagement",
					"HttpRequest",
					"JsonPathExtraction",
					"ResponseElementExtraction",
					"SendHttpRequest"
				]
			},
			"description": [
				"### SendHttpRequest: Extract All In-Stock Items via JSONPath with Multiple Headers",
				"",
				"This example demonstrates how to send an HTTP GET request to `https://api.example.com/v1/items/search?category=Electronics` with headers `Authorization: Bearer YourAccessToken` and `UserAgent: MyCustomUserAgent`, and use the JSONPath `$.items[?(@.stockAvailable==true)]` to select all in-stock items from the JSON response.",
				"After execution, the filtered array is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items/search?category=Electronics --Header:Authorization=Bearer YourAccessToken --Header:UserAgent=MyCustomUserAgent --Method:Get}}",
				"onElement": "$.items[?(@.stockAvailable==true)]",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid JSONPath expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Header argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Network error or timeout",
						"Index out of bounds",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The first item in the `items` array is returned from the authenticated JSON response.",
					"notes": "Selects the first item using JSONPath index.",
					"test_case": "send_http_request_get_first_item_jsonpath_with_multiple_headers",
					"version": "1.0"
				},
				"labels": [
					"HeaderManagement",
					"HttpRequest",
					"JsonPathExtraction",
					"ResponseElementExtraction",
					"SendHttpRequest"
				]
			},
			"description": [
				"### SendHttpRequest: Extract First Item via JSONPath with Multiple Headers",
				"",
				"This example demonstrates how to send an HTTP GET request to `https://api.example.com/v1/items/search?category=Electronics` with headers `Authorization: Bearer YourAccessToken` and `UserAgent: MyCustomUserAgent`, and use the JSONPath `$.items[0]` to select the first item from the JSON response.",
				"After execution, that object is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items/search?category=Electronics --Header:Authorization=Bearer YourAccessToken --Header:UserAgent=MyCustomUserAgent --Method:Get}}",
				"onElement": "$.items[0]",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid XPath expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Header argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Network error or timeout",
						"No matching element in XML response",
						"Missing onAttribute argument",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The `price` attribute of the first in-stock `<Item>` element is returned from the authenticated XML response.",
					"notes": "Extracts an attribute from an XML element.",
					"test_case": "send_http_request_get_first_instock_price_attribute_with_multiple_headers",
					"version": "1.0"
				},
				"labels": [
					"HeaderManagement",
					"HttpRequest",
					"ResponseAttributeExtraction",
					"SendHttpRequest",
					"XPathExtraction"
				]
			},
			"description": [
				"### SendHttpRequest: Extract First In-Stock Item Price Attribute with Multiple Headers",
				"",
				"This example demonstrates how to send an HTTP GET request to `https://api.example.com/v1/items/search?category=Electronics` with headers `Authorization: Bearer YourAccessToken` and `UserAgent: MyCustomUserAgent`, select the first in-stock `<Item>` element using XPath `(//Item[@stockAvailable='true'])[1]`, and extract its `price` attribute.",
				"After execution, the price value is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items/search?category=Electronics --Header:Authorization=Bearer YourAccessToken --Header:UserAgent=MyCustomUserAgent --Method:Get}}",
				"onAttribute": "price",
				"onElement": "(//Item[@stockAvailable='true'])[1]",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid XPath expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Header argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Missing regularExpression argument",
						"No regex match",
						"Network error or timeout",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The numeric `id` attribute of the first in-stock `<Item>` element is extracted from the authenticated XML response.",
					"notes": "Applies a regex to an attribute value to extract digits.",
					"test_case": "send_http_request_get_first_instock_id_with_regex_and_multiple_headers",
					"version": "1.0"
				},
				"labels": [
					"HeaderManagement",
					"HttpRequest",
					"RegexValidation",
					"ResponseAttributeExtraction",
					"SendHttpRequest",
					"XPathExtraction"
				]
			},
			"description": [
				"### SendHttpRequest: Extract First In-Stock Item ID via Regex with Multiple Headers",
				"",
				"This example demonstrates how to send an HTTP GET request to `https://api.example.com/v1/items/search?category=Electronics` with headers `Authorization: Bearer YourAccessToken` and `UserAgent: MyCustomUserAgent`, select the first in-stock `<Item>` element using XPath `(//Item[@stockAvailable='true'])[1]`, and apply the regex `\\d+` to its `id` attribute to extract digits.",
				"After execution, the extracted ID is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items/search?category=Electronics --Header:Authorization=Bearer YourAccessToken --Header:UserAgent=MyCustomUserAgent --Method:Get}}",
				"onAttribute": "id",
				"onElement": "(//Item[@stockAvailable='true'])[1]",
				"pluginName": "SendHttpRequest",
				"regularExpression": "\\d+"
			}
		},

		// POST
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid URL format",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Network error or timeout",
						"Unexpected HTTP status code",
						"Unsupported pluginName value",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "An HTTP POST request with the JSON body is sent to `https://api.example.com/v1/items` and the full JSON response is returned.",
					"notes": "Sends an HTTP POST request with a JSON body and returns the raw response.",
					"test_case": "send_http_request_post_full_response_with_body",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"HttpRequest",
					"ResponseRetrieval",
					"SendHttpRequest"
				]
			},
			"description": [
				"### SendHttpRequest: POST Full Response with JSON Body",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` using the `SendHttpRequest` plugin with the JSON body `{\"name\":\"Premium Widget\",\"price\":99.99}` to retrieve the full JSON response.",
				"After execution, the entire JSON payload is available for subsequent extraction or validation."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Method:Post}}",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid URL format",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Missing regularExpression argument",
						"No regex match",
						"Network error or timeout",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The `message` field is extracted from the JSON response and returned as text.",
					"notes": "Applies a regex to the JSON response body to extract the `message` value.",
					"test_case": "send_http_request_post_message_with_regex",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"HttpRequest",
					"RegexValidation",
					"ResponseRetrieval",
					"SendHttpRequest"
				]
			},
			"description": [
				"### SendHttpRequest: Extract message via Regex with JSON Body",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` with the JSON body `{\"name\":\"Premium Widget\",\"price\":99.99}` and apply the regex `(?<=\"message\":\")[^\"]+` to the response body to extract the `message` value.",
				"After execution, the extracted message is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Method:Post}}",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=\"message\":\")[^\"]+"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid JSONPath expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Network error or timeout",
						"No matching path in JSON response",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The `updatedItem` object is selected from the JSON response.",
					"notes": "Selects the `updatedItem` object using JSONPath.",
					"test_case": "send_http_request_post_select_updateditem_jsonpath",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"HttpRequest",
					"JsonPathExtraction",
					"ResponseElementExtraction",
					"SendHttpRequest"
				]
			},
			"description": [
				"### SendHttpRequest: Select updatedItem via JSONPath with JSON Body",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` with the JSON body `{\"name\":\"Premium Widget\",\"price\":99.99}` and use the JSONPath `$.updatedItem` to select the `updatedItem` object from the response.",
				"After execution, that object is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Method:Post}}",
				"onElement": "$.updatedItem",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid JSONPath expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Missing regularExpression argument",
						"No regex match",
						"Network error or timeout",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The numeric `id` field of `updatedItem` is extracted.",
					"notes": "Applies a regex to the JSON response to extract the `id` value.",
					"test_case": "send_http_request_post_id_with_regex_on_jsonpath",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"HttpRequest",
					"JsonPathExtraction",
					"RegexValidation",
					"ResponseElementExtraction",
					"SendHttpRequest"
				]
			},
			"description": [
				"### SendHttpRequest: Extract updatedItem ID via Regex with JSON Body",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` with the JSON body `{\"name\":\"Premium Widget\",\"price\":99.99}`, select the `updatedItem` object using JSONPath `$.updatedItem`, and apply the regex `(?<=\"id\":)\\d+` to extract its `id` value.",
				"After execution, the extracted ID is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Method:Post}}",
				"onElement": "$.updatedItem",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=\"id\":)\\d+"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid XPath expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Network error or timeout",
						"No matching element in XML response",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The `<Status>` element text is returned.",
					"notes": "Selects the `<Status>` element from XML response.",
					"test_case": "send_http_request_post_status_text_xpath",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"HttpRequest",
					"ResponseElementExtraction",
					"SendHttpRequest",
					"XPathExtraction"
				]
			},
			"description": [
				"### SendHttpRequest: Extract Status Text via XPath with JSON Body",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` with the JSON body `{\"name\":\"Premium Widget\",\"price\":99.99}` and use the XPath `//Status` to select the `<Status>` element text from the XML response.",
				"After execution, that text is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Method:Post}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid XPath expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Missing regularExpression argument",
						"No regex match",
						"Network error or timeout",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The `<Status>` element text is extracted via regex.",
					"notes": "Applies a regex to the XML element text to extract content.",
					"test_case": "send_http_request_post_status_text_with_regex_xpath",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"HttpRequest",
					"RegexValidation",
					"ResponseElementExtraction",
					"SendHttpRequest",
					"XPathExtraction"
				]
			},
			"description": [
				"### SendHttpRequest: Extract Status Text via Regex with JSON Body",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` with the JSON body `{\"name\":\"Premium Widget\",\"price\":99.99}`, select the `<Status>` element using XPath `//Status`, and apply the regex `(?<=<Status>).*?(?=</Status>)` to extract its text.",
				"After execution, the extracted text is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Method:Post}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=<Status>).*?(?=</Status>)"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid XPath expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Missing onAttribute argument",
						"Network error or timeout",
						"No matching element in XML response",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The `status` attribute of `<Response>` is returned.",
					"notes": "Extracts an attribute from an XML element.",
					"test_case": "send_http_request_post_response_status_attribute",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"HttpRequest",
					"ResponseAttributeExtraction",
					"SendHttpRequest",
					"XPathExtraction"
				]
			},
			"description": [
				"### SendHttpRequest: Extract Response status Attribute with JSON Body",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` with the JSON body `{\"name\":\"Premium Widget\",\"price\":99.99}`, select the `<Response>` element using XPath `//Response`, and extract its `status` attribute.",
				"After execution, the attribute value is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Method:Post}}",
				"onAttribute": "status",
				"onElement": "//Response",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid XPath expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Missing onAttribute argument",
						"Missing regularExpression argument",
						"No regex match",
						"Network error or timeout",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The `status` attribute of `<Response>` is extracted via regex.",
					"notes": "Applies a regex to an attribute value to extract 'success' or 'failure'.",
					"test_case": "send_http_request_post_response_status_with_regex_and_body",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"HttpRequest",
					"RegexValidation",
					"ResponseAttributeExtraction",
					"SendHttpRequest",
					"XPathExtraction"
				]
			},
			"description": [
				"### SendHttpRequest: Extract Response status via Regex with JSON Body",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` with the JSON body `{\"name\":\"Premium Widget\",\"price\":99.99}`, select the `<Response>` element using XPath `//Response`, and apply the regex `success|failure` to its `status` attribute.",
				"After execution, the extracted status is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Method:Post}}",
				"onAttribute": "status",
				"onElement": "//Response",
				"pluginName": "SendHttpRequest",
				"regularExpression": "success|failure"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid URL format",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --Header argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Network error or timeout",
						"Unexpected HTTP status code",
						"Unsupported pluginName value",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "An HTTP POST request with JSON body and Basic authentication header is sent to `https://api.example.com/v1/items` and the full JSON response is returned.",
					"notes": "Sends an HTTP POST request with a JSON body and returns the raw response.",
					"test_case": "send_http_request_post_full_response_with_body_and_header",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"HeaderManagement",
					"HttpRequest",
					"ResponseRetrieval",
					"SendHttpRequest"
				]
			},
			"description": [
				"### SendHttpRequest: POST Full Response with JSON Body and Header",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` using the `SendHttpRequest` plugin with the JSON body `{\"name\":\"Premium Widget\",\"price\":99.99}` and the header `Authorization: Basic username:password` to retrieve the full JSON response.",
				"After execution, the entire JSON payload is available for subsequent extraction or validation."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Header:Authorization=Basic username:password --Method:Post}}",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid URL format",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --Header argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Missing regularExpression argument",
						"No regex match",
						"Network error or timeout",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The `message` field is extracted from the authenticated JSON response and returned as text.",
					"notes": "Applies a regex to the JSON response body to extract the `message` value.",
					"test_case": "send_http_request_post_message_with_regex_and_header",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"HeaderManagement",
					"HttpRequest",
					"RegexValidation",
					"ResponseRetrieval",
					"SendHttpRequest"
				]
			},
			"description": [
				"### SendHttpRequest: Extract message via Regex with JSON Body and Header",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` with the JSON body `{\"name\":\"Premium Widget\",\"price\":99.99}` and header `Authorization: Basic username:password`, then apply the regex `(?<=\"message\":\")[^\"]+` to the response body to extract the `message` value.",
				"After execution, the extracted message is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Header:Authorization=Basic username:password --Method:Post}}",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=\"message\":\")[^\"]+"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid JSONPath expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --Header argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Network error or timeout",
						"No matching path in JSON response",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The `updatedItem` object is selected from the authenticated JSON response.",
					"notes": "Selects the `updatedItem` object using JSONPath.",
					"test_case": "send_http_request_post_select_updateditem_jsonpath_with_header",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"HeaderManagement",
					"HttpRequest",
					"JsonPathExtraction",
					"ResponseElementExtraction",
					"SendHttpRequest"
				]
			},
			"description": [
				"### SendHttpRequest: Select updatedItem via JSONPath with JSON Body and Header",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` with the JSON body `{\"name\":\"Premium Widget\",\"price\":99.99}` and header `Authorization: Basic username:password`, then use the JSONPath `$.updatedItem` to select the `updatedItem` object from the response.",
				"After execution, that object is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Header:Authorization=Basic username:password --Method:Post}}",
				"onElement": "$.updatedItem",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid JSONPath expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --Header argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Missing regularExpression argument",
						"No regex match",
						"Network error or timeout",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The numeric `id` field of `updatedItem` is extracted from the authenticated JSON response.",
					"notes": "Applies a regex to the JSON response to extract the `id` value.",
					"test_case": "send_http_request_post_id_with_regex_on_jsonpath_and_header",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"HeaderManagement",
					"HttpRequest",
					"JsonPathExtraction",
					"RegexValidation",
					"ResponseElementExtraction",
					"SendHttpRequest"
				]
			},
			"description": [
				"### SendHttpRequest: Extract updatedItem ID via Regex with JSON Body and Header",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` with the JSON body `{\"name\":\"Premium Widget\",\"price\":99.99}` and header `Authorization: Basic username:password`, select the `updatedItem` object using JSONPath `$.updatedItem`, and apply the regex `(?<=\"id\":)\\d+` to extract its `id` value.",
				"After execution, the extracted ID is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Header:Authorization=Basic username:password --Method:Post}}",
				"onElement": "$.updatedItem",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=\"id\":)\\d+"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid XPath expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --Header argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Network error or timeout",
						"No matching element in XML response",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The `<Status>` element text is returned from the authenticated XML response.",
					"notes": "Selects the `<Status>` element from the XML response.",
					"test_case": "send_http_request_post_status_text_xpath_with_header",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"HeaderManagement",
					"HttpRequest",
					"ResponseElementExtraction",
					"SendHttpRequest",
					"XPathExtraction"
				]
			},
			"description": [
				"### SendHttpRequest: Extract Status Text via XPath with JSON Body and Header",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` with the JSON body `{\"name\":\"Premium Widget\",\"price\":99.99}` and header `Authorization: Basic username:password`, then use the XPath `//Status` to select the `<Status>` element text from the XML response.",
				"After execution, that text is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Header:Authorization=Basic username:password --Method:Post}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid XPath expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --Header argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Missing regularExpression argument",
						"No regex match",
						"Network error or timeout",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The `<Status>` element text is extracted via regex from the authenticated XML response.",
					"notes": "Applies a regex to the XML element text to extract content.",
					"test_case": "send_http_request_post_status_text_with_regex_xpath_and_header",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"HeaderManagement",
					"HttpRequest",
					"RegexValidation",
					"ResponseElementExtraction",
					"SendHttpRequest",
					"XPathExtraction"
				]
			},
			"description": [
				"### SendHttpRequest: Extract Status Text via Regex with JSON Body and Header",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` with the JSON body `{\"name\":\"Premium Widget\",\"price\":99.99}` and header `Authorization: Basic username:password`, then select the `<Status>` element using XPath `//Status` and apply the regex `(?<=<Status>).*?(?=</Status>)` to extract its text.",
				"After execution, the extracted text is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Header:Authorization=Basic username:password --Method:Post}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=<Status>).*?(?=</Status>)"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid XPath expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --Header argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Missing onAttribute argument",
						"Network error or timeout",
						"No matching element in XML response",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The `status` attribute of `<Response>` is returned from the authenticated XML response.",
					"notes": "Extracts an attribute from an XML element.",
					"test_case": "send_http_request_post_response_status_attribute_with_header",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"HeaderManagement",
					"HttpRequest",
					"ResponseAttributeExtraction",
					"SendHttpRequest",
					"XPathExtraction"
				]
			},
			"description": [
				"### SendHttpRequest: Extract Response status Attribute with JSON Body and Header",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` with the JSON body `{\"name\":\"Premium Widget\",\"price\":99.99}` and header `Authorization: Basic username:password`, then select the `<Response>` element using XPath `//Response` and extract its `status` attribute.",
				"After execution, the attribute value is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Header:Authorization=Basic username:password --Method:Post}}",
				"onAttribute": "status",
				"onElement": "//Response",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid XPath expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --Header argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Missing onAttribute argument",
						"Missing regularExpression argument",
						"No regex match",
						"Network error or timeout",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The `status` attribute of `<Response>` is extracted via regex from the authenticated XML response.",
					"notes": "Applies a regex to an attribute value to extract 'success' or 'failure'.",
					"test_case": "send_http_request_post_response_status_with_regex_and_header",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"HeaderManagement",
					"HttpRequest",
					"RegexValidation",
					"ResponseAttributeExtraction",
					"SendHttpRequest",
					"XPathExtraction"
				]
			},
			"description": [
				"### SendHttpRequest: Extract Response status via Regex with JSON Body and Header",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` with the JSON body `{\"name\":\"Premium Widget\",\"price\":99.99}` and header `Authorization: Basic username:password`, then select the `<Response>` element using XPath `//Response` and apply the regex `success|failure` to its `status` attribute.",
				"After execution, the extracted status is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Header:Authorization=Basic username:password --Method:Post}}",
				"onAttribute": "status",
				"onElement": "//Response",
				"pluginName": "SendHttpRequest",
				"regularExpression": "success|failure"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid URL format",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --Header argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Network error or timeout",
						"Unexpected HTTP status code",
						"Unsupported pluginName value",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "An HTTP POST request with JSON body and two headers is sent to `https://api.example.com/v1/items` and the full JSON response is returned.",
					"notes": "Sends an HTTP POST request with a JSON body and multiple headers, returning the raw response.",
					"test_case": "send_http_request_post_full_response_with_body_and_multiple_headers",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"HeaderManagement",
					"HttpRequest",
					"ResponseRetrieval",
					"SendHttpRequest"
				]
			},
			"description": [
				"### SendHttpRequest: POST Full Response with JSON Body and Multiple Headers",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` using the `SendHttpRequest` plugin with the JSON body `{\"name\":\"Premium Widget\",\"price\":99.99}` and headers `Authorization: Basic username:password` and `UserAgent: MyCustomUserAgent` to retrieve the full JSON response.",
				"After execution, the entire JSON payload is available for subsequent extraction or validation."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Method:Post}}",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid URL format",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --Header argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Missing regularExpression argument",
						"No regex match",
						"Network error or timeout",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The `message` field is extracted from the authenticated JSON response and returned as text.",
					"notes": "Applies a regex to the JSON response body to extract the `message` value.",
					"test_case": "send_http_request_post_message_with_regex_and_multiple_headers",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"HeaderManagement",
					"HttpRequest",
					"RegexValidation",
					"ResponseRetrieval",
					"SendHttpRequest"
				]
			},
			"description": [
				"### SendHttpRequest: Extract message via Regex with JSON Body and Multiple Headers",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` with the JSON body `{\"name\":\"Premium Widget\",\"price\":99.99}` and headers `Authorization: Basic username:password` and `UserAgent: MyCustomUserAgent`, then apply the regex `(?<=\"message\":\")[^\"]+` to the response body to extract the `message` value.",
				"After execution, the extracted message is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Method:Post}}",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=\"message\":\")[^\"]+"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid JSONPath expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --Header argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Network error or timeout",
						"No matching path in JSON response",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The `updatedItem` object is selected from the authenticated JSON response.",
					"notes": "Selects the `updatedItem` object using JSONPath.",
					"test_case": "send_http_request_post_select_updateditem_jsonpath_with_multiple_headers",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"HeaderManagement",
					"HttpRequest",
					"JsonPathExtraction",
					"ResponseElementExtraction",
					"SendHttpRequest"
				]
			},
			"description": [
				"### SendHttpRequest: Select updatedItem via JSONPath with JSON Body and Multiple Headers",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` with the JSON body `{\"name\":\"Premium Widget\",\"price\":99.99}` and headers `Authorization: Basic username:password` and `UserAgent: MyCustomUserAgent`, then use the JSONPath `$.updatedItem` to select the `updatedItem` object from the response.",
				"After execution, that object is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Method:Post}}",
				"onElement": "$.updatedItem",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid JSONPath expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --Header argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Missing regularExpression argument",
						"No regex match",
						"Network error or timeout",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The numeric `id` field of `updatedItem` is extracted from the authenticated JSON response.",
					"notes": "Applies a regex to the JSON response to extract the `id` value.",
					"test_case": "send_http_request_post_id_with_regex_on_jsonpath_and_multiple_headers",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"HeaderManagement",
					"HttpRequest",
					"JsonPathExtraction",
					"RegexValidation",
					"ResponseElementExtraction",
					"SendHttpRequest"
				]
			},
			"description": [
				"### SendHttpRequest: Extract updatedItem ID via Regex with JSON Body and Multiple Headers",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` with the JSON body `{\"name\":\"Premium Widget\",\"price\":99.99}` and headers `Authorization: Basic username:password` and `UserAgent: MyCustomUserAgent`, select the `updatedItem` object using JSONPath `$.updatedItem`, and apply the regex `(?<=\"id\":)\\d+` to extract its `id` value.",
				"After execution, the extracted ID is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Method:Post}}",
				"onElement": "$.updatedItem",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=\"id\":)\\d+"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid XPath expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --Header argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Network error or timeout",
						"No matching element in XML response",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The `<Status>` element text is returned from the authenticated XML response.",
					"notes": "Selects the `<Status>` element from the XML response.",
					"test_case": "send_http_request_post_status_text_xpath_with_multiple_headers",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"HeaderManagement",
					"HttpRequest",
					"ResponseElementExtraction",
					"SendHttpRequest",
					"XPathExtraction"
				]
			},
			"description": [
				"### SendHttpRequest: Extract Status Text via XPath with JSON Body and Multiple Headers",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` with the JSON body `{\"name\":\"Premium Widget\",\"price\":99.99}` and headers `Authorization: Basic username:password` and `UserAgent: MyCustomUserAgent`, then use the XPath `//Status` to select the `<Status>` element text from the XML response.",
				"After execution, that text is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Method:Post}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid XPath expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --Header argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Missing regularExpression argument",
						"No regex match",
						"Network error or timeout",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The `<Status>` element text is extracted via regex from the authenticated XML response.",
					"notes": "Applies a regex to the XML element text to extract content.",
					"test_case": "send_http_request_post_status_text_with_regex_xpath_and_multiple_headers",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"HeaderManagement",
					"HttpRequest",
					"RegexValidation",
					"ResponseElementExtraction",
					"SendHttpRequest",
					"XPathExtraction"
				]
			},
			"description": [
				"### SendHttpRequest: Extract Status Text via Regex with JSON Body and Multiple Headers",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` with the JSON body `{\"name\":\"Premium Widget\",\"price\":99.99}` and headers `Authorization: Basic username:password` and `UserAgent: MyCustomUserAgent`, then select the `<Status>` element using XPath `//Status` and apply the regex `(?<=<Status>).*?(?=</Status>)` to extract its text.",
				"After execution, the extracted text is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Method:Post}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=<Status>).*?(?=</Status>)"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid XPath expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --Header argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Missing onAttribute argument",
						"Network error or timeout",
						"No matching element in XML response",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The `status` attribute of `<Response>` is returned from the authenticated XML response.",
					"notes": "Extracts an attribute from an XML element.",
					"test_case": "send_http_request_post_response_status_attribute_with_multiple_headers",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"HeaderManagement",
					"HttpRequest",
					"ResponseAttributeExtraction",
					"SendHttpRequest",
					"XPathExtraction"
				]
			},
			"description": [
				"### SendHttpRequest: Extract Response status Attribute with JSON Body and Multiple Headers",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` with the JSON body `{\"name\":\"Premium Widget\",\"price\":99.99}` and headers `Authorization: Basic username:password` and `UserAgent: MyCustomUserAgent`, then select the `<Response>` element using XPath `//Response` and extract its `status` attribute.",
				"After execution, the attribute value is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Method:Post}}",
				"onAttribute": "status",
				"onElement": "//Response",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid XPath expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --Header argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Missing onAttribute argument",
						"Missing regularExpression argument",
						"No regex match",
						"Network error or timeout",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The `status` attribute of `<Response>` is extracted via regex from the authenticated XML response.",
					"notes": "Applies a regex to an attribute value to extract 'success' or 'failure'.",
					"test_case": "send_http_request_post_response_status_with_regex_and_multiple_headers",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"HeaderManagement",
					"HttpRequest",
					"RegexValidation",
					"ResponseAttributeExtraction",
					"SendHttpRequest",
					"XPathExtraction"
				]
			},
			"description": [
				"### SendHttpRequest: Extract Response status via Regex with JSON Body and Multiple Headers",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` with the JSON body `{\"name\":\"Premium Widget\",\"price\":99.99}` and headers `Authorization: Basic username:password` and `UserAgent: MyCustomUserAgent`, then select the `<Response>` element using XPath `//Response` and apply the regex `success|failure` to its `status` attribute.",
				"After execution, the extracted status is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Method:Post}}",
				"onAttribute": "status",
				"onElement": "//Response",
				"pluginName": "SendHttpRequest",
				"regularExpression": "success|failure"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid URL format",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --ContentType argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Network error or timeout",
						"Unexpected HTTP status code",
						"Unsupported pluginName value",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "An HTTP POST request with plain-text body and text/plain content type is sent to `https://api.example.com/v1/items` and the full response is returned.",
					"notes": "Sends an HTTP POST request with a text/plain body and returns the raw response.",
					"test_case": "send_http_request_post_full_response_with_plain_body",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"HttpRequest",
					"ResponseRetrieval",
					"SendHttpRequest"
				]
			},
			"description": [
				"### SendHttpRequest: POST Full Response with Text/Plain Body",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` using the `SendHttpRequest` plugin with content type `text/plain` and the body `Name=PremiumWidget;Price=99.99` to retrieve the full response.",
				"After execution, the raw response payload is available for subsequent extraction or validation."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99 --Method:Post}}",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid URL format",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --ContentType argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Missing regularExpression argument",
						"No regex match",
						"Network error or timeout",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The 3-digit status code is extracted from the response via regex.",
					"notes": "Applies a regex to the response to extract a status code.",
					"test_case": "send_http_request_post_status_code_with_regex_plain_body",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"HttpRequest",
					"RegexValidation",
					"ResponseRetrieval",
					"SendHttpRequest"
				]
			},
			"description": [
				"### SendHttpRequest: Extract Status Code via Regex with Text/Plain Body",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` with content type `text/plain` and the body `Name=PremiumWidget;Price=99.99`, then apply the regex `(?<=Status: )\\d{3}` to extract a three-digit status code from the response.",
				"After execution, the extracted code is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99 --Method:Post}}",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=Status: )\\d{3}"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid JSONPath expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --ContentType argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Network error or timeout",
						"No matching path in JSON response",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The `updatedItem` object is selected from the JSON response.",
					"notes": "Selects the `updatedItem` object using JSONPath.",
					"test_case": "send_http_request_post_select_updateditem_jsonpath_plain_body",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"HttpRequest",
					"JsonPathExtraction",
					"ResponseElementExtraction",
					"SendHttpRequest"
				]
			},
			"description": [
				"### SendHttpRequest: Select updatedItem via JSONPath with Text/Plain Body",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` with content type `text/plain` and the body `Name=PremiumWidget;Price=99.99;Stock=150`, then use the JSONPath `$.updatedItem` to select the `updatedItem` object from the response.",
				"After execution, that object is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Method:Post}}",
				"onElement": "$.updatedItem",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid JSONPath expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --ContentType argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Missing regularExpression argument",
						"No regex match",
						"Network error or timeout",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The numeric `id` field of `updatedItem` is extracted via regex.",
					"notes": "Applies a regex to the JSONPath-selected object to extract the `id` value.",
					"test_case": "send_http_request_post_id_with_regex_on_jsonpath_plain_body",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"HttpRequest",
					"JsonPathExtraction",
					"RegexValidation",
					"ResponseElementExtraction",
					"SendHttpRequest"
				]
			},
			"description": [
				"### SendHttpRequest: Extract updatedItem ID via Regex with Text/Plain Body",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` with content type `text/plain` and the body `Name=PremiumWidget;Price=99.99;Stock=150`, select the `updatedItem` object using JSONPath `$.updatedItem`, and apply the regex `(?<=\\\"id\\\":)\\d+` to extract its `id` value.",
				"After execution, the extracted ID is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Method:Post}}",
				"onElement": "$.updatedItem",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=\\\"id\\\":)\\d+"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid XPath expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --ContentType argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Network error or timeout",
						"No matching element in XML response",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The `<Status>` element text is returned from the XML response.",
					"notes": "Selects the `<Status>` element using XPath.",
					"test_case": "send_http_request_post_status_text_xpath_plain_body",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"HttpRequest",
					"ResponseElementExtraction",
					"SendHttpRequest",
					"XPathExtraction"
				]
			},
			"description": [
				"### SendHttpRequest: Extract Status Text via XPath with Text/Plain Body",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` with content type `text/plain` and the body `Name=PremiumWidget;Price=99.99;Stock=150`, then use the XPath `//Status` to select the `<Status>` element text from the response.",
				"After execution, that text is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Method:Post}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid XPath expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --ContentType argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Missing regularExpression argument",
						"No regex match",
						"Network error or timeout",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The `<Status>` element text is extracted via regex from the XML response.",
					"notes": "Applies a regex to the XPath-selected element to extract its text.",
					"test_case": "send_http_request_post_status_text_with_regex_xpath_plain_body",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"HttpRequest",
					"RegexValidation",
					"ResponseElementExtraction",
					"SendHttpRequest",
					"XPathExtraction"
				]
			},
			"description": [
				"### SendHttpRequest: Extract Status Text via Regex with Text/Plain Body",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` with content type `text/plain` and the body `Name=PremiumWidget;Price=99.99;Stock=150`, select the `<Status>` element using XPath `//Status`, and apply the regex `(?<=<Status>).*?(?=</Status>)` to extract its text.",
				"After execution, the extracted text is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Method:Post}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=<Status>).*?(?=</Status>)"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid XPath expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --ContentType argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Missing onAttribute argument",
						"Network error or timeout",
						"No matching element in XML response",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The `status` attribute of `<Response>` is returned from the XML response.",
					"notes": "Extracts an attribute from an XML element.",
					"test_case": "send_http_request_post_response_status_attribute_plain_body",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"HttpRequest",
					"ResponseAttributeExtraction",
					"SendHttpRequest",
					"XPathExtraction"
				]
			},
			"description": [
				"### SendHttpRequest: Extract Response status Attribute with Text/Plain Body",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` with content type `text/plain` and the body `Name=PremiumWidget;Price=99.99;Stock=150`, then select the `<Response>` element using XPath `//Response` and extract its `status` attribute.",
				"After execution, the attribute value is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Method:Post}}",
				"onAttribute": "status",
				"onElement": "//Response",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid XPath expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --ContentType argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Missing onAttribute argument",
						"Missing regularExpression argument",
						"No regex match",
						"Network error or timeout",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The `status` attribute of `<Response>` is extracted via regex from the XML response.",
					"notes": "Applies a regex to an attribute value to extract 'success' or 'error'.",
					"test_case": "send_http_request_post_response_status_with_regex_plain_body",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"HttpRequest",
					"RegexValidation",
					"ResponseAttributeExtraction",
					"SendHttpRequest",
					"XPathExtraction"
				]
			},
			"description": [
				"### SendHttpRequest: Extract Response status via Regex with Text/Plain Body",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` with content type `text/plain` and the body `Name=PremiumWidget;Price=99.99;Stock=150`, then select the `<Response>` element using XPath `//Response` and apply the regex `success|error` to its `status` attribute.",
				"After execution, the extracted status is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Method:Post}}",
				"onAttribute": "status",
				"onElement": "//Response",
				"pluginName": "SendHttpRequest",
				"regularExpression": "success|error"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid URL format",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --ContentType argument",
						"Missing --Header argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Network error or timeout",
						"Unexpected HTTP status code",
						"Unsupported pluginName value",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "An HTTP POST request with text/plain body and Basic authentication header is sent to `https://api.example.com/v1/items` and the full response is returned.",
					"notes": "Sends an HTTP POST request with a text/plain body and returns the raw response.",
					"test_case": "send_http_request_post_full_response_with_plain_body_and_header",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"HeaderManagement",
					"HttpRequest",
					"ResponseRetrieval",
					"SendHttpRequest"
				]
			},
			"description": [
				"### SendHttpRequest: POST Full Response with Text/Plain Body and Header",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` using the `SendHttpRequest` plugin with content type `text/plain`, the body `Name=PremiumWidget;Price=99.99`, and the header `Authorization: Basic username:password` to retrieve the full response.",
				"After execution, the raw response payload is available for subsequent extraction or validation."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99 --Header:Authorization=Basic username:password --Method:Post}}",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid URL format",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --ContentType argument",
						"Missing --Header argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Missing regularExpression argument",
						"No regex match",
						"Network error or timeout",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "A three-digit status code is extracted from the response via regex.",
					"notes": "Applies a regex to the response to extract the status code.",
					"test_case": "send_http_request_post_status_code_with_regex_plain_body_and_header",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"HeaderManagement",
					"HttpRequest",
					"RegexValidation",
					"ResponseRetrieval",
					"SendHttpRequest"
				]
			},
			"description": [
				"### SendHttpRequest: Extract Status Code via Regex with Text/Plain Body and Header",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` with content type `text/plain`, the body `Name=PremiumWidget;Price=99.99`, and the header `Authorization: Basic username:password`, then apply the regex `(?<=Status: )\\d{3}` to extract a three-digit status code from the response.",
				"After execution, the extracted code is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99 --Header:Authorization=Basic username:password --Method:Post}}",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=Status: )\\d{3}"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid JSONPath expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --ContentType argument",
						"Missing --Header argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Network error or timeout",
						"No matching path in JSON response",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The `updatedItem` object is selected from the JSON response.",
					"notes": "Selects the `updatedItem` object using JSONPath.",
					"test_case": "send_http_request_post_select_updateditem_jsonpath_plain_body_and_header",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"HeaderManagement",
					"HttpRequest",
					"JsonPathExtraction",
					"ResponseElementExtraction",
					"SendHttpRequest"
				]
			},
			"description": [
				"### SendHttpRequest: Select updatedItem via JSONPath with Text/Plain Body and Header",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` with content type `text/plain`, the body `Name=PremiumWidget;Price=99.99;Stock=150`, and the header `Authorization: Basic username:password`, then use the JSONPath `$.updatedItem` to select the `updatedItem` object from the response.",
				"After execution, that object is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Method:Post}}",
				"onElement": "$.updatedItem",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid JSONPath expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --ContentType argument",
						"Missing --Header argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Missing regularExpression argument",
						"No regex match",
						"Network error or timeout",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The numeric `id` field of `updatedItem` is extracted via regex.",
					"notes": "Applies a regex to the JSONPath-selected object to extract the `id` value.",
					"test_case": "send_http_request_post_id_with_regex_on_jsonpath_plain_body_and_header",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"HeaderManagement",
					"HttpRequest",
					"JsonPathExtraction",
					"RegexValidation",
					"ResponseElementExtraction",
					"SendHttpRequest"
				]
			},
			"description": [
				"### SendHttpRequest: Extract updatedItem ID via Regex with Text/Plain Body and Header",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` with content type `text/plain`, the body `Name=PremiumWidget;Price=99.99;Stock=150`, and the header `Authorization: Basic username:password`, select the `updatedItem` object using JSONPath `$.updatedItem`, and apply the regex `(?<=\\\"id\\\":)\\d+` to extract its `id` value.",
				"After execution, the extracted ID is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Method:Post}}",
				"onElement": "$.updatedItem",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=\\\"id\\\":)\\d+"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid XPath expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --ContentType argument",
						"Missing --Header argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Network error or timeout",
						"No matching element in XML response",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The `<Status>` element text is returned from the XML response.",
					"notes": "Selects the `<Status>` element using XPath.",
					"test_case": "send_http_request_post_status_text_xpath_plain_body_and_header",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"HeaderManagement",
					"HttpRequest",
					"ResponseElementExtraction",
					"SendHttpRequest",
					"XPathExtraction"
				]
			},
			"description": [
				"### SendHttpRequest: Extract Status Text via XPath with Text/Plain Body and Header",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` with content type `text/plain`, the body `Name=PremiumWidget;Price=99.99;Stock=150`, and the header `Authorization: Basic username:password`, then use the XPath `//Status` to select the `<Status>` element text from the response.",
				"After execution, that text is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Method:Post}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid XPath expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --ContentType argument",
						"Missing --Header argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Missing regularExpression argument",
						"No regex match",
						"Network error or timeout",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The `<Status>` element text is extracted via regex from the XML response.",
					"notes": "Applies a regex to the XPath-selected element to extract its text.",
					"test_case": "send_http_request_post_status_text_with_regex_xpath_plain_body_and_header",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"HeaderManagement",
					"HttpRequest",
					"RegexValidation",
					"ResponseElementExtraction",
					"SendHttpRequest",
					"XPathExtraction"
				]
			},
			"description": [
				"### SendHttpRequest: Extract Status Text via Regex with Text/Plain Body and Header",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` with content type `text/plain`, the body `Name=PremiumWidget;Price=99.99;Stock=150`, and the header `Authorization: Basic username:password`, then select the `<Status>` element using XPath `//Status` and apply the regex `(?<=<Status>).*?(?=</Status>)` to extract its text.",
				"After execution, the extracted text is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Method:Post}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=<Status>).*?(?=</Status>)"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid XPath expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --ContentType argument",
						"Missing --Header argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Missing onAttribute argument",
						"Network error or timeout",
						"No matching element in XML response",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The `status` attribute of `<Response>` is returned from the XML response.",
					"notes": "Extracts an attribute from an XML element.",
					"test_case": "send_http_request_post_response_status_attribute_plain_body_and_header",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"HeaderManagement",
					"HttpRequest",
					"ResponseAttributeExtraction",
					"SendHttpRequest",
					"XPathExtraction"
				]
			},
			"description": [
				"### SendHttpRequest: Extract Response status Attribute with Text/Plain Body and Header",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` with content type `text/plain`, the body `Name=PremiumWidget;Price=99.99;Stock=150`, and the header `Authorization: Basic username:password`, then select the `<Response>` element using XPath `//Response` and extract its `status` attribute.",
				"After execution, the attribute value is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Method:Post}}",
				"onAttribute": "status",
				"onElement": "//Response",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid XPath expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --ContentType argument",
						"Missing --Header argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Missing onAttribute argument",
						"Missing regularExpression argument",
						"No regex match",
						"Network error or timeout",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The `status` attribute of `<Response>` is extracted via regex from the XML response.",
					"notes": "Applies a regex to an attribute value to extract 'success' or 'error'.",
					"test_case": "send_http_request_post_response_status_with_regex_plain_body_and_header",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"HeaderManagement",
					"HttpRequest",
					"RegexValidation",
					"ResponseAttributeExtraction",
					"SendHttpRequest",
					"XPathExtraction"
				]
			},
			"description": [
				"### SendHttpRequest: Extract Response status via Regex with Text/Plain Body and Header",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` with content type `text/plain`, the body `Name=PremiumWidget;Price=99.99;Stock=150`, and the header `Authorization: Basic username:password`, then select the `<Response>` element using XPath `//Response` and apply the regex `success|error` to its `status` attribute.",
				"After execution, the extracted status is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Method:Post}}",
				"onAttribute": "status",
				"onElement": "//Response",
				"pluginName": "SendHttpRequest",
				"regularExpression": "success|error"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid URL format",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --ContentType argument",
						"Missing --Header argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Network error or timeout",
						"Unexpected HTTP status code",
						"Unsupported pluginName value",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "An HTTP POST request with a text/plain body and two headers is sent to `https://api.example.com/v1/items` and the raw response is returned.",
					"notes": "Sends an HTTP POST request with a text/plain body and multiple headers, returning the raw response.",
					"test_case": "send_http_request_post_full_response_with_plain_body_and_multiple_headers",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"HeaderManagement",
					"HttpRequest",
					"ResponseRetrieval",
					"SendHttpRequest"
				]
			},
			"description": [
				"### SendHttpRequest: POST Full Response with Text/Plain Body and Multiple Headers",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` using the `SendHttpRequest` plugin with content type `text/plain`, the body `Name=PremiumWidget;Price=99.99`, and headers `Authorization: Basic username:password` and `UserAgent: MyCustomUserAgent` to retrieve the full response.",
				"After execution, the raw response payload is available for subsequent extraction or validation."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Method:Post}}",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid URL format",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --ContentType argument",
						"Missing --Header argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Missing regularExpression argument",
						"No regex match",
						"Network error or timeout",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "A three-digit status code is extracted from the response via regex.",
					"notes": "Applies a regex to the response to extract the status code.",
					"test_case": "send_http_request_post_status_code_with_regex_plain_body_and_multiple_headers",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"HeaderManagement",
					"HttpRequest",
					"RegexValidation",
					"ResponseRetrieval",
					"SendHttpRequest"
				]
			},
			"description": [
				"### SendHttpRequest: Extract Status Code via Regex with Text/Plain Body and Multiple Headers",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` with content type `text/plain`, the body `Name=PremiumWidget;Price=99.99`, and headers `Authorization: Basic username:password` and `UserAgent: MyCustomUserAgent`, then apply the regex `(?<=Status: )\\d{3}` to extract a three-digit status code from the response.",
				"After execution, the extracted code is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Method:Post}}",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=Status: )\\d{3}"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid JSONPath expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --ContentType argument",
						"Missing --Header argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Network error or timeout",
						"No matching path in JSON response",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The `updatedItem` object is selected from the JSON response.",
					"notes": "Selects the `updatedItem` object using JSONPath.",
					"test_case": "send_http_request_post_select_updateditem_jsonpath_plain_body_and_multiple_headers",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"HeaderManagement",
					"HttpRequest",
					"JsonPathExtraction",
					"ResponseElementExtraction",
					"SendHttpRequest"
				]
			},
			"description": [
				"### SendHttpRequest: Select updatedItem via JSONPath with Text/Plain Body and Multiple Headers",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` with content type `text/plain`, the body `Name=PremiumWidget;Price=99.99;Stock=150`, and headers `Authorization: Basic username:password` and `UserAgent: MyCustomUserAgent`, then use the JSONPath `$.updatedItem` to select the `updatedItem` object from the response.",
				"After execution, that object is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Method:Post}}",
				"onElement": "$.updatedItem",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid JSONPath expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --ContentType argument",
						"Missing --Header argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Missing regularExpression argument",
						"No regex match",
						"Network error or timeout",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The numeric `id` field of `updatedItem` is extracted via regex.",
					"notes": "Applies a regex to the JSONPath-selected object to extract the `id` value.",
					"test_case": "send_http_request_post_id_with_regex_on_jsonpath_plain_body_and_multiple_headers",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"HeaderManagement",
					"HttpRequest",
					"JsonPathExtraction",
					"RegexValidation",
					"ResponseElementExtraction",
					"SendHttpRequest"
				]
			},
			"description": [
				"### SendHttpRequest: Extract updatedItem ID via Regex with Text/Plain Body and Multiple Headers",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` with content type `text/plain`, the body `Name=PremiumWidget;Price=99.99;Stock=150`, and headers `Authorization: Basic username:password` and `UserAgent: MyCustomUserAgent`, select the `updatedItem` object using JSONPath `$.updatedItem`, and apply the regex `(?<=\\\"id\\\":)\\d+` to extract its `id` value.",
				"After execution, the extracted ID is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Method:Post}}",
				"onElement": "$.updatedItem",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=\\\"id\\\":)\\d+"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid XPath expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --ContentType argument",
						"Missing --Header argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Network error or timeout",
						"No matching element in XML response",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The `<Status>` element text is returned from the XML response.",
					"notes": "Selects the `<Status>` element using XPath.",
					"test_case": "send_http_request_post_status_text_xpath_plain_body_and_multiple_headers",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"HeaderManagement",
					"HttpRequest",
					"ResponseElementExtraction",
					"SendHttpRequest",
					"XPathExtraction"
				]
			},
			"description": [
				"### SendHttpRequest: Extract Status Text via XPath with Text/Plain Body and Multiple Headers",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` with content type `text/plain`, the body `Name=PremiumWidget;Price=99.99;Stock=150`, and headers `Authorization: Basic username:password` and `UserAgent: MyCustomUserAgent`, then use the XPath `//Status` to select the `<Status>` element text from the response.",
				"After execution, that text is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Method:Post}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid XPath expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --ContentType argument",
						"Missing --Header argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Missing regularExpression argument",
						"No regex match",
						"Network error or timeout",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The `<Status>` element text is extracted via regex from the XML response.",
					"notes": "Applies a regex to the XPath-selected element to extract its text.",
					"test_case": "send_http_request_post_status_text_with_regex_xpath_plain_body_and_multiple_headers",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"HeaderManagement",
					"HttpRequest",
					"RegexValidation",
					"ResponseElementExtraction",
					"SendHttpRequest",
					"XPathExtraction"
				]
			},
			"description": [
				"### SendHttpRequest: Extract Status Text via Regex with Text/Plain Body and Multiple Headers",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` with content type `text/plain`, the body `Name=PremiumWidget;Price=99.99;Stock=150`, and headers `Authorization: Basic username:password` and `UserAgent: MyCustomUserAgent`, then select the `<Status>` element using XPath `//Status` and apply the regex `(?<=<Status>).*?(?=</Status>)` to extract its text.",
				"After execution, the extracted text is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Method:Post}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=<Status>).*?(?=</Status>)"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid XPath expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --ContentType argument",
						"Missing --Header argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Missing onAttribute argument",
						"Network error or timeout",
						"No matching element in XML response",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The `status` attribute of `<Response>` is returned from the XML response.",
					"notes": "Extracts an attribute from an XML element.",
					"test_case": "send_http_request_post_response_status_attribute_plain_body_and_multiple_headers",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"HeaderManagement",
					"HttpRequest",
					"ResponseAttributeExtraction",
					"SendHttpRequest",
					"XPathExtraction"
				]
			},
			"description": [
				"### SendHttpRequest: Extract Response status Attribute with Text/Plain Body and Multiple Headers",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` with content type `text/plain`, the body `Name=PremiumWidget;Price=99.99;Stock=150`, and headers `Authorization: Basic username:password` and `UserAgent: MyCustomUserAgent`, then select the `<Response>` element using XPath `//Response` and extract its `status` attribute.",
				"After execution, the attribute value is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Method:Post}}",
				"onAttribute": "status",
				"onElement": "//Response",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid XPath expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --ContentType argument",
						"Missing --Header argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Missing onAttribute argument",
						"Missing regularExpression argument",
						"No regex match",
						"Network error or timeout",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The `status` attribute of `<Response>` is extracted via regex from the XML response.",
					"notes": "Applies a regex to an attribute value to extract 'success' or 'error'.",
					"test_case": "send_http_request_post_response_status_with_regex_plain_body_and_multiple_headers",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"HeaderManagement",
					"HttpRequest",
					"RegexValidation",
					"ResponseAttributeExtraction",
					"SendHttpRequest",
					"XPathExtraction"
				]
			},
			"description": [
				"### SendHttpRequest: Extract Response status via Regex with Text/Plain Body and Multiple Headers",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` with content type `text/plain`, the body `Name=PremiumWidget;Price=99.99;Stock=150`, and headers `Authorization: Basic username:password` and `UserAgent: MyCustomUserAgent`, then select the `<Response>` element using XPath `//Response` and apply the regex `success|error` to its `status` attribute.",
				"After execution, the extracted status is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Method:Post}}",
				"onAttribute": "status",
				"onElement": "//Response",
				"pluginName": "SendHttpRequest",
				"regularExpression": "success|error"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid URL format",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --ContentType argument",
						"Missing --Encoding argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Network error or timeout",
						"Unexpected HTTP status code",
						"Unsupported pluginName value",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "An HTTP POST request with text/plain body and ASCII encoding is sent to `https://api.example.com/v1/items` and the full response is returned.",
					"notes": "Sends an HTTP POST request with a text/plain body and ASCII encoding, returning the raw response.",
					"test_case": "send_http_request_post_plain_body_ascii",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"EncodingManagement",
					"HttpRequest",
					"ResponseRetrieval",
					"SendHttpRequest"
				]
			},
			"description": [
				"### SendHttpRequest: POST Full Response with Text/Plain Body and ASCII Encoding",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` using the `SendHttpRequest` plugin with content type `text/plain`, the body `Name=PremiumWidget;Price=99.99`, and encoding `ASCII` to retrieve the full response.",
				"After execution, the raw response payload is available for subsequent extraction or validation."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99 --Encoding:ASCII --Method:Post}}",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid URL format",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --ContentType argument",
						"Missing --Encoding argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Missing regularExpression argument",
						"No regex match",
						"Network error or timeout",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "A three-digit status code is extracted via regex from the plain-text response.",
					"notes": "Applies a regex to the response to extract a three-digit status code.",
					"test_case": "send_http_request_post_status_code_regex_plain_body_ascii",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"EncodingManagement",
					"HttpRequest",
					"RegexValidation",
					"ResponseRetrieval",
					"SendHttpRequest"
				]
			},
			"description": [
				"### SendHttpRequest: Extract Status Code via Regex with Text/Plain Body and ASCII Encoding",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` with content type `text/plain`, the body `Name=PremiumWidget;Price=99.99`, and encoding `ASCII`, then apply the regex `(?<=Status: )\\d{3}` to extract the status code from the response.",
				"After execution, the extracted code is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99 --Encoding:ASCII --Method:Post}}",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=Status: )\\d{3}"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid JSONPath expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --ContentType argument",
						"Missing --Encoding argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Network error or timeout",
						"No matching path in JSON response",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The `updatedItem` object is selected from the JSON response.",
					"notes": "Selects the `updatedItem` object using JSONPath.",
					"test_case": "send_http_request_post_select_updateditem_jsonpath_plain_body_ascii",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"EncodingManagement",
					"HttpRequest",
					"JsonPathExtraction",
					"ResponseElementExtraction",
					"SendHttpRequest"
				]
			},
			"description": [
				"### SendHttpRequest: Select updatedItem via JSONPath with Text/Plain Body and ASCII Encoding",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` with content type `text/plain`, the body `Name=PremiumWidget;Price=99.99;Stock=150`, and encoding `ASCII`, then use the JSONPath `$.updatedItem` to select the `updatedItem` object from the response.",
				"After execution, that object is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Encoding:ASCII --Method:Post}}",
				"onElement": "$.updatedItem",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid JSONPath expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --ContentType argument",
						"Missing --Encoding argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Missing regularExpression argument",
						"No regex match",
						"Network error or timeout",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The numeric `id` field of `updatedItem` is extracted via regex.",
					"notes": "Applies a regex to the JSONPath-selected object to extract the `id` value.",
					"test_case": "send_http_request_post_id_regex_jsonpath_plain_body_ascii",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"EncodingManagement",
					"HttpRequest",
					"JsonPathExtraction",
					"RegexValidation",
					"ResponseElementExtraction",
					"SendHttpRequest"
				]
			},
			"description": [
				"### SendHttpRequest: Extract updatedItem ID via Regex with Text/Plain Body and ASCII Encoding",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` with content type `text/plain`, the body `Name=PremiumWidget;Price=99.99;Stock=150`, and encoding `ASCII`, select the `updatedItem` object using JSONPath `$.updatedItem`, and apply the regex `(?<=\\\"id\\\":)\\d+` to extract its `id` value.",
				"After execution, the extracted ID is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Encoding:ASCII --Method:Post}}",
				"onElement": "$.updatedItem",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=\\\"id\\\":)\\d+"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid XPath expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --ContentType argument",
						"Missing --Encoding argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Network error or timeout",
						"No matching element in XML response",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The `<Status>` element text is returned from the XML response.",
					"notes": "Selects the `<Status>` element using XPath.",
					"test_case": "send_http_request_post_status_text_xpath_plain_body_ascii",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"EncodingManagement",
					"HttpRequest",
					"ResponseElementExtraction",
					"SendHttpRequest",
					"XPathExtraction"
				]
			},
			"description": [
				"### SendHttpRequest: Extract Status Text via XPath with Text/Plain Body and ASCII Encoding",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` with content type `text/plain`, the body `Name=PremiumWidget;Price=99.99;Stock=150`, and encoding `ASCII`, then use the XPath `//Status` to select the `<Status>` element text from the response.",
				"After execution, that text is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Encoding:ASCII --Method:Post}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid XPath expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --ContentType argument",
						"Missing --Encoding argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Missing regularExpression argument",
						"No regex match",
						"Network error or timeout",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The `<Status>` element text is extracted via regex from the XML response.",
					"notes": "Applies a regex to the XPath-selected element to extract its text.",
					"test_case": "send_http_request_post_status_text_regex_xpath_plain_body_ascii",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"EncodingManagement",
					"HttpRequest",
					"RegexValidation",
					"ResponseElementExtraction",
					"SendHttpRequest",
					"XPathExtraction"
				]
			},
			"description": [
				"### SendHttpRequest: Extract Status Text via Regex with Text/Plain Body and ASCII Encoding",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` with content type `text/plain`, the body `Name=PremiumWidget;Price=99.99;Stock=150`, and encoding `ASCII`, then select the `<Status>` element using XPath `//Status` and apply the regex `(?<=<Status>).*?(?=</Status>)` to extract its text.",
				"After execution, the extracted text is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Encoding:ASCII --Method:Post}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=<Status>).*?(?=</Status>)"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid XPath expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --ContentType argument",
						"Missing --Encoding argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Missing onAttribute argument",
						"Network error or timeout",
						"No matching element in XML response",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The `status` attribute of `<Response>` is returned from the XML response.",
					"notes": "Extracts an attribute from an XML element.",
					"test_case": "send_http_request_post_response_status_attribute_plain_body_ascii",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"EncodingManagement",
					"HttpRequest",
					"ResponseAttributeExtraction",
					"SendHttpRequest",
					"XPathExtraction"
				]
			},
			"description": [
				"### SendHttpRequest: Extract Response status Attribute with Text/Plain Body and ASCII Encoding",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` with content type `text/plain`, the body `Name=PremiumWidget;Price=99.99;Stock=150`, and encoding `ASCII`, then select the `<Response>` element using XPath `//Response` and extract its `status` attribute.",
				"After execution, the attribute value is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Encoding:ASCII --Method:Post}}",
				"onAttribute": "status",
				"onElement": "//Response",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid XPath expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --ContentType argument",
						"Missing --Encoding argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Missing onAttribute argument",
						"Missing regularExpression argument",
						"No regex match",
						"Network error or timeout",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The `status` attribute of `<Response>` is extracted via regex from the XML response.",
					"notes": "Applies a regex to an attribute value to extract 'success' or 'error'.",
					"test_case": "send_http_request_post_response_status_regex_attribute_plain_body_ascii",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"EncodingManagement",
					"HttpRequest",
					"RegexValidation",
					"ResponseAttributeExtraction",
					"SendHttpRequest",
					"XPathExtraction"
				]
			},
			"description": [
				"### SendHttpRequest: Extract Response status via Regex with Text/Plain Body and ASCII Encoding",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` with content type `text/plain`, the body `Name=PremiumWidget;Price=99.99;Stock=150`, and encoding `ASCII`, then select the `<Response>` element using XPath `//Response` and apply the regex `success|error` to its `status` attribute.",
				"After execution, the extracted status is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Encoding:ASCII --Method:Post}}",
				"onAttribute": "status",
				"onElement": "//Response",
				"pluginName": "SendHttpRequest",
				"regularExpression": "success|error"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid URL format",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --ContentType argument",
						"Missing --Encoding argument",
						"Missing --Header argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Network error or timeout",
						"Unexpected HTTP status code",
						"Unsupported pluginName value",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "An HTTP POST request with text/plain body, ASCII encoding, and two headers is sent to `https://api.example.com/v1/items` and the full response is returned.",
					"notes": "Sends an HTTP POST request with a text/plain body, ASCII encoding, and multiple headers, returning the raw response.",
					"test_case": "send_http_request_post_full_response_with_plain_body_ascii_and_multiple_headers",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"EncodingManagement",
					"HeaderManagement",
					"HttpRequest",
					"ResponseRetrieval",
					"SendHttpRequest"
				]
			},
			"description": [
				"### SendHttpRequest: POST Full Response with Text/Plain Body, ASCII Encoding, and Multiple Headers",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` using the `SendHttpRequest` plugin with content type `text/plain`, the body `Name=PremiumWidget;Price=99.99`, encoding `ASCII`, and headers `Authorization: Basic username:password` and `UserAgent: MyCustomUserAgent` to retrieve the full response.",
				"After execution, the raw response payload is available for subsequent extraction or validation."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Post}}",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid URL format",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --ContentType argument",
						"Missing --Encoding argument",
						"Missing --Header argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Missing regularExpression argument",
						"No regex match",
						"Network error or timeout",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "A three-digit status code is extracted via regex from the plain-text response.",
					"notes": "Applies a regex to the response to extract a three-digit status code.",
					"test_case": "send_http_request_post_status_code_with_regex_plain_body_ascii_and_multiple_headers",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"EncodingManagement",
					"HeaderManagement",
					"HttpRequest",
					"RegexValidation",
					"ResponseRetrieval",
					"SendHttpRequest"
				]
			},
			"description": [
				"### SendHttpRequest: Extract Status Code via Regex with Text/Plain Body, ASCII Encoding, and Multiple Headers",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` with content type `text/plain`, the body `Name=PremiumWidget;Price=99.99`, encoding `ASCII`, and headers `Authorization: Basic username:password` and `UserAgent: MyCustomUserAgent`, then apply the regex `(?<=Status: )\\d{3}` to extract the status code from the response.",
				"After execution, the extracted code is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Post}}",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=Status: )\\d{3}"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid JSONPath expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --ContentType argument",
						"Missing --Encoding argument",
						"Missing --Header argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Network error or timeout",
						"No matching path in JSON response",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The `updatedItem` object is selected from the JSON response.",
					"notes": "Selects the `updatedItem` object using JSONPath.",
					"test_case": "send_http_request_post_select_updateditem_jsonpath_plain_body_ascii_and_multiple_headers",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"EncodingManagement",
					"HeaderManagement",
					"HttpRequest",
					"JsonPathExtraction",
					"ResponseElementExtraction",
					"SendHttpRequest"
				]
			},
			"description": [
				"### SendHttpRequest: Select updatedItem via JSONPath with Text/Plain Body, ASCII Encoding, and Multiple Headers",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` with content type `text/plain`, the body `Name=PremiumWidget;Price=99.99;Stock=150`, encoding `ASCII`, and headers `Authorization: Basic username:password` and `UserAgent: MyCustomUserAgent`, then use the JSONPath `$.updatedItem` to select the `updatedItem` object from the response.",
				"After execution, that object is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Post}}",
				"onElement": "$.updatedItem",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid JSONPath expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --ContentType argument",
						"Missing --Encoding argument",
						"Missing --Header argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Missing regularExpression argument",
						"No regex match",
						"Network error or timeout",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The numeric `id` field of `updatedItem` is extracted via regex.",
					"notes": "Applies a regex to the JSONPath-selected object to extract the `id` value.",
					"test_case": "send_http_request_post_id_with_regex_on_jsonpath_plain_body_ascii_and_multiple_headers",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"EncodingManagement",
					"HeaderManagement",
					"HttpRequest",
					"JsonPathExtraction",
					"RegexValidation",
					"ResponseElementExtraction",
					"SendHttpRequest"
				]
			},
			"description": [
				"### SendHttpRequest: Extract updatedItem ID via Regex with Text/Plain Body, ASCII Encoding, and Multiple Headers",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` with content type `text/plain`, the body `Name=PremiumWidget;Price=99.99;Stock=150`, encoding `ASCII`, and headers `Authorization: Basic username:password` and `UserAgent: MyCustomUserAgent`, select the `updatedItem` object using JSONPath `$.updatedItem`, and apply the regex `(?<=\\\"id\\\":)\\d+` to extract its `id` value.",
				"After execution, the extracted ID is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Post}}",
				"onElement": "$.updatedItem",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=\\\"id\\\":)\\d+"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid XPath expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --ContentType argument",
						"Missing --Encoding argument",
						"Missing --Header argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Network error or timeout",
						"No matching element in XML response",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The `<Status>` element text is returned from the XML response.",
					"notes": "Selects the `<Status>` element using XPath.",
					"test_case": "send_http_request_post_status_text_xpath_plain_body_ascii_and_multiple_headers",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"EncodingManagement",
					"HeaderManagement",
					"HttpRequest",
					"ResponseElementExtraction",
					"SendHttpRequest",
					"XPathExtraction"
				]
			},
			"description": [
				"### SendHttpRequest: Extract Status Text via XPath with Text/Plain Body, ASCII Encoding, and Multiple Headers",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` with content type `text/plain`, the body `Name=PremiumWidget;Price=99.99;Stock=150`, encoding `ASCII`, and headers `Authorization: Basic username:password` and `UserAgent: MyCustomUserAgent`, then use the XPath `//Status` to select the `<Status>` element text from the response.",
				"After execution, that text is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Post}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid XPath expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --ContentType argument",
						"Missing --Encoding argument",
						"Missing --Header argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Missing regularExpression argument",
						"No regex match",
						"Network error or timeout",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The `<Status>` element text is extracted via regex from the XML response.",
					"notes": "Applies a regex to the XPath-selected element to extract its text.",
					"test_case": "send_http_request_post_status_text_regex_xpath_plain_body_ascii_and_multiple_headers",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"EncodingManagement",
					"HeaderManagement",
					"HttpRequest",
					"RegexValidation",
					"ResponseElementExtraction",
					"SendHttpRequest",
					"XPathExtraction"
				]
			},
			"description": [
				"### SendHttpRequest: Extract Status Text via Regex with Text/Plain Body, ASCII Encoding, and Multiple Headers",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` with content type `text/plain`, the body `Name=PremiumWidget;Price=99.99;Stock=150`, encoding `ASCII`, and headers `Authorization: Basic username:password` and `UserAgent: MyCustomUserAgent`, then select the `<Status>` element using XPath `//Status` and apply the regex `(?<=<Status>).*?(?=</Status>)` to extract its text.",
				"After execution, the extracted text is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Post}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=<Status>).*?(?=</Status>)"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid XPath expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --ContentType argument",
						"Missing --Encoding argument",
						"Missing --Header argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Missing onAttribute argument",
						"Network error or timeout",
						"No matching element in XML response",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The `status` attribute of `<Response>` is returned from the XML response.",
					"notes": "Extracts an attribute from an XML element.",
					"test_case": "send_http_request_post_response_status_attribute_plain_body_ascii_and_multiple_headers",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"EncodingManagement",
					"HeaderManagement",
					"HttpRequest",
					"ResponseAttributeExtraction",
					"SendHttpRequest",
					"XPathExtraction"
				]
			},
			"description": [
				"### SendHttpRequest: Extract Response status Attribute with Text/Plain Body, ASCII Encoding, and Multiple Headers",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` with content type `text/plain`, the body `Name=PremiumWidget;Price=99.99;Stock=150`, encoding `ASCII`, and headers `Authorization: Basic username:password` and `UserAgent: MyCustomUserAgent`, then select the `<Response>` element using XPath `//Response` and extract its `status` attribute.",
				"After execution, the attribute value is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Post}}",
				"onAttribute": "status",
				"onElement": "//Response",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid XPath expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --ContentType argument",
						"Missing --Encoding argument",
						"Missing --Header argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Missing onAttribute argument",
						"Missing regularExpression argument",
						"No regex match",
						"Network error or timeout",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The `status` attribute of `<Response>` is extracted via regex from the XML response.",
					"notes": "Applies a regex to an attribute value to extract 'success' or 'error'.",
					"test_case": "send_http_request_post_response_status_with_regex_attribute_plain_body_ascii_and_multiple_headers",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"EncodingManagement",
					"HeaderManagement",
					"HttpRequest",
					"RegexValidation",
					"ResponseAttributeExtraction",
					"SendHttpRequest",
					"XPathExtraction"
				]
			},
			"description": [
				"### SendHttpRequest: Extract Response status via Regex with Text/Plain Body, ASCII Encoding, and Multiple Headers",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` with content type `text/plain`, the body `Name=PremiumWidget;Price=99.99;Stock=150`, encoding `ASCII`, and headers `Authorization: Basic username:password` and `UserAgent: MyCustomUserAgent`, then select the `<Response>` element using XPath `//Response` and apply the regex `success|error` to its `status` attribute.",
				"After execution, the extracted status is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Post}}",
				"onAttribute": "status",
				"onElement": "//Response",
				"pluginName": "SendHttpRequest",
				"regularExpression": "success|error"
			}
		},

		{
			"description": [
				"### SendHttpRequest: POST Plain-Text Body with ASCII Encoding and Basic Auth",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` using the `SendHttpRequest` plugin with content type `text/plain`, the body `Name=PremiumWidget;Price=99.99`, encoding `ASCII`, and the header `Authorization: Basic username:password` to retrieve the full response.",
				"After execution, the raw response payload is available for subsequent extraction or validation."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99 --Header:Authorization=Basic username:password --Encoding:ASCII --Method:Post}}",
				"pluginName": "SendHttpRequest"
			},
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid URL format",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --ContentType argument",
						"Missing --Encoding argument",
						"Missing --Header argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Network error or timeout",
						"Unexpected HTTP status code",
						"Unsupported pluginName value",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "An HTTP POST with text/plain body, ASCII encoding, and Basic auth is sent and the full response is returned.",
					"notes": "Sends a text/plain POST with ASCII encoding and a Basic Authorization header.",
					"test_case": "send_http_request_post_plain_body_ascii_basicauth",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"EncodingManagement",
					"HeaderManagement",
					"HttpRequest",
					"ResponseRetrieval",
					"SendHttpRequest"
				]
			}
		},
		{
			"description": [
				"### SendHttpRequest: Extract Status Code via Regex from Plain-Text ASCII Response",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` with content type `text/plain`, the body `Name=PremiumWidget;Price=99.99`, encoding `ASCII`, and the header `Authorization: Basic username:password`, then apply the regex `(?<=Status: )\\d{3}` to extract the three-digit status code from the response.",
				"After execution, the extracted status code is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99 --Header:Authorization=Basic username:password --Encoding:ASCII --Method:Post}}",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=Status: )\\d{3}"
			},
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid URL format",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --ContentType argument",
						"Missing --Encoding argument",
						"Missing --Header argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Missing regularExpression argument",
						"No regex match",
						"Network error or timeout",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "A three-digit status code is extracted via regex from the plain-text response.",
					"notes": "Applies a regex to extract the status code from a plain-text ASCII response.",
					"test_case": "send_http_request_post_status_code_regex_plain_body_ascii_basicauth",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"EncodingManagement",
					"HeaderManagement",
					"HttpRequest",
					"RegexValidation",
					"ResponseRetrieval",
					"SendHttpRequest"
				]
			}
		},
		{
			"description": [
				"### SendHttpRequest: Select updatedItem via JSONPath from Plain-Text ASCII Response",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` with content type `text/plain`, the body `Name=PremiumWidget;Price=99.99;Stock=150`, encoding `ASCII`, and the header `Authorization: Basic username:password`, then use the JSONPath `$.updatedItem` to select the updated item object from the JSON response.",
				"After execution, that object is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Encoding:ASCII --Method:Post}}",
				"onElement": "$.updatedItem",
				"pluginName": "SendHttpRequest"
			},
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid JSONPath expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --ContentType argument",
						"Missing --Encoding argument",
						"Missing --Header argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Network error or timeout",
						"No matching path in JSON response",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The `updatedItem` object is selected from the JSON response via JSONPath.",
					"notes": "Selects the updated item using JSONPath.",
					"test_case": "send_http_request_post_select_updateditem_jsonpath_plain_body_ascii_basicauth",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"EncodingManagement",
					"HeaderManagement",
					"HttpRequest",
					"JsonPathExtraction",
					"ResponseElementExtraction",
					"SendHttpRequest"
				]
			}
		},
		{
			"description": [
				"### SendHttpRequest: Extract updatedItem ID via Regex from Plain-Text ASCII Response",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` with content type `text/plain`, the body `Name=PremiumWidget;Price=99.99;Stock=150`, encoding `ASCII`, and the header `Authorization: Basic username:password`, then select the updated item via JSONPath `$.updatedItem` and apply the regex `(?<=\\\"id\\\":)\\d+` to extract its numeric ID.",
				"After execution, the extracted ID is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Encoding:ASCII --Method:Post}}",
				"onElement": "$.updatedItem",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=\\\"id\\\":)\\d+"
			},
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid JSONPath expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --ContentType argument",
						"Missing --Encoding argument",
						"Missing --Header argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Missing regularExpression argument",
						"No regex match",
						"Network error or timeout",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The numeric `id` field is extracted from `updatedItem` via regex.",
					"notes": "Applies a regex to extract the `id` field from the updated item.",
					"test_case": "send_http_request_post_id_with_regex_jsonpath_plain_body_ascii_basicauth",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"EncodingManagement",
					"HeaderManagement",
					"HttpRequest",
					"JsonPathExtraction",
					"RegexValidation",
					"ResponseElementExtraction",
					"SendHttpRequest"
				]
			}
		},
		{
			"description": [
				"### SendHttpRequest: Extract <Status> Text via XPath from Plain-Text ASCII Response",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` with content type `text/plain`, the body `Name=PremiumWidget;Price=99.99;Stock=150`, encoding `ASCII`, and the header `Authorization: Basic username:password`, then use the XPath `//Status` to select the `<Status>` element text from the XML response.",
				"After execution, that text is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url:https://api.example.com/v1/items --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Encoding:ASCII --Method:Post}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest"
			},
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid XPath expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --ContentType argument",
						"Missing --Encoding argument",
						"Missing --Header argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Network error or timeout",
						"No matching element in XML response",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The `<Status>` element text is returned from the XML response.",
					"notes": "Selects the `<Status>` element using XPath.",
					"test_case": "send_http_request_post_status_text_xpath_plain_body_ascii_basicauth",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"EncodingManagement",
					"HeaderManagement",
					"HttpRequest",
					"ResponseElementExtraction",
					"SendHttpRequest",
					"XPathExtraction"
				]
			}
		},
		{
			"description": [
				"### SendHttpRequest: Extract <Status> Text via Regex from Plain-Text ASCII Response",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` with content type `text/plain`, the body `Name=PremiumWidget;Price=99.99;Stock=150`, encoding `ASCII`, and the header `Authorization: Basic username:password`, then select the `<Status>` element using XPath `//Status` and apply the regex `(?<=<Status>).*?(?=</Status>)` to extract its text.",
				"After execution, the extracted text is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url=https://api.example.com/v1/items --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Encoding:ASCII --Method:Post}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=<Status>).*?(?=</Status>)"
			},
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid XPath expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --ContentType argument",
						"Missing --Encoding argument",
						"Missing --Header argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Missing regularExpression argument",
						"No regex match",
						"Network error or timeout",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The `<Status>` element text is extracted via regex from the XML response.",
					"notes": "Applies a regex to extract the `<Status>` element text.",
					"test_case": "send_http_request_post_status_text_regex_xpath_plain_body_ascii_basicauth",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"EncodingManagement",
					"HeaderManagement",
					"HttpRequest",
					"RegexValidation",
					"ResponseElementExtraction",
					"SendHttpRequest",
					"XPathExtraction"
				]
			}
		},
		{
			"description": [
				"### SendHttpRequest: Extract Response status Attribute from Plain-Text ASCII Response",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` with content type `text/plain`, the body `Name=PremiumWidget;Price=99.99;Stock=150`, encoding `ASCII`, and the header `Authorization: Basic username:password`, then select the `<Response>` element using XPath `//Response` and extract its `status` attribute.",
				"After execution, the attribute value is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url=https://api.example.com/v1/items --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Encoding:ASCII --Method:Post}}",
				"onAttribute": "status",
				"onElement": "//Response",
				"pluginName": "SendHttpRequest"
			},
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid XPath expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --ContentType argument",
						"Missing --Encoding argument",
						"Missing --Header argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Missing onAttribute argument",
						"Network error or timeout",
						"No matching element in XML response",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The `status` attribute of `<Response>` is returned from the XML response.",
					"notes": "Extracts an attribute from the `<Response>` element.",
					"test_case": "send_http_request_post_response_status_attribute_plain_body_ascii_basicauth",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"EncodingManagement",
					"HeaderManagement",
					"HttpRequest",
					"ResponseAttributeExtraction",
					"SendHttpRequest",
					"XPathExtraction"
				]
			}
		},
		{
			"description": [
				"### SendHttpRequest: Extract and Validate Response status via Regex from Plain-Text ASCII Response",
				"",
				"This example demonstrates how to send an HTTP POST request to `https://api.example.com/v1/items` with content type `text/plain`, the body `Name=PremiumWidget;Price=99.99;Stock=150`, encoding `ASCII`, and the header `Authorization: Basic username:password`, then select the `<Response>` element using XPath `//Response` and apply the regex `success|error` to its `status` attribute for validation.",
				"After execution, the extracted status is available for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Url=https://api.example.com/v1/items --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Encoding:ASCII --Method:Post}}",
				"onAttribute": "status",
				"onElement": "//Response",
				"pluginName": "SendHttpRequest",
				"regularExpression": "success|error"
			},
			"context": {
				"annotations": {
					"edge_cases": [
						"Invalid XPath expression",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Missing --Body argument",
						"Missing --ContentType argument",
						"Missing --Encoding argument",
						"Missing --Header argument",
						"Missing --Method argument",
						"Missing --Url argument",
						"Missing onAttribute argument",
						"Missing regularExpression argument",
						"No regex match",
						"Network error or timeout",
						"Unexpected HTTP status code",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The `status` attribute is extracted and validated against `success|error`.",
					"notes": "Applies a regex to validate the `status` attribute of the `<Response>` element.",
					"test_case": "send_http_request_post_response_status_regex_attribute_plain_body_ascii_basicauth",
					"version": "1.0"
				},
				"labels": [
					"BodyManagement",
					"EncodingManagement",
					"HeaderManagement",
					"HttpRequest",
					"RegexValidation",
					"ResponseAttributeExtraction",
					"SendHttpRequest",
					"XPathExtraction"
				]
			}
		},

		{
			"description": [
				""
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items --ContentType:x-www-form-urlencoded --Field:Name=PremiumWidget --Field:Price=99.99 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Post}}",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				""
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items --ContentType:x-www-form-urlencoded --Field:Name=PremiumWidget --Field:Price=99.99 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Post}}",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=Status: )\\d{3}"
			}
		},
		{
			"description": [
				""
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items --ContentType:x-www-form-urlencoded --Field:Name=PremiumWidget --Field:Price=99.99 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Post}}",
				"onElement": "$.updatedItem",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				""
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items --ContentType:x-www-form-urlencoded --Field:Name=PremiumWidget --Field:Price=99.99 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Post}}",
				"onElement": "$.updatedItem",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=\\\"id\\\":)\\d+"
			}
		},
		{
			"description": [
				""
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items --ContentType:x-www-form-urlencoded --Field:Name=PremiumWidget --Field:Price=99.99 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Post}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				""
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items --ContentType:x-www-form-urlencoded --Field:Name=PremiumWidget --Field:Price=99.99 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Post}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=<Status>).*?(?=</Status>)"
			}
		},
		{
			"description": [
				""
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items --ContentType:x-www-form-urlencoded --Field:Name=PremiumWidget --Field:Price=99.99 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Post}}",
				"onElement": "//Response",
				"onAttribute": "status",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				""
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items --ContentType:x-www-form-urlencoded --Field:Name=PremiumWidget --Field:Price=99.99 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Post}}",
				"onElement": "//Response",
				"onAttribute": "status",
				"pluginName": "SendHttpRequest",
				"regularExpression": "success|error"
			}
		},

		{
			"description": [
				"Send a Post request with a plain-text payload to update the item's name and price."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items --ContentType:text/xml --Body:<Item><Name>PremiumWidget</Name><Price>99.99</Price></Item> --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Post}}",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the HTTP status code from a plain-text response line like \"Status: 200 OK\"."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items --ContentType:text/xml --Body:<Item><Name>PremiumWidget</Name><Price>99.99</Price></Item> --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Post}}",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=Status: )\\d{3}"
			}
		},
		{
			"description": [
				"Select the updated item object in the JSON response under the \"updatedItem\" key."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items --ContentType:text/xml --Body:<Item><Name>PremiumWidget</Name><Price>99.99</Price></Item> --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Post}}",
				"onElement": "$.updatedItem",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the numeric item ID from the JSON \"updatedItem.id\" field."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items --ContentType:text/xml --Body:<Item><Name>PremiumWidget</Name><Price>99.99</Price></Item> --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Post}}",
				"onElement": "$.updatedItem",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=\\\"id\\\":)\\d+"
			}
		},
		{
			"description": [
				"Select the <Status> element from an XML response after the Post."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items --ContentType:text/xml --Body:<Item><Name>PremiumWidget</Name><Price>99.99</Price></Item> --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Post}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the text inside the <Status> tag, e.g. \"Success\" or \"Failure\"."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items --ContentType:text/xml --Body:<Item><Name>PremiumWidget</Name><Price>99.99</Price></Item> --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Post}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=<Status>).*?(?=</Status>)"
			}
		},
		{
			"description": [
				"Get the status attribute from the <Response> element in the XML reply."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items --ContentType:text/xml --Body:<Item><Name>PremiumWidget</Name><Price>99.99</Price></Item> --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Post}}",
				"onElement": "//Response",
				"onAttribute": "status",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Validate that the status attribute is either \"success\" or \"error\"."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items --ContentType:text/xml --Body:<Item><Name>PremiumWidget</Name><Price>99.99</Price></Item> --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Post}}",
				"onElement": "//Response",
				"onAttribute": "status",
				"pluginName": "SendHttpRequest",
				"regularExpression": "success|error"
			}
		},

		// DELETE
		{
			"description": [
				"Delete the item with ID 567 using bearer authentication."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --Method:Delete}}",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the API's confirmation message from the JSON response."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --Method:Delete}}",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=\"message\":\")[^\"]+"
			}
		},
		{
			"description": [
				"Select the <Status> element from an XML delete-response."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --Method:Delete}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the text inside the <Status> tag from the XML response."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --Method:Delete}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=<Status>).*?(?=</Status>)"
			}
		},
		{
			"description": [
				"Select the deleted record object from a JSON array of results."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --Method:Delete}}",
				"onElement": "$.results[?(@.deleted==true)]",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Take only the first object from the JSON results array."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --Method:Delete}}",
				"onElement": "$.results[0]",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=\"id\":)\\d+"
			}
		},
		{
			"description": [
				"Get the status attribute from the <Item> element in the XML response."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --Method:Delete}}",
				"onElement": "//Item",
				"onAttribute": "status",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the numeric ID from the <Item> element's id attribute."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --Method:Delete}}",
				"onElement": "//Item",
				"onAttribute": "id",
				"pluginName": "SendHttpRequest",
				"regularExpression": "\\d+"
			}
		},

		{
			"description": [
				"Delete the item with ID 567 using bearer authentication."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --Header:Authorization=Basic username:password --Method:Delete}}",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the API's confirmation message from the JSON response."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --Header:Authorization=Basic username:password --Method:Delete}}",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=\"message\":\")[^\"]+"
			}
		},
		{
			"description": [
				"Select the <Status> element from an XML delete-response."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --Header:Authorization=Basic username:password --Method:Delete}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the text inside the <Status> tag from the XML response."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --Header:Authorization=Basic username:password --Method:Delete}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=<Status>).*?(?=</Status>)"
			}
		},
		{
			"description": [
				"Select the deleted record object from a JSON array of results."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --Header:Authorization=Basic username:password --Method:Delete}}",
				"onElement": "$.results[?(@.deleted==true)]",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Take only the first object from the JSON results array."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --Header:Authorization=Basic username:password --Method:Delete}}",
				"onElement": "$.results[0]",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=\"id\":)\\d+"
			}
		},
		{
			"description": [
				"Get the status attribute from the <Item> element in the XML response."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --Header:Authorization=Basic username:password --Method:Delete}}",
				"onElement": "//Item",
				"onAttribute": "status",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the numeric ID from the <Item> element's id attribute."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --Header:Authorization=Basic username:password --Method:Delete}}",
				"onElement": "//Item",
				"onAttribute": "id",
				"pluginName": "SendHttpRequest",
				"regularExpression": "\\d+"
			}
		},

		{
			"description": [
				"Delete the item with ID 567 using bearer authentication."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --Header:Authorization=Bearer YourAccessToken --Header:UserAgent=MyCustomUserAgent --Method:Delete}}",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the API's confirmation message from the JSON response."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --Header:Authorization=Bearer YourAccessToken --Header:UserAgent=MyCustomUserAgent --Method:Delete}}",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=\"message\":\")[^\"]+"
			}
		},
		{
			"description": [
				"Select the <Status> element from an XML delete-response."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --Header:Authorization=Bearer YourAccessToken --Header:UserAgent=MyCustomUserAgent --Method:Delete}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the text inside the <Status> tag from the XML response."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --Header:Authorization=Bearer YourAccessToken --Header:UserAgent=MyCustomUserAgent --Method:Delete}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=<Status>).*?(?=</Status>)"
			}
		},
		{
			"description": [
				"Select the deleted record object from a JSON array of results."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --Header:Authorization=Bearer YourAccessToken --Header:UserAgent=MyCustomUserAgent --Method:Delete}}",
				"onElement": "$.results[?(@.deleted==true)]",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Take only the first object from the JSON results array."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --Header:Authorization=Bearer YourAccessToken --Header:UserAgent=MyCustomUserAgent --Method:Delete}}",
				"onElement": "$.results[0]",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=\"id\":)\\d+"
			}
		},
		{
			"description": [
				"Get the status attribute from the <Item> element in the XML response."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --Header:Authorization=Bearer YourAccessToken --Header:UserAgent=MyCustomUserAgent --Method:Delete}}",
				"onElement": "//Item",
				"onAttribute": "status",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the numeric ID from the <Item> element's id attribute."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --Header:Authorization=Bearer YourAccessToken --Header:UserAgent=MyCustomUserAgent --Method:Delete}}",
				"onElement": "//Item",
				"onAttribute": "id",
				"pluginName": "SendHttpRequest",
				"regularExpression": "\\d+"
			}
		},

		// PUT
		{
			"description": [
				"Send a Put request to update the item's name and price."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Method:Put}}",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the confirmation message from the JSON response."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Method:Put}}",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=\"message\":\")[^\"]+"
			}
		},
		{
			"description": [
				"Select the updated item object from the JSON response."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Method:Put}}",
				"onElement": "$.updatedItem",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the item ID from the JSON response."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Method:Put}}",
				"onElement": "$.updatedItem",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=\"id\":)\\d+"
			}
		},
		{
			"description": [
				"Select the <Status> element from an XML response."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Method:Put}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the text inside the <Status> tag from the XML response."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Method:Put}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=<Status>).*?(?=</Status>)"
			}
		},
		{
			"description": [
				"Get the status attribute from the <Response> element in the XML response."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Method:Put}}",
				"onElement": "//Response",
				"onAttribute": "status",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Validate that the status attribute value is either 'success' or 'failure'."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Method:Put}}",
				"onElement": "//Response",
				"onAttribute": "status",
				"pluginName": "SendHttpRequest",
				"regularExpression": "success|failure"
			}
		},

		{
			"description": [
				"Send a Put request to update the item's name and price."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Header:Authorization=Basic username:password --Method:Put}}",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the confirmation message from the JSON response."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Header:Authorization=Basic username:password --Method:Put}}",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=\"message\":\")[^\"]+"
			}
		},
		{
			"description": [
				"Select the updated item object from the JSON response."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Header:Authorization=Basic username:password --Method:Put}}",
				"onElement": "$.updatedItem",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the item ID from the JSON response."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Header:Authorization=Basic username:password --Method:Put}}",
				"onElement": "$.updatedItem",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=\"id\":)\\d+"
			}
		},
		{
			"description": [
				"Select the <Status> element from an XML response."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Header:Authorization=Basic username:password --Method:Put}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the text inside the <Status> tag from the XML response."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Header:Authorization=Basic username:password --Method:Put}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=<Status>).*?(?=</Status>)"
			}
		},
		{
			"description": [
				"Get the status attribute from the <Response> element in the XML response."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Header:Authorization=Basic username:password --Method:Put}}",
				"onElement": "//Response",
				"onAttribute": "status",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Validate that the status attribute value is either 'success' or 'failure'."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Header:Authorization=Basic username:password --Method:Put}}",
				"onElement": "//Response",
				"onAttribute": "status",
				"pluginName": "SendHttpRequest",
				"regularExpression": "success|failure"
			}
		},

		{
			"description": [
				"Send a Put request to update the item's name and price."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Method:Put}}",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the confirmation message from the JSON response."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Method:Put}}",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=\"message\":\")[^\"]+"
			}
		},
		{
			"description": [
				"Select the updated item object from the JSON response."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Method:Put}}",
				"onElement": "$.updatedItem",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the item ID from the JSON response."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Method:Put}}",
				"onElement": "$.updatedItem",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=\"id\":)\\d+"
			}
		},
		{
			"description": [
				"Select the <Status> element from an XML response."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Method:Put}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the text inside the <Status> tag from the XML response."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Method:Put}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=<Status>).*?(?=</Status>)"
			}
		},
		{
			"description": [
				"Get the status attribute from the <Response> element in the XML response."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Method:Put}}",
				"onElement": "//Response",
				"onAttribute": "status",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Validate that the status attribute value is either 'success' or 'failure'."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Method:Put}}",
				"onElement": "//Response",
				"onAttribute": "status",
				"pluginName": "SendHttpRequest",
				"regularExpression": "success|failure"
			}
		},

		{
			"description": [
				"Send a Put request with a plain-text payload to update the item's name and price."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99 --Method:Put}}",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				""
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99 --Method:Put}}",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=Status: )\\d{3}"
			}
		},
		{
			"description": [
				"Select the updated item object in the JSON response under the ",
				"updatedItem\" key.\""
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Method:Put}}",
				"onElement": "$.updatedItem",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the numeric item ID from the JSON ",
				"updatedItem.id\" field.\""
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Method:Put}}",
				"onElement": "$.updatedItem",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=\\\"id\\\":)\\d+"
			}
		},
		{
			"description": [
				"Select the <Status> element from an XML response after the Put."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Method:Put}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the text inside the <Status> tag, e.g. \"Success\" or \"Failure\"."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Method:Put}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=<Status>).*?(?=</Status>)"
			}
		},
		{
			"description": [
				"Get the status attribute from the <Response> element in the XML reply."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Method:Put}}",
				"onElement": "//Response",
				"onAttribute": "status",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Validate that the status attribute is either \"success\" or \"error\"."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Method:Put}}",
				"onElement": "//Response",
				"onAttribute": "status",
				"pluginName": "SendHttpRequest",
				"regularExpression": "success|error"
			}
		},

		{
			"description": [
				"Send a Put request with a plain-text payload to update the item's name and price."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99 --Header:Authorization=Basic username:password --Method:Put}}",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				""
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99 --Header:Authorization=Basic username:password --Method:Put}}",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=Status: )\\d{3}"
			}
		},
		{
			"description": [
				"Select the updated item object in the JSON response under the ",
				"updatedItem\" key.\""
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Method:Put}}",
				"onElement": "$.updatedItem",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the numeric item ID from the JSON ",
				"updatedItem.id\" field.\""
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Method:Put}}",
				"onElement": "$.updatedItem",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=\\\"id\\\":)\\d+"
			}
		},
		{
			"description": [
				"Select the <Status> element from an XML response after the Put."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Method:Put}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the text inside the <Status> tag, e.g. \"Success\" or \"Failure\"."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Method:Put}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=<Status>).*?(?=</Status>)"
			}
		},
		{
			"description": [
				"Get the status attribute from the <Response> element in the XML reply."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Method:Put}}",
				"onElement": "//Response",
				"onAttribute": "status",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Validate that the status attribute is either \"success\" or \"error\"."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Method:Put}}",
				"onElement": "//Response",
				"onAttribute": "status",
				"pluginName": "SendHttpRequest",
				"regularExpression": "success|error"
			}
		},

		{
			"description": [
				"Send a Put request with a plain-text payload to update the item's name and price."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Method:Put}}",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				""
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Method:Put}}",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=Status: )\\d{3}"
			}
		},
		{
			"description": [
				"Select the updated item object in the JSON response under the ",
				"updatedItem\" key.\""
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Method:Put}}",
				"onElement": "$.updatedItem",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the numeric item ID from the JSON ",
				"updatedItem.id\" field.\""
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Method:Put}}",
				"onElement": "$.updatedItem",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=\\\"id\\\":)\\d+"
			}
		},
		{
			"description": [
				"Select the <Status> element from an XML response after the Put."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Method:Put}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the text inside the <Status> tag, e.g. \"Success\" or \"Failure\"."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Method:Put}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=<Status>).*?(?=</Status>)"
			}
		},
		{
			"description": [
				"Get the status attribute from the <Response> element in the XML reply."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Method:Put}}",
				"onElement": "//Response",
				"onAttribute": "status",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Validate that the status attribute is either \"success\" or \"error\"."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Method:Put}}",
				"onElement": "//Response",
				"onAttribute": "status",
				"pluginName": "SendHttpRequest",
				"regularExpression": "success|error"
			}
		},

		{
			"description": [
				"Send a Put request with a plain-text payload to update the item's name and price."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99 --Encoding:ASCII --Method:Put}}",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the HTTP status code from a plain-text response line like \"Status: 200 OK\"."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99 --Encoding:ASCII --Method:Put}}",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=Status: )\\d{3}"
			}
		},
		{
			"description": [
				"Select the updated item object in the JSON response under the \"updatedItem\" key."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Encoding:ASCII --Method:Put}}",
				"onElement": "$.updatedItem",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the numeric item ID from the JSON \"updatedItem.id\" field."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Encoding:ASCII --Method:Put}}",
				"onElement": "$.updatedItem",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=\\\"id\\\":)\\d+"
			}
		},
		{
			"description": [
				"Select the <Status> element from an XML response after the Put."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Encoding:ASCII --Method:Put}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the text inside the <Status> tag, e.g. \"Success\" or \"Failure\"."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Encoding:ASCII --Method:Put}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=<Status>).*?(?=</Status>)"
			}
		},
		{
			"description": [
				"Get the status attribute from the <Response> element in the XML reply."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Encoding:ASCII --Method:Put}}",
				"onElement": "//Response",
				"onAttribute": "status",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Validate that the status attribute is either \"success\" or \"error\"."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Encoding:ASCII --Method:Put}}",
				"onElement": "//Response",
				"onAttribute": "status",
				"pluginName": "SendHttpRequest",
				"regularExpression": "success|error"
			}
		},

		{
			"description": [
				"Send a Put request with a plain-text payload to update the item's name and price."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99 --Header:Authorization=Basic username:password --Encoding:ASCII --Method:Put}}",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the HTTP status code from a plain-text response line like \"Status: 200 OK\"."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99 --Header:Authorization=Basic username:password --Encoding:ASCII --Method:Put}}",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=Status: )\\d{3}"
			}
		},
		{
			"description": [
				"Select the updated item object in the JSON response under the \"updatedItem\" key."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Encoding:ASCII --Method:Put}}",
				"onElement": "$.updatedItem",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the numeric item ID from the JSON \"updatedItem.id\" field."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Encoding:ASCII --Method:Put}}",
				"onElement": "$.updatedItem",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=\\\"id\\\":)\\d+"
			}
		},
		{
			"description": [
				"Select the <Status> element from an XML response after the Put."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Encoding:ASCII --Method:Put}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the text inside the <Status> tag, e.g. \"Success\" or \"Failure\"."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Encoding:ASCII --Method:Put}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=<Status>).*?(?=</Status>)"
			}
		},
		{
			"description": [
				"Get the status attribute from the <Response> element in the XML reply."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Encoding:ASCII --Method:Put}}",
				"onElement": "//Response",
				"onAttribute": "status",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Validate that the status attribute is either \"success\" or \"error\"."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Encoding:ASCII --Method:Put}}",
				"onElement": "//Response",
				"onAttribute": "status",
				"pluginName": "SendHttpRequest",
				"regularExpression": "success|error"
			}
		},

		{
			"description": [
				"Send a Put request with a plain-text payload to update the item's name and price."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Put}}",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the HTTP status code from a plain-text response line like \"Status: 200 OK\"."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Put}}",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=Status: )\\d{3}"
			}
		},
		{
			"description": [
				"Select the updated item object in the JSON response under the \"updatedItem\" key."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Put}}",
				"onElement": "$.updatedItem",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the numeric item ID from the JSON \"updatedItem.id\" field."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Put}}",
				"onElement": "$.updatedItem",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=\\\"id\\\":)\\d+"
			}
		},
		{
			"description": [
				"Select the <Status> element from an XML response after the Put."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Put}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the text inside the <Status> tag, e.g. \"Success\" or \"Failure\"."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Put}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=<Status>).*?(?=</Status>)"
			}
		},
		{
			"description": [
				"Get the status attribute from the <Response> element in the XML reply."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Put}}",
				"onElement": "//Response",
				"onAttribute": "status",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Validate that the status attribute is either \"success\" or \"error\"."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Put}}",
				"onElement": "//Response",
				"onAttribute": "status",
				"pluginName": "SendHttpRequest",
				"regularExpression": "success|error"
			}
		},

		{
			"description": [
				"Send a Put request with a plain-text payload to update the item's name and price."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:x-www-form-urlencoded --Field:Name=PremiumWidget --Field:Price=99.99 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Put}}",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the HTTP status code from a plain-text response line like \"Status: 200 OK\"."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:x-www-form-urlencoded --Field:Name=PremiumWidget --Field:Price=99.99 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Put}}",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=Status: )\\d{3}"
			}
		},
		{
			"description": [
				"Select the updated item object in the JSON response under the \"updatedItem\" key."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:x-www-form-urlencoded --Field:Name=PremiumWidget --Field:Price=99.99 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Put}}",
				"onElement": "$.updatedItem",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the numeric item ID from the JSON \"updatedItem.id\" field."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:x-www-form-urlencoded --Field:Name=PremiumWidget --Field:Price=99.99 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Put}}",
				"onElement": "$.updatedItem",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=\\\"id\\\":)\\d+"
			}
		},
		{
			"description": [
				"Select the <Status> element from an XML response after the Put."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:x-www-form-urlencoded --Field:Name=PremiumWidget --Field:Price=99.99 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Put}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the text inside the <Status> tag, e.g. \"Success\" or \"Failure\"."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:x-www-form-urlencoded --Field:Name=PremiumWidget --Field:Price=99.99 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Put}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=<Status>).*?(?=</Status>)"
			}
		},
		{
			"description": [
				"Get the status attribute from the <Response> element in the XML reply."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:x-www-form-urlencoded --Field:Name=PremiumWidget --Field:Price=99.99 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Put}}",
				"onElement": "//Response",
				"onAttribute": "status",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Validate that the status attribute is either \"success\" or \"error\"."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:x-www-form-urlencoded --Field:Name=PremiumWidget --Field:Price=99.99 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Put}}",
				"onElement": "//Response",
				"onAttribute": "status",
				"pluginName": "SendHttpRequest",
				"regularExpression": "success|error"
			}
		},

		{
			"description": [
				"Send a Put request with a plain-text payload to update the item's name and price."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:text/xml --Body:<Item><Name>PremiumWidget</Name><Price>99.99</Price></Item> --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Put}}",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the HTTP status code from a plain-text response line like \"Status: 200 OK\"."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:text/xml --Body:<Item><Name>PremiumWidget</Name><Price>99.99</Price></Item> --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Put}}",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=Status: )\\d{3}"
			}
		},
		{
			"description": [
				"Select the updated item object in the JSON response under the \"updatedItem\" key."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:text/xml --Body:<Item><Name>PremiumWidget</Name><Price>99.99</Price></Item> --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Put}}",
				"onElement": "$.updatedItem",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the numeric item ID from the JSON \"updatedItem.id\" field."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:text/xml --Body:<Item><Name>PremiumWidget</Name><Price>99.99</Price></Item> --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Put}}",
				"onElement": "$.updatedItem",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=\\\"id\\\":)\\d+"
			}
		},
		{
			"description": [
				"Select the <Status> element from an XML response after the Put."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:text/xml --Body:<Item><Name>PremiumWidget</Name><Price>99.99</Price></Item> --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Put}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the text inside the <Status> tag, e.g. \"Success\" or \"Failure\"."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:text/xml --Body:<Item><Name>PremiumWidget</Name><Price>99.99</Price></Item> --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Put}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=<Status>).*?(?=</Status>)"
			}
		},
		{
			"description": [
				"Get the status attribute from the <Response> element in the XML reply."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:text/xml --Body:<Item><Name>PremiumWidget</Name><Price>99.99</Price></Item> --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Put}}",
				"onElement": "//Response",
				"onAttribute": "status",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Validate that the status attribute is either \"success\" or \"error\"."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:text/xml --Body:<Item><Name>PremiumWidget</Name><Price>99.99</Price></Item> --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Put}}",
				"onElement": "//Response",
				"onAttribute": "status",
				"pluginName": "SendHttpRequest",
				"regularExpression": "success|error"
			}
		},

		// PATCH
		{
			"description": [
				"Send a Patch request to update the item's name and price."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Method:Patch}}",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the confirmation message from the JSON response."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Method:Patch}}",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=\"message\":\")[^\"]+"
			}
		},
		{
			"description": [
				"Select the updated item object from the JSON response."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Method:Patch}}",
				"onElement": "$.updatedItem",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the item ID from the JSON response."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Method:Patch}}",
				"onElement": "$.updatedItem",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=\"id\":)\\d+"
			}
		},
		{
			"description": [
				"Select the <Status> element from an XML response."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Method:Patch}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the text inside the <Status> tag from the XML response."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Method:Patch}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=<Status>).*?(?=</Status>)"
			}
		},
		{
			"description": [
				"Get the status attribute from the <Response> element in the XML response."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Method:Patch}}",
				"onElement": "//Response",
				"onAttribute": "status",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Validate that the status attribute value is either 'success' or 'failure'."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Method:Patch}}",
				"onElement": "//Response",
				"onAttribute": "status",
				"pluginName": "SendHttpRequest",
				"regularExpression": "success|failure"
			}
		},

		{
			"description": [
				"Send a Patch request to update the item's name and price."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Header:Authorization=Basic username:password --Method:Patch}}",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the confirmation message from the JSON response."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Header:Authorization=Basic username:password --Method:Patch}}",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=\"message\":\")[^\"]+"
			}
		},
		{
			"description": [
				"Select the updated item object from the JSON response."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Header:Authorization=Basic username:password --Method:Patch}}",
				"onElement": "$.updatedItem",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the item ID from the JSON response."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Header:Authorization=Basic username:password --Method:Patch}}",
				"onElement": "$.updatedItem",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=\"id\":)\\d+"
			}
		},
		{
			"description": [
				"Select the <Status> element from an XML response."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Header:Authorization=Basic username:password --Method:Patch}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the text inside the <Status> tag from the XML response."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Header:Authorization=Basic username:password --Method:Patch}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=<Status>).*?(?=</Status>)"
			}
		},
		{
			"description": [
				"Get the status attribute from the <Response> element in the XML response."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Header:Authorization=Basic username:password --Method:Patch}}",
				"onElement": "//Response",
				"onAttribute": "status",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Validate that the status attribute value is either 'success' or 'failure'."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Header:Authorization=Basic username:password --Method:Patch}}",
				"onElement": "//Response",
				"onAttribute": "status",
				"pluginName": "SendHttpRequest",
				"regularExpression": "success|failure"
			}
		},

		{
			"description": [
				"Send a Patch request to update the item's name and price."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Method:Patch}}",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the confirmation message from the JSON response."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Method:Patch}}",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=\"message\":\")[^\"]+"
			}
		},
		{
			"description": [
				"Select the updated item object from the JSON response."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Method:Patch}}",
				"onElement": "$.updatedItem",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the item ID from the JSON response."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Method:Patch}}",
				"onElement": "$.updatedItem",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=\"id\":)\\d+"
			}
		},
		{
			"description": [
				"Select the <Status> element from an XML response."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Method:Patch}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the text inside the <Status> tag from the XML response."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Method:Patch}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=<Status>).*?(?=</Status>)"
			}
		},
		{
			"description": [
				"Get the status attribute from the <Response> element in the XML response."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Method:Patch}}",
				"onElement": "//Response",
				"onAttribute": "status",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Validate that the status attribute value is either 'success' or 'failure'."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --Body:{\"name\":\"Premium Widget\",\"price\":99.99} --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Method:Patch}}",
				"onElement": "//Response",
				"onAttribute": "status",
				"pluginName": "SendHttpRequest",
				"regularExpression": "success|failure"
			}
		},

		{
			"description": [
				"Send a Patch request with a plain-text payload to update the item's name and price."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99 --Method:Patch}}",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				""
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99 --Method:Patch}}",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=Status: )\\d{3}"
			}
		},
		{
			"description": [
				"Select the updated item object in the JSON response under the ",
				"updatedItem\" key.\""
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Method:Patch}}",
				"onElement": "$.updatedItem",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the numeric item ID from the JSON ",
				"updatedItem.id\" field.\""
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Method:Patch}}",
				"onElement": "$.updatedItem",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=\\\"id\\\":)\\d+"
			}
		},
		{
			"description": [
				"Select the <Status> element from an XML response after the Patch."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Method:Patch}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the text inside the <Status> tag, e.g. \"Success\" or \"Failure\"."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Method:Patch}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=<Status>).*?(?=</Status>)"
			}
		},
		{
			"description": [
				"Get the status attribute from the <Response> element in the XML reply."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Method:Patch}}",
				"onElement": "//Response",
				"onAttribute": "status",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Validate that the status attribute is either \"success\" or \"error\"."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Method:Patch}}",
				"onElement": "//Response",
				"onAttribute": "status",
				"pluginName": "SendHttpRequest",
				"regularExpression": "success|error"
			}
		},

		{
			"description": [
				"Send a Patch request with a plain-text payload to update the item's name and price."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99 --Header:Authorization=Basic username:password --Method:Patch}}",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				""
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99 --Header:Authorization=Basic username:password --Method:Patch}}",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=Status: )\\d{3}"
			}
		},
		{
			"description": [
				"Select the updated item object in the JSON response under the ",
				"updatedItem\" key.\""
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Method:Patch}}",
				"onElement": "$.updatedItem",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the numeric item ID from the JSON ",
				"updatedItem.id\" field.\""
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Method:Patch}}",
				"onElement": "$.updatedItem",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=\\\"id\\\":)\\d+"
			}
		},
		{
			"description": [
				"Select the <Status> element from an XML response after the Patch."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Method:Patch}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the text inside the <Status> tag, e.g. \"Success\" or \"Failure\"."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Method:Patch}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=<Status>).*?(?=</Status>)"
			}
		},
		{
			"description": [
				"Get the status attribute from the <Response> element in the XML reply."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Method:Patch}}",
				"onElement": "//Response",
				"onAttribute": "status",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Validate that the status attribute is either \"success\" or \"error\"."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Method:Patch}}",
				"onElement": "//Response",
				"onAttribute": "status",
				"pluginName": "SendHttpRequest",
				"regularExpression": "success|error"
			}
		},

		{
			"description": [
				"Send a Patch request with a plain-text payload to update the item's name and price."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Method:Patch}}",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				""
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Method:Patch}}",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=Status: )\\d{3}"
			}
		},
		{
			"description": [
				"Select the updated item object in the JSON response under the ",
				"updatedItem\" key.\""
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Method:Patch}}",
				"onElement": "$.updatedItem",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the numeric item ID from the JSON ",
				"updatedItem.id\" field.\""
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Method:Patch}}",
				"onElement": "$.updatedItem",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=\\\"id\\\":)\\d+"
			}
		},
		{
			"description": [
				"Select the <Status> element from an XML response after the Patch."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Method:Patch}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the text inside the <Status> tag, e.g. \"Success\" or \"Failure\"."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Method:Patch}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=<Status>).*?(?=</Status>)"
			}
		},
		{
			"description": [
				"Get the status attribute from the <Response> element in the XML reply."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Method:Patch}}",
				"onElement": "//Response",
				"onAttribute": "status",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Validate that the status attribute is either \"success\" or \"error\"."
			],
			"rule": {
				"argument": "{{$ --Url:https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Method:Patch}}",
				"onElement": "//Response",
				"onAttribute": "status",
				"pluginName": "SendHttpRequest",
				"regularExpression": "success|error"
			}
		},

		{
			"description": [
				"Send a Patch request with a plain-text payload to update the item's name and price."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99 --Encoding:ASCII --Method:Patch}}",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the HTTP status code from a plain-text response line like \"Status: 200 OK\"."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99 --Encoding:ASCII --Method:Patch}}",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=Status: )\\d{3}"
			}
		},
		{
			"description": [
				"Select the updated item object in the JSON response under the \"updatedItem\" key."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Encoding:ASCII --Method:Patch}}",
				"onElement": "$.updatedItem",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the numeric item ID from the JSON \"updatedItem.id\" field."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Encoding:ASCII --Method:Patch}}",
				"onElement": "$.updatedItem",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=\\\"id\\\":)\\d+"
			}
		},
		{
			"description": [
				"Select the <Status> element from an XML response after the Patch."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Encoding:ASCII --Method:Patch}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the text inside the <Status> tag, e.g. \"Success\" or \"Failure\"."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Encoding:ASCII --Method:Patch}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=<Status>).*?(?=</Status>)"
			}
		},
		{
			"description": [
				"Get the status attribute from the <Response> element in the XML reply."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Encoding:ASCII --Method:Patch}}",
				"onElement": "//Response",
				"onAttribute": "status",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Validate that the status attribute is either \"success\" or \"error\"."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Encoding:ASCII --Method:Patch}}",
				"onElement": "//Response",
				"onAttribute": "status",
				"pluginName": "SendHttpRequest",
				"regularExpression": "success|error"
			}
		},

		{
			"description": [
				"Send a Patch request with a plain-text payload to update the item's name and price."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99 --Header:Authorization=Basic username:password --Encoding:ASCII --Method:Patch}}",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the HTTP status code from a plain-text response line like \"Status: 200 OK\"."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99 --Header:Authorization=Basic username:password --Encoding:ASCII --Method:Patch}}",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=Status: )\\d{3}"
			}
		},
		{
			"description": [
				"Select the updated item object in the JSON response under the \"updatedItem\" key."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Encoding:ASCII --Method:Patch}}",
				"onElement": "$.updatedItem",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the numeric item ID from the JSON \"updatedItem.id\" field."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Encoding:ASCII --Method:Patch}}",
				"onElement": "$.updatedItem",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=\\\"id\\\":)\\d+"
			}
		},
		{
			"description": [
				"Select the <Status> element from an XML response after the Patch."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Encoding:ASCII --Method:Patch}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the text inside the <Status> tag, e.g. \"Success\" or \"Failure\"."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Encoding:ASCII --Method:Patch}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=<Status>).*?(?=</Status>)"
			}
		},
		{
			"description": [
				"Get the status attribute from the <Response> element in the XML reply."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Encoding:ASCII --Method:Patch}}",
				"onElement": "//Response",
				"onAttribute": "status",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Validate that the status attribute is either \"success\" or \"error\"."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Encoding:ASCII --Method:Patch}}",
				"onElement": "//Response",
				"onAttribute": "status",
				"pluginName": "SendHttpRequest",
				"regularExpression": "success|error"
			}
		},

		{
			"description": [
				"Send a Patch request with a plain-text payload to update the item's name and price."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Patch}}",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the HTTP status code from a plain-text response line like \"Status: 200 OK\"."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Patch}}",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=Status: )\\d{3}"
			}
		},
		{
			"description": [
				"Select the updated item object in the JSON response under the \"updatedItem\" key."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Patch}}",
				"onElement": "$.updatedItem",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the numeric item ID from the JSON \"updatedItem.id\" field."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Patch}}",
				"onElement": "$.updatedItem",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=\\\"id\\\":)\\d+"
			}
		},
		{
			"description": [
				"Select the <Status> element from an XML response after the Patch."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Patch}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the text inside the <Status> tag, e.g. \"Success\" or \"Failure\"."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Patch}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=<Status>).*?(?=</Status>)"
			}
		},
		{
			"description": [
				"Get the status attribute from the <Response> element in the XML reply."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Patch}}",
				"onElement": "//Response",
				"onAttribute": "status",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Validate that the status attribute is either \"success\" or \"error\"."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:text/plain --Body:Name=PremiumWidget;Price=99.99;Stock=150 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Patch}}",
				"onElement": "//Response",
				"onAttribute": "status",
				"pluginName": "SendHttpRequest",
				"regularExpression": "success|error"
			}
		},

		{
			"description": [
				"Send a Patch request with a plain-text payload to update the item's name and price."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:x-www-form-urlencoded --Field:Name=PremiumWidget --Field:Price=99.99 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Patch}}",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the HTTP status code from a plain-text response line like \"Status: 200 OK\"."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:x-www-form-urlencoded --Field:Name=PremiumWidget --Field:Price=99.99 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Patch}}",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=Status: )\\d{3}"
			}
		},
		{
			"description": [
				"Select the updated item object in the JSON response under the \"updatedItem\" key."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:x-www-form-urlencoded --Field:Name=PremiumWidget --Field:Price=99.99 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Patch}}",
				"onElement": "$.updatedItem",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the numeric item ID from the JSON \"updatedItem.id\" field."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:x-www-form-urlencoded --Field:Name=PremiumWidget --Field:Price=99.99 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Patch}}",
				"onElement": "$.updatedItem",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=\\\"id\\\":)\\d+"
			}
		},
		{
			"description": [
				"Select the <Status> element from an XML response after the Patch."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:x-www-form-urlencoded --Field:Name=PremiumWidget --Field:Price=99.99 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Patch}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the text inside the <Status> tag, e.g. \"Success\" or \"Failure\"."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:x-www-form-urlencoded --Field:Name=PremiumWidget --Field:Price=99.99 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Patch}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=<Status>).*?(?=</Status>)"
			}
		},
		{
			"description": [
				"Get the status attribute from the <Response> element in the XML reply."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:x-www-form-urlencoded --Field:Name=PremiumWidget --Field:Price=99.99 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Patch}}",
				"onElement": "//Response",
				"onAttribute": "status",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Validate that the status attribute is either \"success\" or \"error\"."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:x-www-form-urlencoded --Field:Name=PremiumWidget --Field:Price=99.99 --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Patch}}",
				"onElement": "//Response",
				"onAttribute": "status",
				"pluginName": "SendHttpRequest",
				"regularExpression": "success|error"
			}
		},

		{
			"description": [
				"Send a Patch request with a plain-text payload to update the item's name and price."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:text/xml --Body:<Item><Name>PremiumWidget</Name><Price>99.99</Price></Item> --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Patch}}",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the HTTP status code from a plain-text response line like \"Status: 200 OK\"."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:text/xml --Body:<Item><Name>PremiumWidget</Name><Price>99.99</Price></Item> --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Patch}}",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=Status: )\\d{3}"
			}
		},
		{
			"description": [
				"Select the updated item object in the JSON response under the \"updatedItem\" key."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:text/xml --Body:<Item><Name>PremiumWidget</Name><Price>99.99</Price></Item> --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Patch}}",
				"onElement": "$.updatedItem",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the numeric item ID from the JSON \"updatedItem.id\" field."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:text/xml --Body:<Item><Name>PremiumWidget</Name><Price>99.99</Price></Item> --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Patch}}",
				"onElement": "$.updatedItem",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=\\\"id\\\":)\\d+"
			}
		},
		{
			"description": [
				"Select the <Status> element from an XML response after the Patch."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:text/xml --Body:<Item><Name>PremiumWidget</Name><Price>99.99</Price></Item> --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Patch}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Extract the text inside the <Status> tag, e.g. \"Success\" or \"Failure\"."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:text/xml --Body:<Item><Name>PremiumWidget</Name><Price>99.99</Price></Item> --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Patch}}",
				"onElement": "//Status",
				"pluginName": "SendHttpRequest",
				"regularExpression": "(?<=<Status>).*?(?=</Status>)"
			}
		},
		{
			"description": [
				"Get the status attribute from the <Response> element in the XML reply."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:text/xml --Body:<Item><Name>PremiumWidget</Name><Price>99.99</Price></Item> --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Patch}}",
				"onElement": "//Response",
				"onAttribute": "status",
				"pluginName": "SendHttpRequest"
			}
		},
		{
			"description": [
				"Validate that the status attribute is either \"success\" or \"error\"."
			],
			"rule": {
				"argument": "{{$ --Url=https://api.example.com/v1/items/567 --ContentType:text/xml --Body:<Item><Name>PremiumWidget</Name><Price>99.99</Price></Item> --Header:Authorization=Basic username:password --Header:UserAgent=MyCustomUserAgent --Encoding:ASCII --Method:Patch}}",
				"onElement": "//Response",
				"onAttribute": "status",
				"pluginName": "SendHttpRequest",
				"regularExpression": "success|error"
			}
		}
	],
	"key": "SendHttpRequest",
	"manifestVersion": 4,
	"outputParameters": [
		{
			"description": [
				"Extracted content from the HTTP response body after applying element, attribute, or pattern rules.",
				"When no extraction rules are set, the full response body is available.",
				"Processed content returned by the HTTP call is available through this parameter."
			],
			"name": "HttpResponse",
			"type": "Any"
		},
		{
			"description": [
				"Headers returned by the HTTP response as name–value pairs.",
				"Metadata such as content type, cache directives, and server information included.",
				"Values available as a key–value map within the workflow."
			],
			"name": "HttpResponseHeaders",
			"type": "Any"
		},
		{
			"description": [
				"Numeric HTTP status code returned by the server.",
				"Common codes include success (200), redirection (3xx), client errors (4xx), and server errors (5xx).",
				"Status code values guide decision flow based on request outcome."
			],
			"name": "HttpStatusCode",
			"type": "Any"
		}
	],
	"parameters": [
		{
			"description": [
				"Data sent in the body of POST or PUT requests to the server.",
				"It carries information like form entries or JSON payloads.",
				"Correct body content ensures the server receives the intended data."
			],
			"name": "Body",
			"type": "String"
		},
		{
			"description": [
				"Defines how the server should interpret the request body format.",
				"Formats include JSON, XML, plain text, or binary data.",
				"Correct content type ensures the server parses the data correctly."
			],
			"name": "ContentType",
			"type": "String",
			"values": [
				{
					"description": [
						"JavaScript Object Notation is a lightweight format for structured data.",
						"It is easy for people to read and machines to parse.",
						"APIs often use JSON for data exchange."
					],
					"name": "application/json"
				},
				{
					"description": [
						"A generic binary format for data without a specific type.",
						"It allows transferring any arbitrary binary content.",
						"Use it when the data format is unknown or varied."
					],
					"name": "application/octet-stream"
				},
				{
					"description": [
						"Portable Document Format preserves document layout and appearance.",
						"It is ideal for forms, manuals, and print-ready documents.",
						"Readers display PDFs consistently across devices."
					],
					"name": "application/pdf"
				},
				{
					"description": [
						"Extensible Markup Language represents structured data with tags.",
						"It works for both human reading and machine processing.",
						"XML is common for web services and configuration files."
					],
					"name": "application/xml"
				},
				{
					"description": [
						"MPEG audio format compresses sound files with good quality.",
						"It is widely used for music and spoken audio online.",
						"MP3 files play on most devices without extra software."
					],
					"name": "audio/mpeg"
				},
				{
					"description": [
						"JPEG image format compresses photos with small file sizes.",
						"It works best for complex images with many colors.",
						"Most web photos use JPEG for balance between quality and size."
					],
					"name": "image/jpeg"
				},
				{
					"description": [
						"PNG image format uses lossless compression for clear graphics.",
						"It supports transparency for layered designs.",
						"Web icons and logos often use PNG for sharp detail."
					],
					"name": "image/png"
				},
				{
					"description": [
						"Multipart form data allows uploading files with form fields.",
						"It bundles text entries and binary files in one request.",
						"Web forms use it to send images, documents, and text together."
					],
					"name": "multipart/form-data"
				},
				{
					"description": [
						"CSS style sheets describe how HTML content looks on a page.",
						"They control layout, colors, fonts, and spacing.",
						"Web pages use CSS to maintain a consistent design."
					],
					"name": "text/css"
				},
				{
					"description": [
						"HTML documents structure web content with tags.",
						"They mark headings, paragraphs, links, and lists.",
						"Browsers render HTML to display web pages."
					],
					"name": "text/html"
				},
				{
					"description": [
						"Plain text format contains unformatted characters only.",
						"It works for simple messages or logs without styling.",
						"Any device or program can read plain text files."
					],
					"name": "text/plain"
				},
				{
					"description": [
						"URL-encoded form data sends key-value pairs in the request body.",
						"Special characters become percent-encoded codes.",
						"Browsers use it when submitting HTML forms."
					],
					"name": "application/x-www-form-urlencoded"
				},
				{
					"description": [
						"MP4 container holds video, audio, subtitles, and images.",
						"It is compatible with most players and devices.",
						"Online platforms use MP4 for smooth video streaming."
					],
					"name": "video/mp4"
				}
			]
		},
		{
			"description": [
				"Field name included in form-encoded POST or PUT requests.",
				"It pairs a field name with its value in the request body.",
				"Correct field entries ensure servers receive each form item."
			],
			"name": "Field",
			"type": "KeyValue"
		},
		{
			"description": [
				"Key-value pairs that carry extra information in the request.",
				"Each header uses a name and value separated by an equals sign.",
				"Multiple headers let you pass options like authentication or format."
			],
			"name": "Header",
			"type": "KeyValue"
		},
		{
			"description": [
				"A list of available HTTP actions like GET, POST, or custom methods.",
				"Values come from HttpMethod plugins and update automatically when new methods are added.",
				"Correct method choice ensures the server handles the request as intended."
			],
			"name": "Method",
			"type": "HttpMethod"
		},
		{
			"description": [
				"The address where the HTTP request is sent.",
				"It tells the plugin which server and resource to contact.",
				"Accurate URLs ensure requests reach the intended endpoint."
			],
			"name": "Url",
			"type": "String"
		}
	],
	"platforms": [
		"Any"
	],
	"pluginType": "Action",
	"properties": [
		{
			"description": [
				"A single string or expression that covers address, method, headers, body, and other settings for a web request.",
				"It can be a fixed string or an expression that runs at execution time."
			],
			"mandatory": true,
			"name": "Argument",
			"type": "String|Expression"
		},
		{
			"description": [
				"An attribute name used to get information from an XML element.",
				"It only applies to XML data and works alongside element location.",
				"Accurate naming ensures you capture the right value."
			],
			"mandatory": false,
			"name": "OnAttribute",
			"type": "String"
		},
		{
			"description": [
				"A path expression that finds the right part of XML or JSON data.",
				"XPath works for XML and JSONPath works for JSON responses.",
				"Correct path choice ensures you target the intended data."
			],
			"mandatory": false,
			"name": "OnElement",
			"type": "String"
		},
		{
			"default": "(?s).*",
			"description": [
				"A text pattern that refines data after extraction.",
				"It keeps only the parts that match the pattern.",
				"Refined data makes following steps more accurate.",
				"Pattern matching helps parse or check specific text."
			],
			"mandatory": false,
			"name": "RegularExpression",
			"type": "Regex"
		}
	],
	"protocol": {
		"apiDocumentation": "None",
		"w3c": "None"
	},
	"summary": [
		"The SendHttpRequest plugin lets automation workflows send HTTP GET, POST, PUT, DELETE, or custom method requests to any URL at runtime.",
		"It allows configuring headers, body content, and query parameters on the fly for precise API interactions.",
		"It captures response status codes, headers, and body content to feed into subsequent automation steps."
	]
}
