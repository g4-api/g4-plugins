{
	"author": {
		"name": "Roei Sabag",
		"link": "https://www.linkedin.com/in/roei-sabag-247aa18/"
	},
	"categories": [
		"Validations"
	],
	"context": {
		"integration": {
			"sequentialWorkflow": {
				"$type": "Action",
				"componentType": "task",
				"iconProvider": "assert",
				"model": "ActionRuleModel"
			},
			"rag": {
				"description": "The Assert plugin automates the validation of expected conditions during automation to ensure reliable and accurate process execution. It supports dynamic assertion handling, regex-based data extraction, and robust exception management.",
				"qa": [
					{
						"question": "What is the Assert plugin?",
						"answer": "It is a tool that verifies critical conditions in automation workflows by ensuring UI elements and data values match predefined expectations."
					},
					{
						"question": "How does the Assert plugin enhance workflow reliability?",
						"answer": "By performing dynamic condition checks and using flexible operators, it quickly identifies discrepancies to ensure processes perform as intended."
					},
					{
						"question": "What key features does the Assert plugin offer?",
						"answer": "It provides flexible assertions, regex-based data extraction, dynamic validation handling, and robust exception management."
					},
					{
						"question": "What types of validations can the Assert plugin perform?",
						"answer": "It can validate element visibility, text equality, numerical comparisons, attribute values, and pattern matching using regular expressions."
					},
					{
						"question": "What are the primary parameters used by the Assert plugin?",
						"answer": "The key parameters are 'Condition' for the type of validation, 'Expected' for the anticipated value, and 'Operator' for the comparison logic."
					},
					{
						"question": "What configurable properties does the Assert plugin provide?",
						"answer": "It offers properties such as 'Argument' for the assertion expression, 'Locator' (defaulting to Xpath) for element identification, 'OnAttribute' for attribute checks, 'OnElement' for element selection, and 'RegularExpression' for pattern-based validation."
					},
					{
						"question": "Who is the author of the Assert plugin?",
						"answer": "It was developed by Roei Sabag, an experienced professional in automation and RPA solutions."
					},
					{
						"question": "Which category and platforms does the Assert plugin support?",
						"answer": "The plugin falls under the 'Validations' category and is designed to work on any platform."
					},
					{
						"question": "What is the integration context of the Assert plugin?",
						"answer": "It is integrated into the G4 API Automation Engine, operating within sequential workflows to execute validation actions seamlessly."
					},
					{
						"question": "What is the manifest version for this plugin?",
						"answer": "The manifest version is 4, indicating the current schema iteration used for configuration."
					},
					{
						"question": "Does the Assert plugin adhere to any specific protocols?",
						"answer": "No specific protocols such as API documentation or W3C standards are defined; it operates within the proprietary G4 engine framework."
					},
					{
						"question": "What are the typical use cases for the Assert plugin?",
						"answer": "The Assert plugin is used for process validation in RPA by confirming that expected UI elements and data values are present. In automation testing, it verifies that application features function correctly and data is accurately processed."
					},
					{
						"question": "How does the Assert plugin support both RPA and automation testing?",
						"answer": "It offers flexible, dynamic validations that can be applied to various UI elements and data points, ensuring both process success in RPA and functional accuracy in testing scenarios."
					},
					{
						"question": "When should I integrate the Assert plugin into my workflow?",
						"answer": "Incorporate the Assert plugin whenever you need to verify that critical conditions are met—such as confirming element visibility, validating text or numerical values, or ensuring that attributes match expected patterns—to maintain overall process integrity."
					},
					{
						"question": "How does the Assert plugin improve error handling and troubleshooting?",
						"answer": "By validating key conditions early, it detects errors and discrepancies promptly, allowing for rapid diagnosis and correction of issues, thereby enhancing the reliability of your automation processes."
					},
					{
						"question": "How does the Assert plugin fit into the overall architecture of the G4 API Automation Engine?",
						"answer": "It serves as a critical validation checkpoint within sequential workflows, ensuring that each automation step meets the required conditions before the process proceeds."
					},
					{
						"question": "How do sequential workflows enhance the functionality of the Assert plugin?",
						"answer": "They provide an ordered execution environment that allows the Assert plugin to systematically verify conditions at each step, ensuring smooth and reliable automation."
					},
					{
						"question": "What is the significance of context integration for the Assert plugin?",
						"answer": "Context integration allows you to embed the Assert plugin into external tools, such as the sequential-workflow-designer. It provides a flexible mechanism where you can add any object under the integration field, enabling seamless connectivity with external systems and expanding the plugin's usability."
					},
					{
						"question": "How does the Assert plugin interact with other components in the automation framework?",
						"answer": "It works in tandem with related assertion, operator, and action plugins, using shared parameters and dynamic checks to maintain overall process integrity and error handling."
					},
					{
						"question": "What are the best practices for configuring the Assert plugin?",
						"answer": "When configuring the Assert plugin, define clear and specific conditions, choose precise selectors, and set appropriate operators to ensure validations accurately reflect your expectations. Regularly review and update these settings as your UI or data requirements evolve."
					},
					{
						"question": "How can I optimize my automation workflow using the Assert plugin?",
						"answer": "Integrate the Assert plugin at critical checkpoints in your workflow to verify that each process step meets expected conditions. This proactive validation helps catch errors early and maintains overall process reliability."
					},
					{
						"question": "What should I consider when setting parameters for the Assert plugin?",
						"answer": "Ensure that the 'Condition', 'Expected', and 'Operator' parameters are clearly defined and aligned with your validation logic. Use accurate element selectors and, if needed, regular expressions to extract and compare values effectively."
					},
					{
						"question": "How can I troubleshoot assertion failures effectively?",
						"answer": "Review your configuration by verifying the conditions, selectors, and expected values. Utilize logging or error messages provided by the plugin to identify mismatches, and adjust parameters as necessary to resolve discrepancies."
					},
					{
						"question": "What is the assert rule schema?",
						"answer": "The assert rule schema defines the structure for specifying validation rules used by the Assert plugin. It outlines fields such as 'argument', 'onElement', 'onAttribute', 'locator', 'regularExpression', and 'pluginName' to clearly describe how an assertion should be performed."
					},
					{
						"question": "What is the role of the 'argument' field in an assert rule?",
						"answer": "The 'argument' field holds the expression that defines the condition to be validated. It specifies the condition type, operator, and expected value, forming the core logic of the assertion."
					},
					{
						"question": "How does the 'onElement' field contribute to an assert rule?",
						"answer": "The 'onElement' field identifies the target UI element from which the value is extracted for validation. It can reference a specific element directly or through a dynamic parameter, ensuring the assertion applies to the correct component."
					},
					{
						"question": "When should the 'onAttribute' field be used in an assert rule?",
						"answer": "Use the 'onAttribute' field when you need to validate a specific attribute of an element—such as 'class' or 'value'—rather than the element's entire content."
					},
					{
						"question": "What is the purpose of the 'regularExpression' field in the assert rule schema?",
						"answer": "The 'regularExpression' field allows you to apply a regex pattern to transform or extract part of a value before performing the assertion. This is useful when the raw value needs manipulation to match the expected format."
					},
					{
						"question": "How do operator values within the assert rule affect its functionality?",
						"answer": "Operator values determine the type of comparison applied in the assertion (e.g., equal, greater than, less than, match, not match). They control how the actual value is compared to the expected one, ensuring precise and appropriate validation."
					},
					{
						"question": "Can you provide an example of an assert rule and explain its components?",
						"answer": "Consider the following example:\n\n{\n  \"$type\": \"Action\",\n  \"argument\": \"{{$ --Condition:Text --Operator:Equal --Expected:Success}}\",\n  \"onElement\": \"{{$Get-Parameter --Name:MyParam --Scope:Session}}\",\n  \"pluginName\": \"Assert\"\n}\n\nIn this rule, the '$type' field specifies the action type. The 'argument' defines that the text condition must equal 'Success'. The 'onElement' field indicates the source of the text value (which may be dynamically retrieved), and 'pluginName' confirms that this rule applies to the Assert plugin."
					},
					{
						"question": "How is the assert rule schema used in practice?",
						"answer": "In practice, the assert rule schema enables automation users to define clear and precise validation checks within their workflows. By configuring each field appropriately, users can ensure that the plugin accurately validates UI elements and data against expected conditions, thus maintaining process integrity."
					}
				]
			}
		}
	},
	"description": [
		"### Purpose",
		"",
		"The `Assert` plugin is a crucial component in the world of Robotic Process Automation (RPA) and automation testing. ",
		"Its primary purpose is to facilitate the validation of expected conditions during the execution of automation scripts. ",
		"By asserting specific conditions, it ensures that the application or system under test behaves as anticipated, contributing to the overall reliability and accuracy of automated processes.",
		"",
		"### Key Features and Functionality",
		"",
		"| Feature                             | Description                                                                                               |",
		"|-------------------------------------|-----------------------------------------------------------------------------------------------------------|",
		"| Meta Action                         | Creates and sends appropriate assertion plugins based on the provided data.                               |",
		"| Flexible Assertions                 | Supports various conditions, operators, and expected values for assertions.                               |",
		"| Data Extraction                     | Can apply regular expressions and handle element attributes for precise data extraction before assertion. |",
		"| Dynamic Assertion Handling          | Handles dynamic conditions during automation.                                                             |",
		"| Exception Handling                  | Captures and manages exceptions during the assertion process, preventing script failures.                 |",
		"| Extractions and Context Information | Captures and manages context information and supports data extractions. |",
		"",
		"### Usages in RPA",
		"",
		"| Use Case                   | Description                                                                                                                              |",
		"|----------------------------|------------------------------------------------------------------------------------------------------------------------------------------|",
		"| Process Validation         | Ensure automated processes execute successfully by validating key conditions, such as form submission success or expected data presence. |",
		"| Error Handling and Logging | Captures exceptions and logs relevant information for diagnosing issues and understanding failures.                                      |",
		"",
		"### Usages in Automation Testing",
		"",
		"| Use Case           | Description                                                                                                     |",
		"|--------------------|-----------------------------------------------------------------------------------------------------------------|",
		"| Functional Testing | Validate the correctness of application features, such as element presence or data display.                     |",
		"| Regression Testing | Verify that changes do not adversely impact expected outcomes, ensuring existing functionalities remain intact. |",
		"| Data Validation    | Assert the correctness of data manipulations, calculations, or transfers within the application.                |"
	],
	"examples": [
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"No alert present",
						"Multiple alerts present"
					],
					"expected_result": true,
					"notes": "Confirms alert detection when present. Should also consider cases with no or multiple alerts.",
					"test_case": "alert_existence_positive",
					"version": "1.0"
				},
				"labels": [
					"Alert",
					"Assert",
					"ExistenceCheck",
					"PositiveTest"
				]
			},
			"description": [
				"### Alert Existence Check",
				"",
				"This example shows how the Assert plugin verifies that an alert is present.",
				"If an alert is detected, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:AlertExists}}",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Alert present when none expected"
					],
					"expected_result": true,
					"notes": "Confirms that no alert is present. Should also consider cases where an alert appears unexpectedly.",
					"test_case": "alert_absence_positive",
					"version": "1.0"
				},
				"labels": [
					"AbsenceCheck",
					"Alert",
					"Assert",
					"PositiveTest"
				]
			},
			"description": [
				"### Alert Absence Check",
				"",
				"This example shows how the Assert plugin verifies that no alert is present.",
				"If no alert is detected, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:AlertNotExists}}",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Mismatch in driver type",
						"Driver type is null or undefined",
						"Driver type string contains extra whitespace",
						"Case sensitivity issues in driver type",
						"Driver type contains unexpected characters or formatting"
					],
					"expected_result": true,
					"notes": "Verifies that the actual driver's type exactly matches the expected value using an equality operator.",
					"test_case": "driver_type_validation",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"DriverType",
					"EqualCheck",
					"Validation"
				]
			},
			"description": [
				"### Driver Type Validation",
				"",
				"This example demonstrates how the Assert plugin verifies the driver's type using an equality check.",
				"It asserts that the actual driver's type exactly matches the expected value 'G4.WebDriver.Simulator.SimulatorDriver'.",
				"If the actual value exactly equals the expected value, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:DriverTypeName --Expected:G4.WebDriver.Simulator.SimulatorDriver --Operator:Equal}}",
				"pluginName": "Assert"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Case sensitivity issues in driver type",
						"Driver type contains unexpected characters or formatting",
						"Driver type is null or undefined",
						"Driver type string contains extra whitespace",
						"Driver type unexpectedly matches the expected value"
					],
					"expected_result": true,
					"notes": "Verifies that the actual driver's type does not match the expected value using a not-equal operator.",
					"test_case": "driver_type_mismatch_validation",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"DriverType",
					"NotEqualCheck",
					"Validation"
				]
			},
			"description": [
				"### Driver Type Mismatch Validation",
				"",
				"This example demonstrates how the Assert plugin verifies that the driver's type does not match the expected value using a not-equal operator.",
				"It asserts that the actual driver's type is different from 'G4.WebDriver.Simulator.SimulatorDriver'.",
				"If the actual value does not equal the expected value, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:DriverTypeName --Expected:G4.WebDriver.Simulator.SimulatorDriver --Operator:NotEqual}}",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Case sensitivity issues in driver type",
						"Driver type is null or undefined",
						"Driver type string contains extra whitespace",
						"Unexpected format in driver type",
						"Regex pattern does not match intended driver type"
					],
					"expected_result": true,
					"notes": "Verifies that the actual driver's type matches the expected regular expression pattern `.*SimulatorDriver` using the Match operator.",
					"test_case": "driver_type_regex_match_validation",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"DriverType",
					"MatchCheck",
					"Validation"
				]
			},
			"description": [
				"### Driver Type Regex Match Validation",
				"",
				"This example demonstrates how the Assert plugin verifies that the driver's type matches a regular expression pattern.",
				"It asserts that the actual driver's type conforms to the regex pattern `.*SimulatorDriver` using the Match operator.",
				"If the actual value matches the regular expression, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:DriverTypeName --Expected:.*SimulatorDriver --Operator:Match}}",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Case sensitivity issues in driver type",
						"Driver type is null or undefined",
						"Driver type string contains extra whitespace",
						"Regex pattern unexpectedly matches driver type",
						"Unexpected format in driver type"
					],
					"expected_result": true,
					"notes": "Verifies that the actual driver's type does not match the expected regular expression pattern `.*ChromeDriver` using the NotMatch operator.",
					"test_case": "driver_type_regex_notmatch_validation",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"DriverType",
					"NotMatchCheck",
					"Validation"
				]
			},
			"description": [
				"### Driver Type Regex NotMatch Validation",
				"",
				"This example demonstrates how the Assert plugin verifies that the driver's type does not match a regular expression pattern.",
				"It asserts that the actual driver's type does not conform to the regex pattern `.*ChromeDriver` using the NotMatch operator.",
				"If the actual value does not match the regular expression, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:DriverTypeName --Expected:.*ChromeDriver --Operator:NotMatch}}",
				"pluginName": "Assert"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element is inactive",
						"Element not found",
						"Incorrect CSS selector usage",
						"Multiple elements matching selector",
						"Unexpected DOM changes"
					],
					"expected_result": true,
					"notes": "Verifies that the element identified by `#ElementActive` is active based on the ElementActive condition.",
					"test_case": "element_active_validation",
					"version": "1.0"
				},
				"labels": [
					"ActiveCheck",
					"Assert",
					"ElementActive",
					"Validation"
				]
			},
			"description": [
				"### Element Active Validation",
				"",
				"This example demonstrates how the Assert plugin verifies that a specific element is active.",
				"The condition `ElementActive` is applied to the element identified by the CSS selector `#ElementActive`.",
				"If the element is active, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementActive}}",
				"locator": "CssSelector",
				"onElement": "#ElementActive",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element is inactive",
						"Element not found",
						"Multiple elements matching selector",
						"Unexpected DOM changes",
						"XPath syntax errors"
					],
					"expected_result": true,
					"notes": "Verifies that the element identified by the given Xpath selector is active based on the ElementActive condition.",
					"test_case": "element_active_validation_xpath",
					"version": "1.0"
				},
				"labels": [
					"ActiveCheck",
					"Assert",
					"ElementActive",
					"Validation"
				]
			},
			"description": [
				"### Element Active Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that a specific element is active.",
				"The condition `ElementActive` is applied to the element identified by the Xpath selector `//*[@id='ElementActive']`.",
				"If the element is active, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementActive}}",
				"locator": "Xpath",
				"onElement": "//*[@id='ElementActive']",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element is inactive",
						"Element not found",
						"Incorrect Id usage",
						"Multiple elements with same Id",
						"Unexpected DOM changes"
					],
					"expected_result": true,
					"notes": "Verifies that the element with the Id `ElementActive` is active based on the ElementActive condition.",
					"test_case": "element_active_validation_id",
					"version": "1.0"
				},
				"labels": [
					"ActiveCheck",
					"Assert",
					"ElementActive",
					"Validation"
				]
			},
			"description": [
				"### Element Active Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that a specific element is active using the Id locator.",
				"It asserts that the condition `ElementActive` is applied to the element with the Id `ElementActive`.",
				"If the element is active, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementActive}}",
				"locator": "Id",
				"onElement": "ElementActive",
				"pluginName": "Assert"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Attribute missing",
						"Element not found",
						"Incorrect CSS selector",
						"Unexpected attribute format"
					],
					"expected_result": true,
					"notes": "Verifies that the attribute `index` of the element identified by `#elementId` is exactly equal to `0` using the Equal operator.",
					"test_case": "element_attribute_equality_validation",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttribute",
					"EqualCheck",
					"Validation"
				]
			},
			"description": [
				"### Element Attribute Equality Validation",
				"",
				"This example demonstrates how the Assert plugin verifies that a specified attribute of an element equals a given value.",
				"It asserts that the attribute `index` of the element identified by the CSS selector `#elementId` is equal to `0` using the Equal operator.",
				"If the attribute value exactly equals `0`, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementAttribute --Operator:Equal --Expected:0}}",
				"locator": "CssSelector",
				"onAttribute": "index",
				"onElement": "#elementId",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Attribute missing",
						"Element not found",
						"Unexpected attribute format",
						"Value is not a number",
						"Xpath syntax errors"
					],
					"expected_result": true,
					"notes": "Verifies that the attribute `index` of the element identified by the given Xpath is exactly equal to `0` using the Equal operator.",
					"test_case": "element_attribute_equality_validation_xpath",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttribute",
					"EqualCheck",
					"Validation"
				]
			},
			"description": [
				"### Element Attribute Equality Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that a specified attribute of an element equals a given value using the Xpath locator.",
				"It asserts that the attribute `index` of the element identified by the Xpath `//*[@id='elementId']` is equal to `0` using the Equal operator.",
				"If the attribute value exactly equals `0`, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementAttribute --Operator:Equal --Expected:0}}",
				"locator": "Xpath",
				"onAttribute": "index",
				"onElement": "//*[@id='elementId']",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Attribute missing",
						"Element not found",
						"Incorrect Id usage",
						"Unexpected attribute format"
					],
					"expected_result": true,
					"notes": "Verifies that the attribute `index` of the element with Id `elementId` is exactly equal to `0` using the Equal operator.",
					"test_case": "element_attribute_equality_validation_id",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttribute",
					"EqualCheck",
					"Validation"
				]
			},
			"description": [
				"### Element Attribute Equality Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that a specified attribute of an element equals a given value using the Id locator.",
				"It asserts that the attribute `index` of the element with Id `elementId` is equal to `0` using the Equal operator.",
				"If the attribute value exactly equals `0`, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementAttribute --Operator:Equal --Expected:0}}",
				"locator": "Id",
				"onAttribute": "index",
				"onElement": "elementId",
				"pluginName": "Assert"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Attribute missing",
						"Element not found",
						"Incorrect CSS selector",
						"Unexpected attribute format",
						"Value unexpectedly equals 0"
					],
					"expected_result": true,
					"notes": "Verifies that the attribute `index` of the element identified by `#elementId` is not equal to `0` using the NotEqual operator.",
					"test_case": "element_attribute_not_equal_validation_css",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttribute",
					"NotEqualCheck",
					"Validation"
				]
			},
			"description": [
				"### Element Attribute NotEqual Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that a specified attribute of an element is not equal to a given value using the NotEqual operator.",
				"It asserts that the attribute `index` of the element identified by the CSS selector `#elementId` is not equal to `0`.",
				"If the attribute value does not equal `0`, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementAttribute --Operator:NotEqual --Expected:0}}",
				"locator": "CssSelector",
				"onAttribute": "index",
				"onElement": "#elementId",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Attribute missing",
						"Element not found",
						"Unexpected attribute format",
						"Value unexpectedly equals 0",
						"Xpath syntax errors"
					],
					"expected_result": true,
					"notes": "Verifies that the attribute `index` of the element identified by the given Xpath selector is not equal to `0` using the NotEqual operator.",
					"test_case": "element_attribute_not_equal_validation_xpath",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttribute",
					"NotEqualCheck",
					"Validation"
				]
			},
			"description": [
				"### Element Attribute NotEqual Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that a specified attribute of an element is not equal to a given value using the NotEqual operator.",
				"It asserts that the attribute `index` of the element identified by the Xpath selector `//*[@id='elementId']` is not equal to `0`.",
				"If the attribute value does not equal `0`, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementAttribute --Operator:NotEqual --Expected:0}}",
				"locator": "Xpath",
				"onAttribute": "index",
				"onElement": "//*[@id='elementId']",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Attribute missing",
						"Element not found",
						"Incorrect Id usage",
						"Unexpected attribute format",
						"Value unexpectedly equals 0"
					],
					"expected_result": true,
					"notes": "Verifies that the attribute `index` of the element with Id `elementId` is not equal to `0` using the NotEqual operator.",
					"test_case": "element_attribute_not_equal_validation_id",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttribute",
					"NotEqualCheck",
					"Validation"
				]
			},
			"description": [
				"### Element Attribute NotEqual Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that a specified attribute of an element is not equal to a given value using the NotEqual operator.",
				"It asserts that the attribute `index` of the element with Id `elementId` is not equal to `0`.",
				"If the attribute value does not equal `0`, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementAttribute --Operator:NotEqual --Expected:0}}",
				"locator": "Id",
				"onAttribute": "index",
				"onElement": "elementId",
				"pluginName": "Assert"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Attribute missing",
						"Element not found",
						"Incorrect CSS selector",
						"Unexpected attribute format",
						"Value is not a number",
						"Value is not greater than 0"
					],
					"expected_result": true,
					"notes": "Verifies that the attribute `index` of the element identified by `#elementId` is greater than `0` using the Greater operator.",
					"test_case": "element_attribute_greater_validation_css",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttribute",
					"GreaterCheck",
					"Validation"
				]
			},
			"description": [
				"### Element Attribute Greater Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that a specified attribute of an element is greater than a given value.",
				"It asserts that the attribute `index` of the element identified by the CSS selector `#elementId` is greater than `0` using the Greater operator.",
				"If the attribute value is greater than `0`, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementAttribute --Operator:Greater --Expected:0}}",
				"locator": "CssSelector",
				"onAttribute": "index",
				"onElement": "#elementId",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Attribute missing",
						"Element not found",
						"Unexpected attribute format",
						"Value is not a number",
						"Value is not greater than 0",
						"Xpath syntax errors"
					],
					"expected_result": true,
					"notes": "Verifies that the attribute `index` of the element identified by the given Xpath selector is greater than `0` using the Greater operator.",
					"test_case": "element_attribute_greater_validation_xpath",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttribute",
					"GreaterCheck",
					"Validation"
				]
			},
			"description": [
				"### Element Attribute Greater Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that a specified attribute of an element is greater than a given value using the Xpath locator.",
				"It asserts that the attribute `index` of the element identified by the Xpath selector `//*[@id='elementId']` is greater than `0` using the Greater operator.",
				"If the attribute value is greater than `0`, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementAttribute --Operator:Greater --Expected:0}}",
				"locator": "Xpath",
				"onAttribute": "index",
				"onElement": "//*[@id='elementId']",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Attribute missing",
						"Element not found",
						"Incorrect Id usage",
						"Unexpected attribute format",
						"Value is not a number",
						"Value is not greater than 0"
					],
					"expected_result": true,
					"notes": "Verifies that the attribute `index` of the element with Id `elementId` is greater than `0` using the Greater operator.",
					"test_case": "element_attribute_greater_validation_id",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttribute",
					"GreaterCheck",
					"Validation"
				]
			},
			"description": [
				"### Element Attribute Greater Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that a specified attribute of an element is greater than a given value using the Id locator.",
				"It asserts that the attribute `index` of the element with Id `elementId` is greater than `0` using the Greater operator.",
				"If the attribute value is greater than `0`, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementAttribute --Operator:Greater --Expected:0}}",
				"locator": "Id",
				"onAttribute": "index",
				"onElement": "elementId",
				"pluginName": "Assert"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Attribute missing",
						"Element not found",
						"Incorrect CSS selector",
						"Unexpected attribute format",
						"Value is not a number",
						"Value is not lower than 0"
					],
					"expected_result": true,
					"notes": "Verifies that the attribute `index` of the element identified by `#elementId` is lower than `0` using the Lower operator.",
					"test_case": "element_attribute_lower_validation_css",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttribute",
					"LowerCheck",
					"Validation"
				]
			},
			"description": [
				"### Element Attribute Lower Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that a specified attribute of an element is lower than a given value.",
				"It asserts that the attribute `index` of the element identified by the CSS selector `#elementId` is lower than `0` using the Lower operator.",
				"If the attribute value is lower than `0`, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementAttribute --Operator:Lower --Expected:0}}",
				"locator": "CssSelector",
				"onAttribute": "index",
				"onElement": "#elementId",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Attribute missing",
						"Element not found",
						"Unexpected attribute format",
						"Value is not a number",
						"Value is not lower than 0",
						"Xpath syntax errors"
					],
					"expected_result": true,
					"notes": "Verifies that the attribute `index` of the element identified by the given Xpath selector is lower than `0` using the Lower operator.",
					"test_case": "element_attribute_lower_validation_xpath",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttribute",
					"LowerCheck",
					"Validation"
				]
			},
			"description": [
				"### Element Attribute Lower Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that a specified attribute of an element is lower than a given value using the Xpath locator.",
				"It asserts that the attribute `index` of the element identified by the Xpath selector `//*[@id='elementId']` is lower than `0` using the Lower operator.",
				"If the attribute value is lower than `0`, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementAttribute --Operator:Lower --Expected:0}}",
				"locator": "Xpath",
				"onAttribute": "index",
				"onElement": "//*[@id='elementId']",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Attribute missing",
						"Element not found",
						"Incorrect Id usage",
						"Unexpected attribute format",
						"Value is not a number",
						"Value is not lower than 0"
					],
					"expected_result": true,
					"notes": "Verifies that the attribute `index` of the element with Id `elementId` is lower than `0` using the Lower operator.",
					"test_case": "element_attribute_lower_validation_id",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttribute",
					"LowerCheck",
					"Validation"
				]
			},
			"description": [
				"### Element Attribute Lower Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that a specified attribute of an element is lower than a given value using the Id locator.",
				"It asserts that the attribute `index` of the element with Id `elementId` is lower than `0` using the Lower operator.",
				"If the attribute value is lower than `0`, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementAttribute --Operator:Lower --Expected:0}}",
				"locator": "Id",
				"onAttribute": "index",
				"onElement": "elementId",
				"pluginName": "Assert"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Attribute missing",
						"Element not found",
						"Incorrect CSS selector",
						"Unexpected attribute format",
						"Value is less than 0",
						"Value is not a number"
					],
					"expected_result": true,
					"notes": "Verifies that the attribute `index` of the element identified by `#elementId` is greater than or equal to `0` using the GreaterEqual operator.",
					"test_case": "element_attribute_greater_equal_validation_css",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttribute",
					"GreaterEqualCheck",
					"Validation"
				]
			},
			"description": [
				"### Element Attribute GreaterEqual Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that a specified attribute of an element is greater than or equal to a given value.",
				"It asserts that the attribute `index` of the element identified by the CSS selector `#elementId` is greater than or equal to `0` using the GreaterEqual operator.",
				"If the attribute value is greater than or equal to `0`, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementAttribute --Operator:GreaterEqual --Expected:0}}",
				"locator": "CssSelector",
				"onAttribute": "index",
				"onElement": "#elementId",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Attribute missing",
						"Element not found",
						"Unexpected attribute format",
						"Value is less than 0",
						"Value is not a number",
						"Xpath syntax errors"
					],
					"expected_result": true,
					"notes": "Verifies that the attribute `index` of the element identified by the given Xpath selector is greater than or equal to `0` using the GreaterEqual operator.",
					"test_case": "element_attribute_greater_equal_validation_xpath",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttribute",
					"GreaterEqualCheck",
					"Validation"
				]
			},
			"description": [
				"### Element Attribute GreaterEqual Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that a specified attribute of an element is greater than or equal to a given value using the Xpath locator.",
				"It asserts that the attribute `index` of the element identified by the Xpath selector `//*[@id='elementId']` is greater than or equal to `0` using the GreaterEqual operator.",
				"If the attribute value is greater than or equal to `0`, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementAttribute --Operator:GreaterEqual --Expected:0}}",
				"locator": "Xpath",
				"onAttribute": "index",
				"onElement": "//*[@id='elementId']",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Attribute missing",
						"Element not found",
						"Incorrect Id usage",
						"Unexpected attribute format",
						"Value is less than 0",
						"Value is not a number"
					],
					"expected_result": true,
					"notes": "Verifies that the attribute `index` of the element with Id `elementId` is greater than or equal to `0` using the GreaterEqual operator.",
					"test_case": "element_attribute_greater_equal_validation_id",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttribute",
					"GreaterEqualCheck",
					"Validation"
				]
			},
			"description": [
				"### Element Attribute GreaterEqual Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that a specified attribute of an element is greater than or equal to a given value using the Id locator.",
				"It asserts that the attribute `index` of the element with Id `elementId` is greater than or equal to `0` using the GreaterEqual operator.",
				"If the attribute value is greater than or equal to `0`, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementAttribute --Operator:GreaterEqual --Expected:0}}",
				"locator": "Id",
				"onAttribute": "index",
				"onElement": "elementId",
				"pluginName": "Assert"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Attribute missing",
						"Element not found",
						"Incorrect CSS selector",
						"Unexpected attribute format",
						"Value is greater than 0",
						"Value is not a number"
					],
					"expected_result": true,
					"notes": "Verifies that the attribute `index` of the element identified by `#elementId` is lower than or equal to `0` using the LowerEqual operator.",
					"test_case": "element_attribute_lower_equal_validation_css",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttribute",
					"LowerEqualCheck",
					"Validation"
				]
			},
			"description": [
				"### Element Attribute LowerEqual Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that a specified attribute of an element is lower than or equal to a given value.",
				"It asserts that the attribute `index` of the element identified by the CSS selector `#elementId` is lower than or equal to `0` using the LowerEqual operator.",
				"If the attribute value is lower than or equal to `0`, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementAttribute --Operator:LowerEqual --Expected:0}}",
				"locator": "CssSelector",
				"onAttribute": "index",
				"onElement": "#elementId",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Attribute missing",
						"Element not found",
						"Unexpected attribute format",
						"Value is greater than 0",
						"Value is not a number",
						"Xpath syntax errors"
					],
					"expected_result": true,
					"notes": "Verifies that the attribute `index` of the element identified by the given Xpath selector is lower than or equal to `0` using the LowerEqual operator.",
					"test_case": "element_attribute_lower_equal_validation_xpath",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttribute",
					"LowerEqualCheck",
					"Validation"
				]
			},
			"description": [
				"### Element Attribute LowerEqual Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that a specified attribute of an element is lower than or equal to a given value using the Xpath locator.",
				"It asserts that the attribute `index` of the element identified by the Xpath selector `//*[@id='elementId']` is lower than or equal to `0` using the LowerEqual operator.",
				"If the attribute value is lower than or equal to `0`, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementAttribute --Operator:LowerEqual --Expected:0}}",
				"locator": "Xpath",
				"onAttribute": "index",
				"onElement": "//*[@id='elementId']",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Attribute missing",
						"Element not found",
						"Incorrect Id usage",
						"Unexpected attribute format",
						"Value is greater than 0",
						"Value is not a number"
					],
					"expected_result": true,
					"notes": "Verifies that the attribute `index` of the element with Id `elementId` is lower than or equal to `0` using the LowerEqual operator.",
					"test_case": "element_attribute_lower_equal_validation_id",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttribute",
					"LowerEqualCheck",
					"Validation"
				]
			},
			"description": [
				"### Element Attribute LowerEqual Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that a specified attribute of an element is lower than or equal to a given value using the Id locator.",
				"It asserts that the attribute `index` of the element with Id `elementId` is lower than or equal to `0` using the LowerEqual operator.",
				"If the attribute value is lower than or equal to `0`, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementAttribute --Operator:LowerEqual --Expected:0}}",
				"locator": "Id",
				"onAttribute": "index",
				"onElement": "elementId",
				"pluginName": "Assert"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Attribute missing",
						"Element not found",
						"Incorrect CSS selector",
						"Regex pattern does not match value",
						"Unexpected attribute format",
						"Value is not a number"
					],
					"expected_result": true,
					"notes": "Verifies that the attribute `index` of the element identified by the CSS selector `#elementId` matches the regex pattern `^\\d+$` using the Match operator.",
					"test_case": "element_attribute_regex_match_validation_css",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttribute",
					"MatchCheck",
					"Validation"
				]
			},
			"description": [
				"### Element Attribute Regex Match Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the attribute `index` of an element matches the regex pattern `^\\d+$`.",
				"It asserts that the attribute value conforms to the pattern using the Match operator.",
				"If the attribute value matches the regex pattern, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementAttribute --Operator:Match --Expected:^\\d+$}}",
				"locator": "CssSelector",
				"onAttribute": "index",
				"onElement": "#elementId",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Attribute missing",
						"Element not found",
						"Regex pattern does not match value",
						"Unexpected attribute format",
						"Value is not a number",
						"Xpath syntax errors"
					],
					"expected_result": true,
					"notes": "Verifies that the attribute `index` of the element identified by the Xpath selector `//*[@id='elementId']` matches the regex pattern `^\\d+$` using the Match operator.",
					"test_case": "element_attribute_regex_match_validation_xpath",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttribute",
					"MatchCheck",
					"Validation"
				]
			},
			"description": [
				"### Element Attribute Regex Match Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the attribute `index` of an element matches the regex pattern `^\\d+$`.",
				"It asserts that the attribute value conforms to the pattern using the Match operator with an Xpath locator.",
				"If the attribute value matches the regex pattern, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementAttribute --Operator:Match --Expected:^\\d+$}}",
				"locator": "Xpath",
				"onAttribute": "index",
				"onElement": "//*[@id='elementId']",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Attribute missing",
						"Element not found",
						"Incorrect Id usage",
						"Regex pattern does not match value",
						"Unexpected attribute format",
						"Value is not a number"
					],
					"expected_result": true,
					"notes": "Verifies that the attribute `index` of the element with Id `elementId` matches the regex pattern `^\\d+$` using the Match operator.",
					"test_case": "element_attribute_regex_match_validation_id",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttribute",
					"MatchCheck",
					"Validation"
				]
			},
			"description": [
				"### Element Attribute Regex Match Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that the attribute `index` of an element matches the regex pattern `^\\d+$`.",
				"It asserts that the attribute value for the element with Id `elementId` conforms to the pattern using the Match operator.",
				"If the attribute value matches the regex pattern, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementAttribute --Operator:Match --Expected:^\\d+$}}",
				"locator": "Id",
				"onAttribute": "index",
				"onElement": "elementId",
				"pluginName": "Assert"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Attribute missing",
						"Element not found",
						"Incorrect locator usage",
						"Regex pattern unexpectedly matches value",
						"Unexpected attribute format",
						"Value contains numeric or special characters"
					],
					"expected_result": true,
					"notes": "Verifies that the attribute `index` of the element identified by `#elementId` does not match the regex pattern `^[a-zA-Z]+$` using the NotMatch operator.",
					"test_case": "element_attribute_not_match_validation_css",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttribute",
					"NotMatchCheck",
					"Validation"
				]
			},
			"description": [
				"### Element Attribute NotMatch Regex Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the attribute `index` of an element does not match the regex pattern `^[a-zA-Z]+$`.",
				"It asserts that the attribute value fails to conform to the pattern using the NotMatch operator.",
				"If the attribute value does not match the regex pattern, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementAttribute --Operator:NotMatch --Expected:^[a-zA-Z]+$}}",
				"locator": "CssSelector",
				"onAttribute": "index",
				"onElement": "#elementId",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Attribute missing",
						"Element not found",
						"Unexpected attribute format",
						"Regex pattern unexpectedly matches value",
						"Value contains numeric or special characters",
						"Xpath syntax errors"
					],
					"expected_result": true,
					"notes": "Verifies that the attribute `index` of the element identified by the given Xpath selector does not match the regex pattern `^[a-zA-Z]+$` using the NotMatch operator.",
					"test_case": "element_attribute_not_match_validation_xpath",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttribute",
					"NotMatchCheck",
					"Validation"
				]
			},
			"description": [
				"### Element Attribute NotMatch Regex Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the attribute `index` of an element does not match the regex pattern `^[a-zA-Z]+$`.",
				"It asserts that the attribute value fails to conform to the pattern using the NotMatch operator with an Xpath locator.",
				"If the attribute value does not match the regex pattern, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementAttribute --Operator:NotMatch --Expected:^[a-zA-Z]+$}}",
				"locator": "Xpath",
				"onAttribute": "index",
				"onElement": "//*[@id='elementId']",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Attribute missing",
						"Element not found",
						"Incorrect Id usage",
						"Unexpected attribute format",
						"Regex pattern unexpectedly matches value",
						"Value contains numeric or special characters"
					],
					"expected_result": true,
					"notes": "Verifies that the attribute `index` of the element with Id `elementId` does not match the regex pattern `^[a-zA-Z]+$` using the NotMatch operator.",
					"test_case": "element_attribute_not_match_validation_id",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttribute",
					"NotMatchCheck",
					"Validation"
				]
			},
			"description": [
				"### Element Attribute NotMatch Regex Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that the attribute `index` of an element does not match the regex pattern `^[a-zA-Z]+$`.",
				"It asserts that the attribute value for the element with Id `elementId` fails to conform to the pattern using the NotMatch operator.",
				"If the attribute value does not match the regex pattern, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementAttribute --Operator:NotMatch --Expected:^[a-zA-Z]+$}}",
				"locator": "Id",
				"onAttribute": "index",
				"onElement": "elementId",
				"pluginName": "Assert"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element count is greater than expected",
						"Element count is less than expected",
						"Incorrect CSS selector usage",
						"No elements found",
						"Unexpected DOM structure"
					],
					"expected_result": true,
					"notes": "Verifies that exactly 2 elements are found for the selector `.primary-button` using an equality check on element count.",
					"test_case": "element_count_equal_validation_css",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementCount",
					"EqualCheck",
					"Validation"
				]
			},
			"description": [
				"### Element Count Equal Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the number of elements matching the CSS selector `.primary-button` is exactly 2.",
				"If the element count equals 2, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementCount --Operator:Equal --Expected:2}}",
				"locator": "CssSelector",
				"onElement": ".primary-button",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element count is greater than expected",
						"Element count is less than expected",
						"No elements found",
						"Unexpected DOM structure",
						"Xpath syntax errors"
					],
					"expected_result": true,
					"notes": "Verifies that exactly 2 elements are found for the given Xpath selector `//button` using an equality check on element count.",
					"test_case": "element_count_equal_validation_xpath",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementCount",
					"EqualCheck",
					"Validation"
				]
			},
			"description": [
				"### Element Count Equal Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the number of elements matching the Xpath selector `//button` is exactly 2.",
				"If the element count equals 2, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementCount --Operator:Equal --Expected:2}}",
				"locator": "Xpath",
				"onElement": "//button",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element count is greater than expected",
						"Element count is less than expected",
						"Incorrect or misspelled TagName",
						"No elements found",
						"Unexpected DOM structure"
					],
					"expected_result": true,
					"notes": "Verifies that exactly 2 elements with the tag name `button` are found using an equality check on element count.",
					"test_case": "element_count_equal_validation_tagname",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementCount",
					"EqualCheck",
					"Validation"
				]
			},
			"description": [
				"### Element Count Equal Validation Using TagName",
				"",
				"This example demonstrates how the Assert plugin verifies that the number of elements matching the TagName selector is exactly 2.",
				"It asserts that the element count for elements with tag name `button` equals 2.",
				"If the element count equals 2, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementCount --Operator:Equal --Expected:2}}",
				"locator": "TagName",
				"onElement": "button",
				"pluginName": "Assert"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element count equals expected",
						"Element count is greater than expected",
						"Element count is less than expected",
						"Incorrect CSS selector usage",
						"No elements found",
						"Unexpected DOM structure"
					],
					"expected_result": true,
					"notes": "Verifies that the number of elements for the selector `.primary-button` is not equal to 2 using a not-equal check on element count.",
					"test_case": "element_count_not_equal_validation_css",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementCount",
					"NotEqualCheck",
					"Validation"
				]
			},
			"description": [
				"### Element Count NotEqual Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the number of elements matching the CSS selector `.primary-button` is not equal to 2.",
				"If the element count is different from 2, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementCount --Operator:NotEqual --Expected:2}}",
				"locator": "CssSelector",
				"onElement": ".primary-button",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element count equals expected",
						"Element count is greater than expected",
						"Element count is less than expected",
						"No elements found",
						"Unexpected DOM structure",
						"Xpath syntax errors"
					],
					"expected_result": true,
					"notes": "Verifies that the number of elements for the given Xpath selector `//button` is not equal to 2 using a not-equal check on element count.",
					"test_case": "element_count_not_equal_validation_xpath",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementCount",
					"NotEqualCheck",
					"Validation"
				]
			},
			"description": [
				"### Element Count NotEqual Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the number of elements matching the Xpath selector `//button` is not equal to 2.",
				"If the element count is different from 2, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementCount --Operator:NotEqual --Expected:2}}",
				"locator": "Xpath",
				"onElement": "//button",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element count equals expected",
						"Element count is greater than expected",
						"Element count is less than expected",
						"Incorrect or misspelled TagName",
						"No elements found",
						"Unexpected DOM structure"
					],
					"expected_result": true,
					"notes": "Verifies that the number of elements with the tag name `button` is not equal to 2 using a not-equal check on element count.",
					"test_case": "element_count_not_equal_validation_tagname",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementCount",
					"NotEqualCheck",
					"Validation"
				]
			},
			"description": [
				"### Element Count NotEqual Validation Using TagName",
				"",
				"This example demonstrates how the Assert plugin verifies that the number of elements matching the TagName selector for `button` is not equal to 2.",
				"If the element count is different from 2, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementCount --Operator:NotEqual --Expected:2}}",
				"locator": "TagName",
				"onElement": "button",
				"pluginName": "Assert"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element count is equal to expected",
						"Element count is less than expected",
						"Incorrect CSS selector usage",
						"No elements found",
						"Unexpected DOM structure"
					],
					"expected_result": true,
					"notes": "Verifies that the number of elements for the selector `.primary-button` is greater than 2 using the Greater operator.",
					"test_case": "element_count_greater_validation_css",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementCount",
					"GreaterCheck",
					"Validation"
				]
			},
			"description": [
				"### Element Count Greater Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the number of elements matching the CSS selector `.primary-button` is greater than 2.",
				"If the element count exceeds 2, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementCount --Operator:Greater --Expected:2}}",
				"locator": "CssSelector",
				"onElement": ".primary-button",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element count is equal to expected",
						"Element count is less than expected",
						"No elements found",
						"Unexpected DOM structure",
						"Xpath syntax errors",
						"Incorrect XPath indexing or attribute usage"
					],
					"expected_result": true,
					"notes": "Verifies that the number of elements for the given Xpath selector `//button` is greater than 2 using the Greater operator.",
					"test_case": "element_count_greater_validation_xpath",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementCount",
					"GreaterCheck",
					"Validation"
				]
			},
			"description": [
				"### Element Count Greater Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the number of elements matching the Xpath selector `//button` is greater than 2.",
				"If the element count exceeds 2, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementCount --Operator:Greater --Expected:2}}",
				"locator": "Xpath",
				"onElement": "//button",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element count is equal to expected",
						"Element count is less than expected",
						"Incorrect or misspelled TagName",
						"No elements found",
						"Unexpected DOM structure"
					],
					"expected_result": true,
					"notes": "Verifies that the number of elements with the tag name `button` is greater than 2 using the Greater operator.",
					"test_case": "element_count_greater_validation_tagname",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementCount",
					"GreaterCheck",
					"Validation"
				]
			},
			"description": [
				"### Element Count Greater Validation Using TagName",
				"",
				"This example demonstrates how the Assert plugin verifies that the number of elements with the tag name `button` is greater than 2.",
				"If the element count exceeds 2, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementCount --Operator:Greater --Expected:2}}",
				"locator": "TagName",
				"onElement": "button",
				"pluginName": "Assert"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element count is equal to expected",
						"Element count is greater than expected",
						"Incorrect CSS selector usage",
						"No elements found",
						"Unexpected DOM structure"
					],
					"expected_result": true,
					"notes": "Verifies that the number of elements for the selector `.primary-button` is lower than 2 using the Lower operator.",
					"test_case": "element_count_lower_validation_css",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementCount",
					"LowerCheck",
					"Validation"
				]
			},
			"description": [
				"### Element Count Lower Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the number of elements matching the CSS selector `.primary-button` is lower than 2.",
				"If the element count is less than 2, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementCount --Operator:Lower --Expected:2}}",
				"locator": "CssSelector",
				"onElement": ".primary-button",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element count is equal to expected",
						"Element count is greater than expected",
						"No elements found",
						"Unexpected DOM structure",
						"Xpath syntax errors",
						"Incorrect XPath indexing or attribute usage"
					],
					"expected_result": true,
					"notes": "Verifies that the number of elements for the given Xpath selector `//button` is lower than 2 using the Lower operator.",
					"test_case": "element_count_lower_validation_xpath",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementCount",
					"LowerCheck",
					"Validation"
				]
			},
			"description": [
				"### Element Count Lower Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the number of elements matching the Xpath selector `//button` is lower than 2.",
				"If the element count is less than 2, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementCount --Operator:Lower --Expected:2}}",
				"locator": "Xpath",
				"onElement": "//button",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element count is equal to expected",
						"Element count is greater than expected",
						"Incorrect or misspelled TagName",
						"No elements found",
						"Unexpected DOM structure"
					],
					"expected_result": true,
					"notes": "Verifies that the number of elements with the tag name `button` is lower than 2 using the Lower operator.",
					"test_case": "element_count_lower_validation_tagname",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementCount",
					"LowerCheck",
					"Validation"
				]
			},
			"description": [
				"### Element Count Lower Validation Using TagName",
				"",
				"This example demonstrates how the Assert plugin verifies that the number of elements matching the TagName selector for `button` is lower than 2.",
				"If the element count is less than 2, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementCount --Operator:Lower --Expected:2}}",
				"locator": "TagName",
				"onElement": "button",
				"pluginName": "Assert"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element count is less than expected",
						"Element count is equal to expected",
						"Incorrect CSS selector usage",
						"No elements found",
						"Unexpected DOM structure"
					],
					"expected_result": true,
					"notes": "Verifies that the number of elements for the selector `.primary-button` is greater than or equal to 2 using the GreaterEqual operator.",
					"test_case": "element_count_greater_equal_validation_css",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementCount",
					"GreaterEqualCheck",
					"Validation"
				]
			},
			"description": [
				"### Element Count GreaterEqual Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the number of elements matching the CSS selector `.primary-button` is greater than or equal to 2.",
				"If the element count is greater than or equal to 2, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementCount --Operator:GreaterEqual --Expected:2}}",
				"locator": "CssSelector",
				"onElement": ".primary-button",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element count is less than expected",
						"Element count is equal to expected",
						"No elements found",
						"Unexpected DOM structure",
						"Xpath syntax errors",
						"Incorrect XPath indexing or attribute usage"
					],
					"expected_result": true,
					"notes": "Verifies that the number of elements for the given Xpath selector `//button` is greater than or equal to 2 using the GreaterEqual operator.",
					"test_case": "element_count_greater_equal_validation_xpath",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementCount",
					"GreaterEqualCheck",
					"Validation"
				]
			},
			"description": [
				"### Element Count GreaterEqual Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the number of elements matching the Xpath selector `//button` is greater than or equal to 2.",
				"If the element count is greater than or equal to 2, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementCount --Operator:GreaterEqual --Expected:2}}",
				"locator": "Xpath",
				"onElement": "//button",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element count is less than expected",
						"Element count is equal to expected",
						"Incorrect or misspelled TagName",
						"No elements found",
						"Unexpected DOM structure"
					],
					"expected_result": true,
					"notes": "Verifies that the number of elements with the tag name `button` is greater than or equal to 2 using the GreaterEqual operator.",
					"test_case": "element_count_greater_equal_validation_tagname",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementCount",
					"GreaterEqualCheck",
					"Validation"
				]
			},
			"description": [
				"### Element Count GreaterEqual Validation Using TagName",
				"",
				"This example demonstrates how the Assert plugin verifies that the number of elements with the tag name `button` is greater than or equal to 2.",
				"If the element count is greater than or equal to 2, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementCount --Operator:GreaterEqual --Expected:2}}",
				"locator": "TagName",
				"onElement": "button",
				"pluginName": "Assert"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element count is equal to expected",
						"Element count is greater than expected",
						"Incorrect CSS selector usage",
						"No elements found",
						"Unexpected DOM structure"
					],
					"expected_result": true,
					"notes": "Verifies that the number of elements for the selector `.primary-button` is lower than or equal to 2 using the LowerEqual operator.",
					"test_case": "element_count_lower_equal_validation_css",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementCount",
					"LowerEqualCheck",
					"Validation"
				]
			},
			"description": [
				"### Element Count LowerEqual Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the number of elements matching the CSS selector `.primary-button` is lower than or equal to 2.",
				"If the element count is lower than or equal to 2, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementCount --Operator:LowerEqual --Expected:2}}",
				"locator": "CssSelector",
				"onElement": ".primary-button",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element count is equal to expected",
						"Element count is greater than expected",
						"No elements found",
						"Unexpected DOM structure",
						"Xpath syntax errors",
						"Incorrect XPath indexing or attribute usage"
					],
					"expected_result": true,
					"notes": "Verifies that the number of elements for the given Xpath selector `//button` is lower than or equal to 2 using the LowerEqual operator.",
					"test_case": "element_count_lower_equal_validation_xpath",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementCount",
					"LowerEqualCheck",
					"Validation"
				]
			},
			"description": [
				"### Element Count LowerEqual Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the number of elements matching the Xpath selector `//button` is lower than or equal to 2.",
				"If the element count is lower than or equal to 2, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementCount --Operator:LowerEqual --Expected:2}}",
				"locator": "Xpath",
				"onElement": "//button",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element count is equal to expected",
						"Element count is greater than expected",
						"Incorrect or misspelled TagName",
						"No elements found",
						"Unexpected DOM structure"
					],
					"expected_result": true,
					"notes": "Verifies that the number of elements with the tag name `button` is lower than or equal to 2 using the LowerEqual operator.",
					"test_case": "element_count_lower_equal_validation_tagname",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementCount",
					"LowerEqualCheck",
					"Validation"
				]
			},
			"description": [
				"### Element Count LowerEqual Validation Using TagName",
				"",
				"This example demonstrates how the Assert plugin verifies that the number of elements with the tag name `button` is lower than or equal to 2.",
				"If the element count is lower than or equal to 2, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementCount --Operator:LowerEqual --Expected:2}}",
				"locator": "TagName",
				"onElement": "button",
				"pluginName": "Assert"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element count does not match regex pattern",
						"No elements found",
						"Incorrect CSS selector usage",
						"Unexpected DOM structure",
						"Value is not composed solely of digits representing a positive integer"
					],
					"expected_result": true,
					"notes": "Verifies that the number of elements for the selector `.primary-button` matches the regex pattern `^[1-9][0-9]*$`, ensuring the count is a positive integer.",
					"test_case": "element_count_regex_match_validation_css",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementCount",
					"MatchCheck",
					"Validation"
				]
			},
			"description": [
				"### Element Count Regex Match Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the element count for the selector `.primary-button` matches the regex pattern `^[1-9][0-9]*$`.",
				"It asserts that the element count is a positive integer using the Match operator.",
				"If the element count matches the regex pattern, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementCount --Operator:Match --Expected:^[1-9][0-9]*$}}",
				"locator": "CssSelector",
				"onElement": ".primary-button",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element count does not match regex pattern",
						"No elements found",
						"Xpath syntax errors",
						"Incorrect XPath indexing or attribute usage",
						"Unexpected DOM structure"
					],
					"expected_result": true,
					"notes": "Verifies that the number of elements for the given Xpath selector `//button` matches the regex pattern `^[1-9][0-9]*$`, ensuring the count is a positive integer.",
					"test_case": "element_count_regex_match_validation_xpath",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementCount",
					"MatchCheck",
					"Validation"
				]
			},
			"description": [
				"### Element Count Regex Match Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the element count for the Xpath selector `//button` matches the regex pattern `^[1-9][0-9]*$`.",
				"It asserts that the element count is a positive integer using the Match operator.",
				"If the element count matches the regex pattern, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementCount --Operator:Match --Expected:^[1-9][0-9]*$}}",
				"locator": "Xpath",
				"onElement": "//button",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element count does not match regex pattern",
						"No elements found",
						"Incorrect or misspelled TagName",
						"Unexpected DOM structure",
						"Value is not composed solely of digits representing a positive integer"
					],
					"expected_result": true,
					"notes": "Verifies that the number of elements with the tag name `button` matches the regex pattern `^[1-9][0-9]*$`, ensuring the count is a positive integer.",
					"test_case": "element_count_regex_match_validation_tagname",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementCount",
					"MatchCheck",
					"Validation"
				]
			},
			"description": [
				"### Element Count Regex Match Validation Using TagName",
				"",
				"This example demonstrates how the Assert plugin verifies that the element count for elements with the tag name `button` matches the regex pattern `^[1-9][0-9]*$`.",
				"It asserts that the element count is a positive integer using the Match operator.",
				"If the element count matches the regex pattern, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementCount --Operator:Match --Expected:^[1-9][0-9]*$}}",
				"locator": "TagName",
				"onElement": "button",
				"pluginName": "Assert"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element count unexpectedly contains alphabetic characters",
						"No elements found",
						"Incorrect CSS selector usage",
						"Unexpected DOM structure"
					],
					"expected_result": true,
					"notes": "Verifies that the element count for the selector `.primary-button` is strictly numeric by confirming the absence of alphabetic characters using the regex pattern `.*[a-zA-Z]+.*` with the NotMatch operator.",
					"test_case": "element_count_not_match_validation_css",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementCount",
					"NotMatchCheck",
					"Validation"
				]
			},
			"description": [
				"### Element Count NotMatch Regex Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the element count for the selector `.primary-button` is strictly numeric by confirming the absence of alphabetic characters.",
				"It asserts that the element count does not match the regex pattern `.*[a-zA-Z]+.*` using the NotMatch operator.",
				"If the element count is strictly numeric, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementCount --Operator:NotMatch --Expected:.*[a-zA-Z]+.*}}",
				"locator": "CssSelector",
				"onElement": ".primary-button",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element count unexpectedly contains alphabetic characters",
						"No elements found",
						"Xpath syntax errors",
						"Incorrect XPath indexing or attribute usage",
						"Unexpected DOM structure"
					],
					"expected_result": true,
					"notes": "Verifies that the element count for the Xpath selector `//button` is strictly numeric by confirming the absence of alphabetic characters using the regex pattern `.*[a-zA-Z]+.*` with the NotMatch operator.",
					"test_case": "element_count_not_match_validation_xpath",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementCount",
					"NotMatchCheck",
					"Validation"
				]
			},
			"description": [
				"### Element Count NotMatch Regex Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the element count for the Xpath selector `//button` is strictly numeric by confirming the absence of alphabetic characters.",
				"It asserts that the element count does not match the regex pattern `.*[a-zA-Z]+.*` using the NotMatch operator.",
				"If the element count is strictly numeric, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementCount --Operator:NotMatch --Expected:.*[a-zA-Z]+.*}}",
				"locator": "Xpath",
				"onElement": "//button",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element count unexpectedly contains alphabetic characters",
						"No elements found",
						"Incorrect or misspelled TagName",
						"Unexpected DOM structure"
					],
					"expected_result": true,
					"notes": "Verifies that the element count for elements with the tag name `button` is strictly numeric by confirming the absence of alphabetic characters using the regex pattern `.*[a-zA-Z]+.*` with the NotMatch operator.",
					"test_case": "element_count_not_match_validation_tagname",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementCount",
					"NotMatchCheck",
					"Validation"
				]
			},
			"description": [
				"### Element Count NotMatch Regex Validation Using TagName",
				"",
				"This example demonstrates how the Assert plugin verifies that the element count for elements with the tag name `button` is strictly numeric by confirming the absence of alphabetic characters.",
				"It asserts that the element count does not match the regex pattern `.*[a-zA-Z]+.*` using the NotMatch operator.",
				"If the element count is strictly numeric, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementCount --Operator:NotMatch --Expected:.*[a-zA-Z]+.*}}",
				"locator": "TagName",
				"onElement": "button",
				"pluginName": "Assert"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect CSS selector usage",
						"Element is enabled unexpectedly",
						"Unexpected DOM structure"
					],
					"expected_result": true,
					"notes": "Verifies that the element with the CSS selector `#username` is disabled using the ElementDisabled condition.",
					"test_case": "element_disabled_validation_css",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementDisabled",
					"Validation"
				]
			},
			"description": [
				"### Element Disabled Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the element identified by the CSS selector `#username` is disabled.",
				"If the element is disabled, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementDisabled}}",
				"locator": "CssSelector",
				"onElement": "#username",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Xpath syntax errors",
						"Incorrect XPath indexing or attribute usage",
						"Element is enabled unexpectedly",
						"Unexpected DOM structure"
					],
					"expected_result": true,
					"notes": "Verifies that the element with the Xpath selector `//input[@id='username']` is disabled using the ElementDisabled condition.",
					"test_case": "element_disabled_validation_xpath",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementDisabled",
					"Validation"
				]
			},
			"description": [
				"### Element Disabled Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the element identified by the Xpath selector `//input[@id='username']` is disabled.",
				"If the element is disabled, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementDisabled}}",
				"locator": "Xpath",
				"onElement": "//input[@id='username']",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect Id usage",
						"Element is enabled unexpectedly",
						"Unexpected DOM structure"
					],
					"expected_result": true,
					"notes": "Verifies that the element with the Id `username` is disabled using the ElementDisabled condition.",
					"test_case": "element_disabled_validation_id",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementDisabled",
					"Validation"
				]
			},
			"description": [
				"### Element Disabled Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that the element with the Id `username` is disabled.",
				"If the element is disabled, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementDisabled}}",
				"locator": "Id",
				"onElement": "username",
				"pluginName": "Assert"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect CSS selector usage",
						"Element is disabled unexpectedly",
						"Unexpected DOM structure"
					],
					"expected_result": true,
					"notes": "Verifies that the element with the CSS selector `#username` is enabled using the ElementEnabled condition.",
					"test_case": "element_enabled_validation_css",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementEnabled",
					"Validation"
				]
			},
			"description": [
				"### Element Enabled Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the element identified by the CSS selector `#username` is enabled.",
				"If the element is enabled, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementEnabled}}",
				"locator": "CssSelector",
				"onElement": "#username",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Xpath syntax errors",
						"Incorrect XPath indexing or attribute usage",
						"Element is disabled unexpectedly",
						"Unexpected DOM structure"
					],
					"expected_result": true,
					"notes": "Verifies that the element with the Xpath selector `//input[@id='username']` is enabled using the ElementEnabled condition.",
					"test_case": "element_enabled_validation_xpath",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementEnabled",
					"Validation"
				]
			},
			"description": [
				"### Element Enabled Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the element identified by the Xpath selector `//input[@id='username']` is enabled.",
				"If the element is enabled, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementEnabled}}",
				"locator": "Xpath",
				"onElement": "//input[@id='username']",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect Id usage",
						"Element is disabled unexpectedly",
						"Unexpected DOM structure"
					],
					"expected_result": true,
					"notes": "Verifies that the element with the Id `username` is enabled using the ElementEnabled condition.",
					"test_case": "element_enabled_validation_id",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementEnabled",
					"Validation"
				]
			},
			"description": [
				"### Element Enabled Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that the element with the Id `username` is enabled.",
				"If the element is enabled, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementEnabled}}",
				"locator": "Id",
				"onElement": "username",
				"pluginName": "Assert"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect CSS selector usage",
						"Unexpected DOM structure"
					],
					"expected_result": true,
					"notes": "Verifies that an element with the CSS selector `#username` exists in the DOM using the ElementExists condition.",
					"test_case": "element_exists_validation_css",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementExists",
					"Validation"
				]
			},
			"description": [
				"### Element Exists Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that an element identified by the CSS selector `#username` exists in the DOM.",
				"If the element exists, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementExists}}",
				"locator": "CssSelector",
				"onElement": "#username",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Xpath syntax errors",
						"Incorrect XPath indexing or attribute usage",
						"Unexpected DOM structure"
					],
					"expected_result": true,
					"notes": "Verifies that an element with the Xpath selector `//input[@id='username']` exists in the DOM using the ElementExists condition.",
					"test_case": "element_exists_validation_xpath",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementExists",
					"Validation"
				]
			},
			"description": [
				"### Element Exists Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that an element identified by the Xpath selector `//input[@id='username']` exists in the DOM.",
				"If the element exists, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementExists}}",
				"locator": "Xpath",
				"onElement": "//input[@id='username']",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect Id usage",
						"Unexpected DOM structure"
					],
					"expected_result": true,
					"notes": "Verifies that an element with the Id `username` exists in the DOM using the ElementExists condition.",
					"test_case": "element_exists_validation_id",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementExists",
					"Validation"
				]
			},
			"description": [
				"### Element Exists Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that an element with the Id `username` exists in the DOM.",
				"If the element exists, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementExists}}",
				"locator": "Id",
				"onElement": "username",
				"pluginName": "Assert"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element is active unexpectedly",
						"Element not found",
						"Incorrect CSS selector usage",
						"Unexpected DOM structure"
					],
					"expected_result": true,
					"notes": "Verifies that the element with the CSS selector `#username` is not active using the ElementNotActive condition.",
					"test_case": "element_not_active_validation_css",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementNotActive",
					"Validation"
				]
			},
			"description": [
				"### Element Not Active Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the element identified by the CSS selector `#username` is not active.",
				"If the element is not active, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementNotActive}}",
				"locator": "CssSelector",
				"onElement": "#username",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element is active unexpectedly",
						"Element not found",
						"Xpath syntax errors",
						"Incorrect XPath indexing or attribute usage",
						"Unexpected DOM structure"
					],
					"expected_result": true,
					"notes": "Verifies that the element with the Xpath selector `//input[@id='username']` is not active using the ElementNotActive condition.",
					"test_case": "element_not_active_validation_xpath",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementNotActive",
					"Validation"
				]
			},
			"description": [
				"### Element Not Active Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the element identified by the Xpath selector `//input[@id='username']` is not active.",
				"If the element is not active, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementNotActive}}",
				"locator": "Xpath",
				"onElement": "//input[@id='username']",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element is active unexpectedly",
						"Element not found",
						"Incorrect Id usage",
						"Unexpected DOM structure"
					],
					"expected_result": true,
					"notes": "Verifies that the element with the Id `username` is not active using the ElementNotActive condition.",
					"test_case": "element_not_active_validation_id",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementNotActive",
					"Validation"
				]
			},
			"description": [
				"### Element Not Active Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that the element with the Id `username` is not active.",
				"If the element is not active, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementNotActive}}",
				"locator": "Id",
				"onElement": "username",
				"pluginName": "Assert"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element is found when it should not exist",
						"Incorrect CSS selector usage",
						"Unexpected DOM structure",
						"Element temporarily rendered"
					],
					"expected_result": true,
					"notes": "Verifies that an element with the CSS selector `#username` is not present in the DOM using the ElementNotExists condition.",
					"test_case": "element_not_exists_validation_css",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementNotExists",
					"Validation"
				]
			},
			"description": [
				"### Element Not Exists Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that an element identified by the CSS selector `#username` does not exist in the DOM.",
				"If the element is absent, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementNotExists}}",
				"locator": "CssSelector",
				"onElement": "#username",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element is found when it should not exist",
						"Xpath syntax errors",
						"Incorrect XPath indexing or attribute usage",
						"Unexpected DOM structure",
						"Element temporarily rendered"
					],
					"expected_result": true,
					"notes": "Verifies that an element with the Xpath selector `//input[@id='username']` is not present in the DOM using the ElementNotExists condition.",
					"test_case": "element_not_exists_validation_xpath",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementNotExists",
					"Validation"
				]
			},
			"description": [
				"### Element Not Exists Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that an element identified by the Xpath selector `//input[@id='username']` does not exist in the DOM.",
				"If the element is absent, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementNotExists}}",
				"locator": "Xpath",
				"onElement": "//input[@id='username']",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element is found when it should not exist",
						"Incorrect Id usage",
						"Unexpected DOM structure",
						"Element temporarily rendered"
					],
					"expected_result": true,
					"notes": "Verifies that an element with the Id `username` is not present in the DOM using the ElementNotExists condition.",
					"test_case": "element_not_exists_validation_id",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementNotExists",
					"Validation"
				]
			},
			"description": [
				"### Element Not Exists Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that an element with the Id `username` does not exist in the DOM.",
				"If the element is absent, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementNotExists}}",
				"locator": "Id",
				"onElement": "username",
				"pluginName": "Assert"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element is selected unexpectedly",
						"Element not found",
						"Incorrect CSS selector usage",
						"Unexpected DOM structure"
					],
					"expected_result": true,
					"notes": "Verifies that the element with the CSS selector `#acceptTerms` is not selected using the ElementNotSelected condition. The selector is semantically appropriate for elements like checkboxes or radio buttons.",
					"test_case": "element_not_selected_validation_css",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementNotSelected",
					"Validation"
				]
			},
			"description": [
				"### Element Not Selected Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the element identified by the CSS selector `#acceptTerms` is not selected.",
				"If the element is not selected, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementNotSelected}}",
				"locator": "CssSelector",
				"onElement": "#acceptTerms",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element is selected unexpectedly",
						"Element not found",
						"Xpath syntax errors",
						"Incorrect XPath indexing or attribute usage",
						"Unexpected DOM structure"
					],
					"expected_result": true,
					"notes": "Verifies that the element with the Xpath selector `//input[@id='acceptTerms']` is not selected using the ElementNotSelected condition. This is appropriate for elements like checkboxes or radio buttons.",
					"test_case": "element_not_selected_validation_xpath",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementNotSelected",
					"Validation"
				]
			},
			"description": [
				"### Element Not Selected Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the element identified by the Xpath selector `//input[@id='acceptTerms']` is not selected.",
				"If the element is not selected, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementNotSelected}}",
				"locator": "Xpath",
				"onElement": "//input[@id='acceptTerms']",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element is selected unexpectedly",
						"Element not found",
						"Incorrect Id usage",
						"Unexpected DOM structure"
					],
					"expected_result": true,
					"notes": "Verifies that the element with the Id `acceptTerms` is not selected using the ElementNotSelected condition, which is semantically appropriate for input elements like checkboxes or radio buttons.",
					"test_case": "element_not_selected_validation_id",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementNotSelected",
					"Validation"
				]
			},
			"description": [
				"### Element Not Selected Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that the element with the Id `acceptTerms` is not selected.",
				"If the element is not selected, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementNotSelected}}",
				"locator": "Id",
				"onElement": "acceptTerms",
				"pluginName": "Assert"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element is visible when it should not be",
						"Element not found",
						"Incorrect CSS selector usage",
						"Unexpected DOM structure",
						"Element hidden by parent overflow: hidden"
					],
					"expected_result": true,
					"notes": "Verifies that the element with the CSS selector `#username` is not visible in the DOM using the ElementNotVisible condition. Visibility may be affected by CSS properties like `display: none`, `visibility: hidden`, or off-screen positioning.",
					"test_case": "element_not_visible_validation_css",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementNotVisible",
					"Validation"
				]
			},
			"description": [
				"### Element Not Visible Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the element identified by the CSS selector `#username` is not visible in the DOM.",
				"Visibility may be determined by properties such as `display: none`, `visibility: hidden`, or off-screen positioning.",
				"If the element is not visible, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementNotVisible}}",
				"locator": "CssSelector",
				"onElement": "#username",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element is visible when it should not be",
						"Element not found",
						"Xpath syntax errors",
						"Incorrect XPath indexing or attribute usage",
						"Unexpected DOM structure",
						"Element hidden by parent overflow: hidden"
					],
					"expected_result": true,
					"notes": "Verifies that the element with the Xpath selector `//input[@id='username']` is not visible in the DOM using the ElementNotVisible condition. Visibility may be affected by CSS properties like `display: none`, `visibility: hidden`, or off-screen positioning.",
					"test_case": "element_not_visible_validation_xpath",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementNotVisible",
					"Validation"
				]
			},
			"description": [
				"### Element Not Visible Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the element identified by the Xpath selector `//input[@id='username']` is not visible in the DOM.",
				"Visibility may be determined by properties such as `display: none`, `visibility: hidden`, or off-screen positioning.",
				"If the element is not visible, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementNotVisible}}",
				"locator": "Xpath",
				"onElement": "//input[@id='username']",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element is visible when it should not be",
						"Element not found",
						"Incorrect Id usage",
						"Unexpected DOM structure",
						"Element hidden by parent overflow: hidden"
					],
					"expected_result": true,
					"notes": "Verifies that the element with the Id `username` is not visible in the DOM using the ElementNotVisible condition. Visibility may be affected by CSS properties like `display: none`, `visibility: hidden`, or off-screen positioning.",
					"test_case": "element_not_visible_validation_id",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementNotVisible",
					"Validation"
				]
			},
			"description": [
				"### Element Not Visible Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that the element with the Id `username` is not visible in the DOM.",
				"Visibility may be determined by properties such as `display: none`, `visibility: hidden`, or off-screen positioning.",
				"If the element is not visible, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementNotVisible}}",
				"locator": "Id",
				"onElement": "username",
				"pluginName": "Assert"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element is disabled but still marked as selected",
						"Element is not selected when it should be",
						"Element not found",
						"Incorrect CSS selector usage",
						"Unexpected DOM structure"
					],
					"expected_result": true,
					"notes": "Verifies that the element with the CSS selector `#acceptTerms` is selected using the ElementSelected condition. The condition only applies to checkboxes, radio buttons, or options.",
					"test_case": "element_selected_validation_css",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementSelected",
					"Validation"
				]
			},
			"description": [
				"### Element Selected Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the element identified by the CSS selector `#acceptTerms` is selected.",
				"The ElementSelected condition only applies to elements such as `<input type=\"checkbox\">`, `<input type=\"radio\">`, or `<option selected>`.",
				"If the element is selected, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementSelected}}",
				"locator": "CssSelector",
				"onElement": "#acceptTerms",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element is disabled but still marked as selected",
						"Element is selected unexpectedly",
						"Element not found",
						"Incorrect XPath indexing or attribute usage",
						"Unexpected DOM structure",
						"Xpath syntax errors"
					],
					"expected_result": true,
					"notes": "Verifies that the element with the Xpath selector `//input[@id='acceptTerms']` is selected using the ElementSelected condition. The condition only applies to checkboxes, radio buttons, or options.",
					"test_case": "element_selected_validation_xpath",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementSelected",
					"Validation"
				]
			},
			"description": [
				"### Element Selected Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the element identified by the Xpath selector `//input[@id='acceptTerms']` is selected.",
				"The ElementSelected condition only applies to elements such as `<input type=\"checkbox\">`, `<input type=\"radio\">`, or `<option selected>`.",
				"If the element is selected, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementSelected}}",
				"locator": "Xpath",
				"onElement": "//input[@id='acceptTerms']",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element is disabled but still marked as selected",
						"Element is not selected when it should be",
						"Element not found",
						"Incorrect Id usage",
						"Unexpected DOM structure"
					],
					"expected_result": true,
					"notes": "Verifies that the element with the Id `acceptTerms` is selected using the ElementSelected condition. The condition only applies to checkboxes, radio buttons, or options.",
					"test_case": "element_selected_validation_id",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementSelected",
					"Validation"
				]
			},
			"description": [
				"### Element Selected Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that the element with the Id `acceptTerms` is selected.",
				"The ElementSelected condition only applies to elements such as `<input type=\"checkbox\">`, `<input type=\"radio\">`, or `<option selected>`.",
				"If the element is selected, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementSelected}}",
				"locator": "Id",
				"onElement": "acceptTerms",
				"pluginName": "Assert"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element is not stale when it should be",
						"Element not found",
						"Incorrect CSS selector usage",
						"Unexpected DOM structure"
					],
					"expected_result": true,
					"notes": "Verifies that the element with the CSS selector `#username` is stale using the ElementStale condition. An element is considered stale if it was once attached to the DOM but has since been removed or replaced. This typically applies after a dynamic DOM change, such as an AJAX update or DOM refresh.",
					"test_case": "element_stale_validation_css",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementStale",
					"Validation"
				]
			},
			"description": [
				"### Element Stale Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the element identified by the CSS selector `#username` is stale.",
				"If the element is stale, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementStale}}",
				"locator": "CssSelector",
				"onElement": "#username",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element is not stale when it should be",
						"Element not found",
						"Incorrect XPath indexing or attribute usage",
						"Unexpected DOM structure",
						"Xpath syntax errors"
					],
					"expected_result": true,
					"notes": "Verifies that the element with the Xpath selector `//input[@id='username']` is stale using the ElementStale condition. An element is considered stale if it was once attached to the DOM but has since been removed or replaced. This typically applies after a dynamic DOM change, such as an AJAX update or DOM refresh.",
					"test_case": "element_stale_validation_xpath",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementStale",
					"Validation"
				]
			},
			"description": [
				"### Element Stale Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the element identified by the Xpath selector `//input[@id='username']` is stale.",
				"If the element is stale, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementStale}}",
				"locator": "Xpath",
				"onElement": "//input[@id='username']",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element is not stale when it should be",
						"Element not found",
						"Incorrect Id usage",
						"Unexpected DOM structure"
					],
					"expected_result": true,
					"notes": "Verifies that the element with the Id `username` is stale using the ElementStale condition. An element is considered stale if it was once attached to the DOM but has since been removed or replaced. This typically applies after a dynamic DOM change, such as an AJAX update or DOM refresh.",
					"test_case": "element_stale_validation_id",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementStale",
					"Validation"
				]
			},
			"description": [
				"### Element Stale Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that the element with the Id `username` is stale.",
				"If the element is stale, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementStale}}",
				"locator": "Id",
				"onElement": "username",
				"pluginName": "Assert"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Element text length is not equal to expected",
						"Incorrect CSS selector usage",
						"Unexpected DOM structure",
						"Whitespace or inner text nodes affecting length calculation"
					],
					"expected_result": true,
					"notes": "Verifies that the text length of the element with the CSS selector `#content` is exactly 255 characters. The text length excludes HTML tags and is computed based on the visible text as returned by the WebDriver Get Element Text endpoint. In cases of nested HTML, the length is calculated by concatenating all visible text from child elements.",
					"test_case": "element_text_length_equal_validation_css",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementTextLength",
					"Validation"
				]
			},
			"description": [
				"### Element Text Length Equal Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the text length of the element identified by the CSS selector `#content` is exactly 255 characters.",
				"The computed text length excludes HTML tags and counts only the visible text as returned by the WebDriver Get Element Text endpoint. For nested HTML, the length is determined by concatenating the visible text from all child elements.",
				"If the text length equals 255, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:Equal --Expected:255}}",
				"locator": "CssSelector",
				"onElement": "#content",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Element text length is not equal to expected",
						"Incorrect XPath indexing or attribute usage",
						"Unexpected DOM structure",
						"Whitespace or inner text nodes affecting length calculation",
						"Xpath syntax errors"
					],
					"expected_result": true,
					"notes": "Verifies that the text length of the element with the Xpath selector `//div[@id='content']` is exactly 255 characters. The text length excludes HTML tags and is computed based on the visible text from the WebDriver Get Element Text endpoint. For nested HTML, the length is determined by concatenating visible text from all child elements.",
					"test_case": "element_text_length_equal_validation_xpath",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementTextLength",
					"Validation"
				]
			},
			"description": [
				"### Element Text Length Equal Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the text length of the element identified by the Xpath selector `//div[@id='content']` is exactly 255 characters.",
				"The computed text length excludes HTML tags and counts only the visible text as returned by the WebDriver Get Element Text endpoint. For nested HTML, the length is determined by concatenating the visible text from all child elements.",
				"If the text length equals 255, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:Equal --Expected:255}}",
				"locator": "Xpath",
				"onElement": "//div[@id='content']",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Element text length is not equal to expected",
						"Incorrect Id usage",
						"Unexpected DOM structure",
						"Whitespace or inner text nodes affecting length calculation"
					],
					"expected_result": true,
					"notes": "Verifies that the text length of the element with the Id `content` is exactly 255 characters. The text length excludes HTML tags and is based on the visible text returned by the WebDriver Get Element Text endpoint. For nested HTML, the length is computed by concatenating all visible child text.",
					"test_case": "element_text_length_equal_validation_id",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementTextLength",
					"Validation"
				]
			},
			"description": [
				"### Element Text Length Equal Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that the text length of the element with the Id `content` is exactly 255 characters.",
				"The computed text length excludes HTML tags and counts only the visible text as returned by the WebDriver Get Element Text endpoint. For nested HTML, the length is determined by concatenating the visible text from all child elements.",
				"If the text length equals 255, the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:Equal --Expected:255}}",
				"locator": "Id",
				"onElement": "content",
				"pluginName": "Assert"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Element text length is not equal to expected",
						"Incorrect CSS selector usage",
						"Regular expression fails to extract correct text",
						"Unexpected DOM structure",
						"Whitespace or inner text nodes affecting length calculation"
					],
					"expected_result": true,
					"notes": "Verifies that the visible text length of the element with the CSS selector `#content` is exactly 100 characters. The text length excludes HTML tags and is based on the visible text from the WebDriver Get Element Text endpoint. A regular expression `(?s)^(.{0,100})` extracts up to 100 characters, and the assertion passes only if the extracted string is exactly 100 characters long. If the element contains fewer than 100 visible characters, the regex match group will capture fewer than 100 characters, causing the assertion to fail.",
					"test_case": "element_text_length_equal_with_regex_validation_css",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementTextLength",
					"MatchCheck",
					"Validation"
				]
			},
			"description": [
				"### Element Text Length Equal with Regex Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the visible text length of the element identified by the CSS selector `#content` is exactly 100 characters.",
				"The text length is computed by excluding HTML tags and counting only the visible text as returned by the WebDriver Get Element Text endpoint.",
				"A regular expression `(?s)^(.{0,100})` is applied to extract up to 100 characters from the visible text.",
				"The assertion evaluates to `true` only if the length of the extracted string is exactly 100. If the element contains fewer than 100 visible characters, the regex match group will capture fewer than 100 characters, causing the assertion to fail."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:Equal --Expected:100}}",
				"locator": "CssSelector",
				"onElement": "#content",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,100})"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Element text length is not equal to expected",
						"Incorrect XPath indexing or attribute usage",
						"Regular expression fails to extract correct text",
						"Unexpected DOM structure",
						"Whitespace or inner text nodes affecting length calculation",
						"Xpath syntax errors"
					],
					"expected_result": true,
					"notes": "Verifies that the visible text length of the element with the Xpath selector `//div[@id='content']` is exactly 100 characters. The length excludes HTML tags and is determined by the visible text from the WebDriver Get Element Text endpoint. A regular expression `(?s)^(.{0,100})` extracts up to 100 characters, and the assertion passes only if the extracted string is exactly 100 characters long. If the element contains fewer than 100 visible characters, the regex match group will capture fewer than 100 characters, causing the assertion to fail.",
					"test_case": "element_text_length_equal_with_regex_validation_xpath",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementTextLength",
					"MatchCheck",
					"Validation"
				]
			},
			"description": [
				"### Element Text Length Equal with Regex Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the visible text length of the element identified by the Xpath selector `//div[@id='content']` is exactly 100 characters.",
				"The computed text length excludes HTML tags and counts only the visible text as provided by the WebDriver Get Element Text endpoint.",
				"A regular expression `(?s)^(.{0,100})` is applied to extract up to 100 characters from the visible text.",
				"The assertion evaluates to `true` only if the extracted string is exactly 100 characters long. If the element contains fewer than 100 visible characters, the regex match group will capture fewer than 100 characters, causing the assertion to fail."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:Equal --Expected:100}}",
				"locator": "Xpath",
				"onElement": "//div[@id='content']",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,100})"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Element text length is not equal to expected",
						"Incorrect Id usage",
						"Regular expression fails to extract correct text",
						"Unexpected DOM structure",
						"Whitespace or inner text nodes affecting length calculation"
					],
					"expected_result": true,
					"notes": "Verifies that the visible text length of the element with the Id `content` is exactly 100 characters. The computed text length excludes HTML tags and is based on the visible text from the WebDriver Get Element Text endpoint. The regular expression `(?s)^(.{0,100})` extracts up to 100 characters, and the assertion passes only if the extracted string is exactly 100 characters long. If the element contains fewer than 100 visible characters, the regex match group will capture fewer than 100 characters, causing the assertion to fail.",
					"test_case": "element_text_length_equal_with_regex_validation_id",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementTextLength",
					"MatchCheck",
					"Validation"
				]
			},
			"description": [
				"### Element Text Length Equal with Regex Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that the visible text length of the element with the Id `content` is exactly 100 characters.",
				"The text length is calculated by excluding HTML tags and considering only the visible text as returned by the WebDriver Get Element Text endpoint.",
				"A regular expression `(?s)^(.{0,100})` is applied to extract up to 100 characters from the visible text.",
				"The assertion evaluates to `true` only if the extracted string is exactly 100 characters long. If the element contains fewer than 100 visible characters, the regex match group will capture fewer than 100 characters, causing the assertion to fail."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:Equal --Expected:100}}",
				"locator": "Id",
				"onElement": "content",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,100})"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element contains newline characters, tabs, or excessive whitespace that affect character count",
						"Element not found",
						"Element text length is not equal to expected",
						"Incorrect CSS selector usage",
						"Unexpected DOM structure"
					],
					"expected_result": true,
					"notes": "Verifies that the text length of the value attribute of the input element with the CSS selector `input#content` is exactly 150 characters. The calculation is based solely on the attribute value, excluding any HTML markup. If the value attribute contains exactly 150 characters (regardless of visual presentation), the assert evaluates to `true`.",
					"test_case": "element_text_length_equal_validation_css_input",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttributeCheck",
					"ElementTextLength",
					"InputField",
					"ValueLength"
				]
			},
			"description": [
				"### Input Value Text Length Equal Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the text length of the value attribute of an input element (of type text) identified by the CSS selector `input#content` is exactly 150 characters.",
				"The text length is computed solely from the value attribute, excluding any HTML markup.",
				"If the value attribute contains exactly 150 characters (regardless of visual presentation), the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:Equal --Expected:150}}",
				"locator": "CssSelector",
				"onAttribute": "value",
				"onElement": "input#content",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element contains newline characters, tabs, or excessive whitespace that affect character count",
						"Element not found",
						"Element text length is not equal to expected",
						"Incorrect XPath indexing or attribute usage",
						"Unexpected DOM structure",
						"Xpath syntax errors"
					],
					"expected_result": true,
					"notes": "Verifies that the text length of the value attribute of the input element with the Xpath selector `//input[@id='content']` is exactly 150 characters. The calculation is based solely on the attribute value, excluding any HTML markup. If the value attribute contains exactly 150 characters (regardless of visual presentation), the assert evaluates to `true`.",
					"test_case": "element_text_length_equal_validation_xpath_input",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttributeCheck",
					"ElementTextLength",
					"InputField",
					"ValueLength"
				]
			},
			"description": [
				"### Input Value Text Length Equal Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the text length of the value attribute of an input element (of type text) identified by the Xpath selector `//input[@id='content']` is exactly 150 characters.",
				"The text length is computed solely from the value attribute, excluding any HTML markup.",
				"If the value attribute contains exactly 150 characters (regardless of visual presentation), the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:Equal --Expected:150}}",
				"locator": "Xpath",
				"onAttribute": "value",
				"onElement": "//input[@id='content']",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element contains newline characters, tabs, or excessive whitespace that affect character count",
						"Element not found",
						"Element text length is not equal to expected",
						"Incorrect Id usage",
						"Unexpected DOM structure"
					],
					"expected_result": true,
					"notes": "Verifies that the text length of the value attribute of the input element with the Id `content` is exactly 150 characters. The calculation is based solely on the attribute value, excluding any HTML markup. If the value attribute contains exactly 150 characters (regardless of visual presentation), the assert evaluates to `true`.",
					"test_case": "element_text_length_equal_validation_id_input",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttributeCheck",
					"ElementTextLength",
					"InputField",
					"ValueLength"
				]
			},
			"description": [
				"### Input Value Text Length Equal Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that the text length of the value attribute of an input element (of type text) with the Id `content` is exactly 150 characters.",
				"The text length is computed solely from the value attribute, excluding any HTML markup.",
				"If the value attribute contains exactly 150 characters (regardless of visual presentation), the assert evaluates to `true`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:Equal --Expected:150}}",
				"locator": "Id",
				"onAttribute": "value",
				"onElement": "content",
				"pluginName": "Assert"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Element text length is not equal to expected",
						"Incorrect CSS selector usage",
						"Regular expression fails to extract correct text",
						"Unexpected DOM structure",
						"Whitespace or inner text nodes affecting length calculation"
					],
					"expected_result": true,
					"notes": "Verifies that the text length of the value attribute of the input element with the CSS selector `input#content` is exactly 100 characters. The length is determined solely from the attribute value, excluding HTML markup. A regular expression `(?s)^(.{0,100})` is used to extract up to 100 characters, and the assertion passes only if exactly 100 characters are captured; otherwise, it fails.",
					"test_case": "element_text_length_equal_validation_css_input",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementTextLength",
					"InputField",
					"ValueLength",
					"Validation"
				]
			},
			"description": [
				"### Input Value Text Length Equal Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the text length of the value attribute of an input element (of type text) identified by the CSS selector `input#content` is exactly 100 characters.",
				"The text length is computed solely from the attribute value, excluding any HTML markup.",
				"A regular expression `(?s)^(.{0,100})` is used to extract up to 100 characters, and the assertion passes only if exactly 100 characters are captured.",
				"If the extracted match is shorter than 100 characters, the assertion fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:Equal --Expected:100}}",
				"locator": "CssSelector",
				"onAttribute": "value",
				"onElement": "input#content",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,100})"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Element text length is not equal to expected",
						"Incorrect XPath indexing or attribute usage",
						"Regular expression fails to extract correct text",
						"Unexpected DOM structure",
						"Whitespace or inner text nodes affecting length calculation",
						"Xpath syntax errors"
					],
					"expected_result": true,
					"notes": "Verifies that the text length of the value attribute of the input element with the Xpath selector `//input[@id='content']` is exactly 100 characters. The length is determined solely from the attribute value, excluding HTML markup. A regular expression `(?s)^(.{0,100})` is used to extract up to 100 characters, and the assertion passes only if exactly 100 characters are captured; otherwise, it fails.",
					"test_case": "element_text_length_equal_validation_xpath_input",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementTextLength",
					"InputField",
					"ValueLength",
					"Validation"
				]
			},
			"description": [
				"### Input Value Text Length Equal Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the text length of the value attribute of an input element (of type text) identified by the Xpath selector `//input[@id='content']` is exactly 100 characters.",
				"The text length is computed solely from the attribute value, excluding any HTML markup.",
				"A regular expression `(?s)^(.{0,100})` is used to extract up to 100 characters, and the assertion passes only if exactly 100 characters are captured.",
				"If the extracted match is shorter than 100 characters, the assertion fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:Equal --Expected:100}}",
				"locator": "Xpath",
				"onAttribute": "value",
				"onElement": "//input[@id='content']",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,100})"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Element text length is not equal to expected",
						"Incorrect Id usage",
						"Regular expression fails to extract correct text",
						"Unexpected DOM structure",
						"Whitespace or inner text nodes affecting length calculation"
					],
					"expected_result": true,
					"notes": "Verifies that the text length of the value attribute of the input element with the Id `content` is exactly 100 characters. The length is determined solely from the attribute value, excluding HTML markup. A regular expression `(?s)^(.{0,100})` is used to extract up to 100 characters, and the assertion passes only if exactly 100 characters are captured; otherwise, it fails.",
					"test_case": "element_text_length_equal_validation_id_input",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementTextLength",
					"InputField",
					"ValueLength",
					"Validation"
				]
			},
			"description": [
				"### Input Value Text Length Equal Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that the text length of the value attribute of an input element (of type text) with the Id `content` is exactly 100 characters.",
				"The text length is computed solely from the attribute value, excluding any HTML markup.",
				"A regular expression `(?s)^(.{0,100})` is used to extract up to 100 characters, and the assertion passes only if exactly 100 characters are captured.",
				"If the extracted match is shorter than 100 characters, the assertion fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:Equal --Expected:100}}",
				"locator": "Id",
				"onAttribute": "value",
				"onElement": "content",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,100})"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Element text length equals expected",
						"Incorrect CSS selector usage",
						"Unexpected DOM structure",
						"Whitespace or nested text nodes affecting length calculation"
					],
					"expected_result": true,
					"notes": "Verifies that the visible text content of the element with the CSS selector `#content` does not equal 255 characters. The length is based solely on the visible text, excluding any HTML markup or tags.",
					"test_case": "element_text_length_not_equal_validation_css",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementTextLength",
					"Validation"
				]
			},
			"description": [
				"### Element Text Length NotEqual Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the visible text content of the element identified by the CSS selector `#content` does not equal 255 characters.",
				"The length is based solely on the visible text, excluding any HTML markup or tags.",
				"The assertion passes only if the computed length is different from 255."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:NotEqual --Expected:255}}",
				"locator": "CssSelector",
				"onElement": "#content",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Element text length equals expected",
						"Incorrect XPath indexing or attribute usage",
						"Unexpected DOM structure",
						"Whitespace or nested text nodes affecting length calculation",
						"Xpath syntax errors"
					],
					"expected_result": true,
					"notes": "Verifies that the visible text content of the element with the Xpath selector `//div[@id='content']` does not equal 255 characters. The length is based solely on the visible text, excluding any HTML markup or tags.",
					"test_case": "element_text_length_not_equal_validation_xpath",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementTextLength",
					"Validation"
				]
			},
			"description": [
				"### Element Text Length NotEqual Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the visible text content of the element identified by the Xpath selector `//div[@id='content']` does not equal 255 characters.",
				"The length is based solely on the visible text, excluding any HTML markup or tags.",
				"The assertion passes only if the computed length is different from 255."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:NotEqual --Expected:255}}",
				"locator": "Xpath",
				"onElement": "//div[@id='content']",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Element text length equals expected",
						"Incorrect Id usage",
						"Unexpected DOM structure",
						"Whitespace or nested text nodes affecting length calculation"
					],
					"expected_result": true,
					"notes": "Verifies that the visible text content of the element with the Id `content` does not equal 255 characters. The length is based solely on the visible text, excluding any HTML markup or tags.",
					"test_case": "element_text_length_not_equal_validation_id",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementTextLength",
					"Validation"
				]
			},
			"description": [
				"### Element Text Length NotEqual Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that the visible text content of the element with the Id `content` does not equal 255 characters.",
				"The length is based solely on the visible text, excluding any HTML markup or tags.",
				"The assertion passes only if the computed length is different from 255."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:NotEqual --Expected:255}}",
				"locator": "Id",
				"onElement": "content",
				"pluginName": "Assert"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect CssSelector usage",
						"Regex captures exactly 100 characters",
						"Unexpected DOM structure",
						"Unexpected whitespace or formatting affecting length calculation"
					],
					"expected_result": true,
					"notes": "Verifies that the visible text of the element with the CSS selector `#content` does not equal 100 characters. The length is determined solely from the visible text, excluding any HTML markup or tags. A regular expression `(?s)^(.{0,100})` is applied to extract up to 100 characters into a capture group, and the assertion fails if exactly 100 characters are captured.",
					"test_case": "element_text_length_not_equal_validation_css",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementTextLength",
					"Validation"
				]
			},
			"description": [
				"### Element Text Length NotEqual with Regex Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the visible text content of the element identified by the CSS selector `#content` is not exactly 100 characters.",
				"The length is based solely on the visible text, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(.{0,100})` is applied to the visible text to extract up to 100 characters into a capture group.",
				"The assertion passes only if fewer than 100 characters are captured or if no match occurs; it fails if exactly 100 characters are captured."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:NotEqual --Expected:100}}",
				"locator": "CssSelector",
				"onElement": "#content",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,100})"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect XPath indexing or attribute usage",
						"Regex captures exactly 100 characters",
						"Unexpected DOM structure",
						"Unexpected whitespace or formatting affecting length calculation",
						"Xpath syntax errors"
					],
					"expected_result": true,
					"notes": "Verifies that the visible text of the element with the Xpath selector `//div[@id='content']` does not equal 100 characters. The length is determined solely from the visible text, excluding any HTML markup or tags. A regular expression `(?s)^(.{0,100})` is applied to extract up to 100 characters into a capture group, and the assertion fails if exactly 100 characters are captured.",
					"test_case": "element_text_length_not_equal_validation_xpath",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementTextLength",
					"Validation"
				]
			},
			"description": [
				"### Element Text Length NotEqual with Regex Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the visible text content of the element identified by the Xpath selector `//div[@id='content']` is not exactly 100 characters.",
				"The length is based solely on the visible text, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(.{0,100})` is applied to the visible text to extract up to 100 characters into a capture group.",
				"The assertion passes only if fewer than 100 characters are captured or if no match occurs; it fails if exactly 100 characters are captured."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:NotEqual --Expected:100}}",
				"locator": "Xpath",
				"onElement": "//div[@id='content']",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,100})"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect Id usage",
						"Regex captures exactly 100 characters",
						"Unexpected DOM structure",
						"Unexpected whitespace or formatting affecting length calculation"
					],
					"expected_result": true,
					"notes": "Verifies that the visible text of the element with the Id `content` does not equal 100 characters. The length is determined solely from the visible text, excluding any HTML markup or tags. A regular expression `(?s)^(.{0,100})` is applied to extract up to 100 characters into a capture group, and the assertion fails if exactly 100 characters are captured.",
					"test_case": "element_text_length_not_equal_validation_id",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementTextLength",
					"Validation"
				]
			},
			"description": [
				"### Element Text Length NotEqual with Regex Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that the visible text content of the element with the Id `content` is not exactly 100 characters.",
				"The length is based solely on the visible text, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(.{0,100})` is applied to the visible text to extract up to 100 characters into a capture group.",
				"The assertion passes only if fewer than 100 characters are captured or if no match occurs; it fails if exactly 100 characters are captured."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:NotEqual --Expected:100}}",
				"locator": "Id",
				"onElement": "content",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,100})"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Element text length equals expected",
						"Incorrect CSS selector usage",
						"Unexpected DOM structure",
						"Unexpected whitespace or formatting in the attribute value"
					],
					"expected_result": true,
					"notes": "Verifies that the text length of the value attribute of the input element with the CSS selector `input#content` does not equal 150 characters. The length is determined solely from the text from the `value` attribute, excluding any HTML markup or tags.",
					"test_case": "element_text_length_not_equal_validation_css_input",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttributeCheck",
					"ElementTextLength",
					"InputField",
					"Validation",
					"ValueLength"
				]
			},
			"description": [
				"### Input Value Text Length NotEqual Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the text length of the value attribute of an input element (of type text) identified by the CSS selector `input#content` does not equal 150 characters.",
				"The length is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"The assertion passes only if the computed length is not exactly 150 characters."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:NotEqual --Expected:150}}",
				"locator": "CssSelector",
				"onAttribute": "value",
				"onElement": "input#content",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Element text length equals expected",
						"Incorrect XPath indexing or attribute usage",
						"Unexpected DOM structure",
						"Unexpected whitespace or formatting in the attribute value",
						"Xpath syntax errors"
					],
					"expected_result": true,
					"notes": "Verifies that the text length of the value attribute of the input element with the Xpath selector `//input[@id='content']` does not equal 150 characters. The length is determined solely from the text from the `value` attribute, excluding any HTML markup or tags.",
					"test_case": "element_text_length_not_equal_validation_xpath_input",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttributeCheck",
					"ElementTextLength",
					"InputField",
					"Validation",
					"ValueLength"
				]
			},
			"description": [
				"### Input Value Text Length NotEqual Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the text length of the value attribute of an input element (of type text) identified by the Xpath selector `//input[@id='content']` does not equal 150 characters.",
				"The length is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"The assertion passes only if the computed length is not exactly 150 characters."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:NotEqual --Expected:150}}",
				"locator": "Xpath",
				"onAttribute": "value",
				"onElement": "//input[@id='content']",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Element text length equals expected",
						"Incorrect Id usage",
						"Unexpected DOM structure",
						"Unexpected whitespace or formatting in the attribute value"
					],
					"expected_result": true,
					"notes": "Verifies that the text length of the value attribute of the input element with the Id `content` does not equal 150 characters. The length is determined solely from the text from the `value` attribute, excluding any HTML markup or tags.",
					"test_case": "element_text_length_not_equal_validation_id_input",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttributeCheck",
					"ElementTextLength",
					"InputField",
					"Validation",
					"ValueLength"
				]
			},
			"description": [
				"### Input Value Text Length NotEqual Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that the text length of the value attribute of an input element (of type text) with the Id `content` does not equal 150 characters.",
				"The length is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"The assertion passes only if the computed length is not exactly 150 characters."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:NotEqual --Expected:150}}",
				"locator": "Id",
				"onAttribute": "value",
				"onElement": "content",
				"pluginName": "Assert"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect CSS selector usage",
						"Regex captures exactly 100 characters",
						"Unexpected DOM structure",
						"Unexpected whitespace or formatting in the attribute value"
					],
					"expected_result": true,
					"notes": "Verifies that the text length of the value attribute of the input element with the CSS selector `input#content` does not equal 100 characters. The length is determined solely from the text from the `value` attribute, excluding any HTML markup or tags. A regular expression `(?s)^(.{0,110})` is applied to extract up to 110 characters into a capture group; the assertion fails if exactly 100 characters are captured.",
					"test_case": "element_text_length_not_equal_validation_css_input",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttributeCheck",
					"ElementTextLength",
					"InputField",
					"ValueLength",
					"Validation"
				]
			},
			"description": [
				"### Input Value Text Length NotEqual Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the text length of the value attribute of an input element (of type text) identified by the CSS selector `input#content` is not exactly 100 characters.",
				"The length is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(.{0,110})` is applied to the `value` attribute to extract up to 110 characters into a capture group.",
				"The assertion passes only if the length of the regex capture group is not exactly 100; if exactly 100 characters are captured, the assertion fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:NotEqual --Expected:100}}",
				"locator": "CssSelector",
				"onAttribute": "value",
				"onElement": "input#content",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,110})"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect XPath indexing or attribute usage",
						"Regex captures exactly 100 characters",
						"Unexpected DOM structure",
						"Unexpected whitespace or formatting in the attribute value",
						"Xpath syntax errors"
					],
					"expected_result": true,
					"notes": "Verifies that the text length of the value attribute of the input element with the Xpath selector `//input[@id='content']` does not equal 100 characters. The length is determined solely from the text from the `value` attribute, excluding any HTML markup or tags. A regular expression `(?s)^(.{0,110})` is applied to extract up to 110 characters into a capture group; the assertion fails if exactly 100 characters are captured.",
					"test_case": "element_text_length_not_equal_validation_xpath_input",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttributeCheck",
					"ElementTextLength",
					"InputField",
					"ValueLength",
					"Validation"
				]
			},
			"description": [
				"### Input Value Text Length NotEqual Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the text length of the value attribute of an input element (of type text) identified by the Xpath selector `//input[@id='content']` is not exactly 100 characters.",
				"The length is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(.{0,110})` is applied to the `value` attribute to extract up to 110 characters into a capture group.",
				"The assertion passes only if the length of the regex capture group is not exactly 100; if exactly 100 characters are captured, the assertion fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:NotEqual --Expected:100}}",
				"locator": "Xpath",
				"onAttribute": "value",
				"onElement": "//input[@id='content']",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,110})"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect Id usage",
						"Regex captures exactly 100 characters",
						"Unexpected DOM structure",
						"Unexpected whitespace or formatting in the attribute value"
					],
					"expected_result": true,
					"notes": "Verifies that the text length of the value attribute of the input element with the Id `content` does not equal 100 characters. The length is determined solely from the text from the `value` attribute, excluding any HTML markup or tags. A regular expression `(?s)^(.{0,110})` is applied to extract up to 110 characters into a capture group; the assertion fails if exactly 100 characters are captured.",
					"test_case": "element_text_length_not_equal_validation_id_input",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttributeCheck",
					"ElementTextLength",
					"InputField",
					"ValueLength",
					"Validation"
				]
			},
			"description": [
				"### Input Value Text Length NotEqual Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that the text length of the value attribute of an input element (of type text) with the Id `content` is not exactly 100 characters.",
				"The length is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(.{0,110})` is applied to the `value` attribute to extract up to 110 characters into a capture group.",
				"The assertion passes only if the length of the regex capture group is not exactly 100; if exactly 100 characters are captured, the assertion fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:NotEqual --Expected:100}}",
				"locator": "Id",
				"onAttribute": "value",
				"onElement": "content",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,110})"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect CSS selector usage",
						"Unexpected DOM structure",
						"Visible text length is less than or equal to expected"
					],
					"expected_result": true,
					"notes": "Verifies that the visible text of the element with the CSS selector `#content` is greater than 255 characters. The length is based solely on the visible text, excluding any HTML markup or tags.",
					"test_case": "element_text_length_greater_validation_css",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementTextLength",
					"GreaterCheck",
					"Validation"
				]
			},
			"description": [
				"### Element Text Length Greater Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the visible text content of the element identified by the CSS selector `#content` is greater than 255 characters.",
				"The length is based solely on the visible text, excluding any HTML markup or tags.",
				"The assertion passes only if the computed length is greater than 255."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:Greater --Expected:255}}",
				"locator": "CssSelector",
				"onElement": "#content",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect XPath indexing or attribute usage",
						"Unexpected DOM structure",
						"Visible text length is less than or equal to expected",
						"Xpath syntax errors"
					],
					"expected_result": true,
					"notes": "Verifies that the visible text of the element with the Xpath selector `//div[@id='content']` is greater than 255 characters. The length is based solely on the visible text, excluding any HTML markup or tags.",
					"test_case": "element_text_length_greater_validation_xpath",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementTextLength",
					"GreaterCheck",
					"Validation"
				]
			},
			"description": [
				"### Element Text Length Greater Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the visible text content of the element identified by the Xpath selector `//div[@id='content']` is greater than 255 characters.",
				"The length is based solely on the visible text, excluding any HTML markup or tags.",
				"The assertion passes only if the computed length is greater than 255."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:Greater --Expected:255}}",
				"locator": "Xpath",
				"onElement": "//div[@id='content']",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect Id usage",
						"Unexpected DOM structure",
						"Visible text length is less than or equal to expected"
					],
					"expected_result": true,
					"notes": "Verifies that the visible text of the element with the Id `content` is greater than 255 characters. The length is based solely on the visible text, excluding any HTML markup or tags.",
					"test_case": "element_text_length_greater_validation_id",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementTextLength",
					"GreaterCheck",
					"Validation"
				]
			},
			"description": [
				"### Element Text Length Greater Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that the visible text content of the element with the Id `content` is greater than 255 characters.",
				"The length is based solely on the visible text, excluding any HTML markup or tags.",
				"The assertion passes only if the computed length is greater than 255."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:Greater --Expected:255}}",
				"locator": "Id",
				"onElement": "content",
				"pluginName": "Assert"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect CSS selector usage",
						"Regex captures exactly 100 characters",
						"Unexpected DOM structure",
						"Unexpected whitespace or formatting in the attribute value"
					],
					"expected_result": true,
					"notes": "Verifies that the text length of the value attribute of the input element with the CSS selector `input#content` is greater than 100 characters. The length is determined solely from the text from the `value` attribute, excluding any HTML markup or tags. A regular expression `(?s)^(.{0,110})` is applied to extract up to 110 characters into a capture group; the assertion passes only if more than 100 characters are captured.",
					"test_case": "element_text_length_greater_validation_css_input",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttributeCheck",
					"ElementTextLength",
					"InputField",
					"ValueLength",
					"Validation"
				]
			},
			"description": [
				"### Input Value Text Length Greater Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the text length of the value attribute of an input element (of type text) identified by the CSS selector `input#content` is greater than 100 characters.",
				"The length is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(.{0,110})` is applied to the `value` attribute to extract up to 110 characters into a capture group.",
				"The assertion passes only if more than 100 characters are captured; if exactly 100 characters are captured, the assertion fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:Greater --Expected:100}}",
				"locator": "CssSelector",
				"onAttribute": "value",
				"onElement": "input#content",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,110})"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect XPath indexing or attribute usage",
						"Regex captures exactly 100 characters",
						"Unexpected DOM structure",
						"Unexpected whitespace or formatting in the attribute value",
						"Xpath syntax errors"
					],
					"expected_result": true,
					"notes": "Verifies that the text length of the value attribute of the input element with the Xpath selector `//input[@id='content']` is greater than 100 characters. The length is determined solely from the text from the `value` attribute, excluding any HTML markup or tags. A regular expression `(?s)^(.{0,110})` is applied to extract up to 110 characters into a capture group; the assertion passes only if more than 100 characters are captured.",
					"test_case": "element_text_length_greater_validation_xpath_input",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttributeCheck",
					"ElementTextLength",
					"InputField",
					"ValueLength",
					"Validation"
				]
			},
			"description": [
				"### Input Value Text Length Greater Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the text length of the value attribute of an input element (of type text) identified by the Xpath selector `//input[@id='content']` is greater than 100 characters.",
				"The length is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(.{0,110})` is applied to the `value` attribute to extract up to 110 characters into a capture group.",
				"The assertion passes only if more than 100 characters are captured; if exactly 100 characters are captured, the assertion fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:Greater --Expected:100}}",
				"locator": "Xpath",
				"onAttribute": "value",
				"onElement": "//input[@id='content']",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,110})"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect Id usage",
						"Regex captures exactly 100 characters",
						"Unexpected DOM structure",
						"Unexpected whitespace or formatting in the attribute value"
					],
					"expected_result": true,
					"notes": "Verifies that the text length of the value attribute of the input element with the Id `content` is greater than 100 characters. The length is determined solely from the text from the `value` attribute, excluding any HTML markup or tags. A regular expression `(?s)^(.{0,110})` is applied to extract up to 110 characters into a capture group; the assertion passes only if more than 100 characters are captured.",
					"test_case": "element_text_length_greater_validation_id_input",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttributeCheck",
					"ElementTextLength",
					"InputField",
					"ValueLength",
					"Validation"
				]
			},
			"description": [
				"### Input Value Text Length Greater Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that the text length of the value attribute of an input element (of type text) with the Id `content` is greater than 100 characters.",
				"The length is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(.{0,110})` is applied to the `value` attribute to extract up to 110 characters into a capture group.",
				"The assertion passes only if more than 100 characters are captured; if exactly 100 characters are captured, the assertion fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:Greater --Expected:100}}",
				"locator": "Id",
				"onAttribute": "value",
				"onElement": "content",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,110})"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect CssSelector usage",
						"Unexpected DOM structure",
						"Unexpected whitespace or formatting in the attribute value",
						"Visible text length is not greater than expected"
					],
					"expected_result": true,
					"notes": "Verifies that the text length of the value attribute of the textarea with the CSS selector `textarea#content` is greater than 150 characters. The length is determined solely from the text from the `value` attribute, excluding any HTML markup or tags. A regular expression `(?s)^(.{0,200})` is applied to extract up to 200 characters into a capture group; the assertion passes only if the computed length is greater than 150.",
					"test_case": "element_text_length_greater_validation_css_textarea",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttributeCheck",
					"ElementTextLength",
					"Textarea",
					"Validation",
					"ValueLength"
				]
			},
			"description": [
				"### Textarea Value Text Length Greater Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the text length of the value attribute of a textarea with the CSS selector `textarea#content` is greater than 150 characters.",
				"The length is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(.{0,200})` is applied to the `value` attribute to extract up to 200 characters into a capture group.",
				"The assertion passes only if the computed length is greater than 150; if exactly 150 characters are captured or fewer, the assertion fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:Greater --Expected:150}}",
				"locator": "CssSelector",
				"onAttribute": "value",
				"onElement": "textarea#content",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,200})"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect XPath indexing or attribute usage",
						"Unexpected DOM structure",
						"Unexpected whitespace or formatting in the attribute value",
						"Xpath syntax errors"
					],
					"expected_result": true,
					"notes": "Verifies that the text length of the value attribute of the textarea with the Xpath selector `//textarea[@id='content']` is greater than 150 characters. The length is determined solely from the text from the `value` attribute, excluding any HTML markup or tags. A regular expression `(?s)^(.{0,200})` is applied to extract up to 200 characters into a capture group; the assertion passes only if the computed length is greater than 150.",
					"test_case": "element_text_length_greater_validation_xpath_textarea",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttributeCheck",
					"ElementTextLength",
					"Textarea",
					"Validation",
					"ValueLength"
				]
			},
			"description": [
				"### Textarea Value Text Length Greater Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the text length of the value attribute of a textarea with the Xpath selector `//textarea[@id='content']` is greater than 150 characters.",
				"The length is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(.{0,200})` is applied to the `value` attribute to extract up to 200 characters into a capture group.",
				"The assertion passes only if the computed length is greater than 150; if exactly 150 characters are captured or fewer, the assertion fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:Greater --Expected:150}}",
				"locator": "Xpath",
				"onAttribute": "value",
				"onElement": "//textarea[@id='content']",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,200})"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect Id usage",
						"Unexpected DOM structure",
						"Unexpected whitespace or formatting in the attribute value"
					],
					"expected_result": true,
					"notes": "Verifies that the text length of the value attribute of the textarea with the Id `content` is greater than 150 characters. The length is determined solely from the text from the `value` attribute, excluding any HTML markup or tags. A regular expression `(?s)^(.{0,200})` is applied to extract up to 200 characters into a capture group; the assertion passes only if the computed length is greater than 150.",
					"test_case": "element_text_length_greater_validation_id_textarea",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttributeCheck",
					"ElementTextLength",
					"Textarea",
					"Validation",
					"ValueLength"
				]
			},
			"description": [
				"### Textarea Value Text Length Greater Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that the text length of the value attribute of a textarea with the Id `content` is greater than 150 characters.",
				"The length is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(.{0,200})` is applied to the `value` attribute to extract up to 200 characters into a capture group.",
				"The assertion passes only if the computed length is greater than 150; if exactly 150 characters are captured or fewer, the assertion fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:Greater --Expected:150}}",
				"locator": "Id",
				"onAttribute": "value",
				"onElement": "content",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,200})"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect CssSelector usage",
						"Regex captures exactly 100 characters",
						"Unexpected DOM structure",
						"Unexpected whitespace or formatting in the attribute value"
					],
					"expected_result": true,
					"notes": "Verifies that the text length of the value attribute of the textarea with the CSS selector `textarea#content` is greater than 100 characters. The length is determined solely from the text from the `value` attribute, excluding any HTML markup or tags. A regular expression `(?s)^(.{0,110})` is applied to extract up to 110 characters into a capture group; the assertion passes only if more than 100 characters are captured.",
					"test_case": "element_text_length_greater_validation_css_textarea",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttributeCheck",
					"ElementTextLength",
					"Textarea",
					"Validation",
					"ValueLength"
				]
			},
			"description": [
				"### Textarea Value Text Length Greater Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the text length of the value attribute of a textarea element identified by the CSS selector `textarea#content` is greater than 100 characters.",
				"The length is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(.{0,110})` is applied to the `value` attribute to extract up to 110 characters into a capture group.",
				"The assertion passes only if more than 100 characters are captured; if exactly 100 characters are captured, the assertion fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:Greater --Expected:100}}",
				"locator": "CssSelector",
				"onAttribute": "value",
				"onElement": "textarea#content",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,110})"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect XPath indexing or attribute usage",
						"Regex captures exactly 100 characters",
						"Unexpected DOM structure",
						"Unexpected whitespace or formatting in the attribute value",
						"Xpath syntax errors"
					],
					"expected_result": true,
					"notes": "Verifies that the text length of the value attribute of the textarea with the Xpath selector `//textarea[@id='content']` is greater than 100 characters. The length is determined solely from the text from the `value` attribute, excluding any HTML markup or tags. A regular expression `(?s)^(.{0,110})` is applied to extract up to 110 characters into a capture group; the assertion passes only if more than 100 characters are captured.",
					"test_case": "element_text_length_greater_validation_xpath_textarea",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttributeCheck",
					"ElementTextLength",
					"Textarea",
					"Validation",
					"ValueLength"
				]
			},
			"description": [
				"### Textarea Value Text Length Greater Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the text length of the value attribute of a textarea element identified by the Xpath selector `//textarea[@id='content']` is greater than 100 characters.",
				"The length is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(.{0,110})` is applied to the `value` attribute to extract up to 110 characters into a capture group.",
				"The assertion passes only if more than 100 characters are captured; if exactly 100 characters are captured, the assertion fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:Greater --Expected:100}}",
				"locator": "Xpath",
				"onAttribute": "value",
				"onElement": "//textarea[@id='content']",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,110})"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect Id usage",
						"Regex captures exactly 100 characters",
						"Unexpected DOM structure",
						"Unexpected whitespace or formatting in the attribute value"
					],
					"expected_result": true,
					"notes": "Verifies that the text length of the value attribute of the textarea with the Id `content` is greater than 100 characters. The length is determined solely from the text from the `value` attribute, excluding any HTML markup or tags. A regular expression `(?s)^(.{0,110})` is applied to extract up to 110 characters into a capture group; the assertion passes only if more than 100 characters are captured.",
					"test_case": "element_text_length_greater_validation_id_textarea",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttributeCheck",
					"ElementTextLength",
					"Textarea",
					"Validation",
					"ValueLength"
				]
			},
			"description": [
				"### Textarea Value Text Length Greater Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that the text length of the value attribute of a textarea with the Id `content` is greater than 100 characters.",
				"The length is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(.{0,110})` is applied to the `value` attribute to extract up to 110 characters into a capture group.",
				"The assertion passes only if more than 100 characters are captured; if exactly 100 characters are captured, the assertion fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:Greater --Expected:100}}",
				"locator": "Id",
				"onAttribute": "value",
				"onElement": "content",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,110})"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Element text length is less than expected",
						"Incorrect CSS selector usage",
						"Unexpected DOM structure"
					],
					"expected_result": true,
					"notes": "Verifies that the visible text of the element with the CSS selector `#content` is greater than or equal to 255 characters. The length is computed from the visible text only, excluding any HTML markup or tags.",
					"test_case": "element_text_length_greater_equal_validation_css",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementTextLength",
					"GreaterEqualCheck",
					"Validation"
				]
			},
			"description": [
				"### Element Text Length GreaterEqual Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the visible text content of the element identified by the CSS selector `#content` is greater than or equal to 255 characters.",
				"The length is computed from the visible text only, excluding any HTML markup or tags.",
				"The assertion passes only if the computed length is greater than or equal to 255."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:GreaterEqual --Expected:255}}",
				"locator": "CssSelector",
				"onElement": "#content",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Element text length is less than expected",
						"Incorrect XPath indexing or attribute usage",
						"Unexpected DOM structure",
						"Xpath syntax errors"
					],
					"expected_result": true,
					"notes": "Verifies that the visible text of the element with the Xpath selector `//div[@id='content']` is greater than or equal to 255 characters. The length is computed from the visible text only, excluding any HTML markup or tags.",
					"test_case": "element_text_length_greater_equal_validation_xpath",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementTextLength",
					"GreaterEqualCheck",
					"Validation"
				]
			},
			"description": [
				"### Element Text Length GreaterEqual Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the visible text content of the element identified by the Xpath selector `//div[@id='content']` is greater than or equal to 255 characters.",
				"The length is computed from the visible text only, excluding any HTML markup or tags.",
				"The assertion passes only if the computed length is greater than or equal to 255."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:GreaterEqual --Expected:255}}",
				"locator": "Xpath",
				"onElement": "//div[@id='content']",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Element text length is less than expected",
						"Incorrect Id usage",
						"Unexpected DOM structure"
					],
					"expected_result": true,
					"notes": "Verifies that the visible text of the element with the Id `content` is greater than or equal to 255 characters. The length is computed from the visible text only, excluding any HTML markup or tags.",
					"test_case": "element_text_length_greater_equal_validation_id",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementTextLength",
					"GreaterEqualCheck",
					"Validation"
				]
			},
			"description": [
				"### Element Text Length GreaterEqual Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that the visible text content of the element with the Id `content` is greater than or equal to 255 characters.",
				"The length is computed from the visible text only, excluding any HTML markup or tags.",
				"The assertion passes only if the computed length is greater than or equal to 255."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:GreaterEqual --Expected:255}}",
				"locator": "Id",
				"onElement": "content",
				"pluginName": "Assert"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect CssSelector usage",
						"Unexpected DOM structure",
						"Unexpected whitespace or formatting in the element text"
					],
					"expected_result": true,
					"notes": "Verifies that the visible text of the element with the CSS selector `#content` is greater than or equal to 100 characters. The length is determined solely from the visible text, excluding any HTML markup or tags. A regular expression `(?s)^(.{0,100})` is applied to extract up to 100 characters into a capture group; the assertion passes only if the computed length is greater than or equal to 100.",
					"test_case": "element_text_length_greater_equal_validation_css",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementTextLength",
					"Validation"
				]
			},
			"description": [
				"### Element Text Length GreaterEqual Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the visible text content of the element identified by the CSS selector `#content` is greater than or equal to 100 characters.",
				"The length is based solely on the visible text, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(.{0,100})` is applied to the visible text to extract up to 100 characters into a capture group.",
				"The assertion passes only if the computed length is greater than or equal to 100; if fewer than 100 characters are captured, the assertion fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:GreaterEqual --Expected:100}}",
				"locator": "CssSelector",
				"onElement": "#content",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,100})"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect XPath indexing or attribute usage",
						"Unexpected DOM structure",
						"Unexpected whitespace or formatting in the element text",
						"Xpath syntax errors"
					],
					"expected_result": true,
					"notes": "Verifies that the visible text of the element with the Xpath selector `//div[@id='content']` is greater than or equal to 100 characters. The length is determined solely from the visible text, excluding any HTML markup or tags. A regular expression `(?s)^(.{0,100})` is applied to extract up to 100 characters into a capture group; the assertion passes only if the computed length is greater than or equal to 100.",
					"test_case": "element_text_length_greater_equal_validation_xpath",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementTextLength",
					"Validation"
				]
			},
			"description": [
				"### Element Text Length GreaterEqual Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the visible text content of the element identified by the Xpath selector `//div[@id='content']` is greater than or equal to 100 characters.",
				"The length is based solely on the visible text, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(.{0,100})` is applied to the visible text to extract up to 100 characters into a capture group.",
				"The assertion passes only if the computed length is greater than or equal to 100; if fewer than 100 characters are captured, the assertion fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:GreaterEqual --Expected:100}}",
				"locator": "Xpath",
				"onElement": "//div[@id='content']",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,100})"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect Id usage",
						"Unexpected DOM structure",
						"Unexpected whitespace or formatting in the element text"
					],
					"expected_result": true,
					"notes": "Verifies that the visible text of the element with the Id `content` is greater than or equal to 100 characters. The length is determined solely from the visible text, excluding any HTML markup or tags. A regular expression `(?s)^(.{0,100})` is applied to extract up to 100 characters into a capture group; the assertion passes only if the computed length is greater than or equal to 100.",
					"test_case": "element_text_length_greater_equal_validation_id",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementTextLength",
					"Validation"
				]
			},
			"description": [
				"### Element Text Length GreaterEqual Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that the visible text content of the element with the Id `content` is greater than or equal to 100 characters.",
				"The length is based solely on the visible text, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(.{0,100})` is applied to the visible text to extract up to 100 characters into a capture group.",
				"The assertion passes only if the computed length is greater than or equal to 100; if fewer than 100 characters are captured, the assertion fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:GreaterEqual --Expected:100}}",
				"locator": "Id",
				"onElement": "content",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,100})"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect CssSelector usage",
						"Unexpected DOM structure",
						"Unexpected whitespace or formatting in the attribute value"
					],
					"expected_result": true,
					"notes": "Verifies that the text length of the value attribute of the textarea with the CSS selector `textarea#content` is greater than or equal to 150 characters. The length is determined solely from the text from the `value` attribute, excluding any HTML markup or tags.",
					"test_case": "element_text_length_greater_equal_validation_css_textarea",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttributeCheck",
					"ElementTextLength",
					"Textarea",
					"Validation",
					"ValueLength"
				]
			},
			"description": [
				"### Textarea Value Text Length GreaterEqual Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the text length of the value attribute of a textarea element, identified by the CSS selector `textarea#content`, is greater than or equal to 150 characters.",
				"The length is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"The assertion passes only if the computed length is greater than or equal to 150."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:GreaterEqual --Expected:150}}",
				"locator": "CssSelector",
				"onAttribute": "value",
				"onElement": "textarea#content",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect XPath indexing or attribute usage",
						"Unexpected DOM structure",
						"Unexpected whitespace or formatting in the attribute value",
						"Xpath syntax errors"
					],
					"expected_result": true,
					"notes": "Verifies that the text length of the value attribute of the textarea with the Xpath selector `//textarea[@id='content']` is greater than or equal to 150 characters. The length is determined solely from the text from the `value` attribute, excluding any HTML markup or tags.",
					"test_case": "element_text_length_greater_equal_validation_xpath_textarea",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttributeCheck",
					"ElementTextLength",
					"Textarea",
					"Validation",
					"ValueLength"
				]
			},
			"description": [
				"### Textarea Value Text Length GreaterEqual Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the text length of the value attribute of a textarea element, identified by the Xpath selector `//textarea[@id='content']`, is greater than or equal to 150 characters.",
				"The length is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"The assertion passes only if the computed length is greater than or equal to 150."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:GreaterEqual --Expected:150}}",
				"locator": "Xpath",
				"onAttribute": "value",
				"onElement": "//textarea[@id='content']",
				"pluginName": "Assert",
				"regularExpression": null
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect Id usage",
						"Unexpected DOM structure",
						"Unexpected whitespace or formatting in the attribute value"
					],
					"expected_result": true,
					"notes": "Verifies that the text length of the value attribute of the textarea with the Id `content` is greater than or equal to 150 characters. The length is determined solely from the text from the `value` attribute, excluding any HTML markup or tags.",
					"test_case": "element_text_length_greater_equal_validation_id_textarea",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttributeCheck",
					"ElementTextLength",
					"Textarea",
					"Validation",
					"ValueLength"
				]
			},
			"description": [
				"### Textarea Value Text Length GreaterEqual Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that the text length of the value attribute of a textarea, with the Id `content`, is greater than or equal to 150 characters.",
				"The length is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"The assertion passes only if the computed length is greater than or equal to 150."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:GreaterEqual --Expected:150}}",
				"locator": "Id",
				"onAttribute": "value",
				"onElement": "content",
				"pluginName": "Assert"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect CssSelector usage",
						"Unexpected DOM structure",
						"Unexpected whitespace or formatting in the attribute value"
					],
					"expected_result": true,
					"notes": "Verifies that the text length of the value attribute of the textarea with the CSS selector `textarea#content` is greater than or equal to 100 characters. The length is determined solely from the text from the `value` attribute, excluding any HTML markup or tags. A regular expression `(?s)^(.{0,})` is applied to extract the full visible text into a capture group; the assertion passes only if the computed length is greater than or equal to 100 characters.",
					"test_case": "element_text_length_greater_equal_validation_css_textarea",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttributeCheck",
					"ElementTextLength",
					"Textarea",
					"Validation",
					"ValueLength"
				]
			},
			"description": [
				"### Textarea Value Text Length GreaterEqual Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the text length of the value attribute of a textarea element identified by the CSS selector `textarea#content` is greater than or equal to 100 characters.",
				"The length is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(.{0,})` is applied to the `value` attribute to extract the full visible text into a capture group.",
				"The assertion passes only if the computed length is greater than or equal to 100 characters; it fails if fewer than 100 characters are captured."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:GreaterEqual --Expected:100}}",
				"locator": "CssSelector",
				"onAttribute": "value",
				"onElement": "textarea#content",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,})"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect XPath indexing or attribute usage",
						"Unexpected DOM structure",
						"Unexpected whitespace or formatting in the attribute value",
						"Xpath syntax errors"
					],
					"expected_result": true,
					"notes": "Verifies that the text length of the value attribute of the textarea with the Xpath selector `//textarea[@id='content']` is greater than or equal to 100 characters. The length is determined solely from the text from the `value` attribute, excluding any HTML markup or tags. A regular expression `(?s)^(.{0,})` is applied to extract the full visible text into a capture group; the assertion passes only if the computed length is greater than or equal to 100 characters.",
					"test_case": "element_text_length_greater_equal_validation_xpath_textarea",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttributeCheck",
					"ElementTextLength",
					"Textarea",
					"Validation",
					"ValueLength"
				]
			},
			"description": [
				"### Textarea Value Text Length GreaterEqual Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the text length of the value attribute of a textarea element identified by the Xpath selector `//textarea[@id='content']` is greater than or equal to 100 characters.",
				"The length is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(.{0,})` is applied to the `value` attribute to extract the full visible text into a capture group.",
				"The assertion passes only if the computed length is greater than or equal to 100 characters; it fails if fewer than 100 characters are captured."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:GreaterEqual --Expected:100}}",
				"locator": "Xpath",
				"onAttribute": "value",
				"onElement": "//textarea[@id='content']",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,})"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect Id usage",
						"Unexpected DOM structure",
						"Unexpected whitespace or formatting in the attribute value"
					],
					"expected_result": true,
					"notes": "Verifies that the text length of the value attribute of the textarea with the Id `content` is greater than or equal to 100 characters. The length is determined solely from the text from the `value` attribute, excluding any HTML markup or tags. A regular expression `(?s)^(.{0,})` is applied to extract the full visible text into a capture group; the assertion passes only if the computed length is greater than or equal to 100 characters.",
					"test_case": "element_text_length_greater_equal_validation_id_textarea",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttributeCheck",
					"ElementTextLength",
					"Textarea",
					"Validation",
					"ValueLength"
				]
			},
			"description": [
				"### Textarea Value Text Length GreaterEqual Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that the text length of the value attribute of a textarea with the Id `content` is greater than or equal to 100 characters.",
				"The length is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(.{0,})` is applied to the `value` attribute to extract the full visible text into a capture group.",
				"The assertion passes only if the computed length is greater than or equal to 100 characters; it fails if fewer than 100 characters are captured."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:GreaterEqual --Expected:100}}",
				"locator": "Id",
				"onAttribute": "value",
				"onElement": "content",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,})"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect CssSelector usage",
						"Unexpected DOM structure",
						"Visible text length is greater than expected"
					],
					"expected_result": true,
					"notes": "Verifies that the visible text of the element with the CSS selector `#content` does not exceed 255 characters. The length is computed solely from the visible text, excluding any HTML markup or tags.",
					"test_case": "element_text_length_lower_equal_validation_css",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementTextLength",
					"Validation"
				]
			},
			"description": [
				"### Element Text Length LowerEqual Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the visible text content of the element identified by the CSS selector `#content` is less than or equal to 255 characters.",
				"The length is determined solely from the visible text, excluding any HTML markup or tags.",
				"The assertion passes only if the computed length is less than or equal to 255."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:LowerEqual --Expected:255}}",
				"locator": "CssSelector",
				"onElement": "#content",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect XPath indexing or attribute usage",
						"Unexpected DOM structure",
						"Visible text length is greater than expected",
						"Xpath syntax errors"
					],
					"expected_result": true,
					"notes": "Verifies that the visible text of the element with the Xpath selector `//div[@id='content']` does not exceed 255 characters. The length is computed solely from the visible text, excluding any HTML markup or tags.",
					"test_case": "element_text_length_lower_equal_validation_xpath",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementTextLength",
					"Validation"
				]
			},
			"description": [
				"### Element Text Length LowerEqual Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the visible text content of the element identified by the Xpath selector `//div[@id='content']` is less than or equal to 255 characters.",
				"The length is determined solely from the visible text, excluding any HTML markup or tags.",
				"The assertion passes only if the computed length is less than or equal to 255."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:LowerEqual --Expected:255}}",
				"locator": "Xpath",
				"onElement": "//div[@id='content']",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect Id usage",
						"Unexpected DOM structure",
						"Visible text length is greater than expected"
					],
					"expected_result": true,
					"notes": "Verifies that the visible text of the element with the Id `content` does not exceed 255 characters. The length is computed solely from the visible text, excluding any HTML markup or tags.",
					"test_case": "element_text_length_lower_equal_validation_id",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementTextLength",
					"Validation"
				]
			},
			"description": [
				"### Element Text Length LowerEqual Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that the visible text content of the element with the Id `content` is less than or equal to 255 characters.",
				"The length is determined solely from the visible text, excluding any HTML markup or tags.",
				"The assertion passes only if the computed length is less than or equal to 255."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:LowerEqual --Expected:255}}",
				"locator": "Id",
				"onElement": "content",
				"pluginName": "Assert"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect CssSelector usage",
						"Unexpected DOM structure",
						"Unexpected whitespace or formatting in the element text"
					],
					"expected_result": true,
					"notes": "Verifies that the visible text of the element with the CSS selector `#content` does not exceed 100 characters. The length is determined solely from the visible text, excluding any HTML markup or tags. A regular expression `(?s)^(?=.{0,100}$)(.*)$` is applied to capture the entire text only if its length is at most 100 characters; if the text exceeds 100 characters, no capture occurs and the assertion fails.",
					"test_case": "element_text_length_lower_equal_validation_css",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementTextLength",
					"Validation"
				]
			},
			"description": [
				"### Element Text Length LowerEqual Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the visible text of the element identified by the CSS selector `#content` is less than or equal to 100 characters.",
				"The length is based solely on the visible text, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(?=.{0,100}$)(.*)$` is applied to the visible text to capture the entire text only if its length is at most 100 characters; if the text exceeds 100 characters, the regex fails to match.",
				"The assertion passes only if the regex successfully captures text and the computed length is less than or equal to 100 characters."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:LowerEqual --Expected:100}}",
				"locator": "CssSelector",
				"onElement": "#content",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(?=.{0,100}$)(.*)$"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect XPath indexing or attribute usage",
						"Unexpected DOM structure",
						"Unexpected whitespace or formatting in the element text",
						"Xpath syntax errors"
					],
					"expected_result": true,
					"notes": "Verifies that the visible text of the element with the Xpath selector `//div[@id='content']` does not exceed 100 characters. The length is determined solely from the visible text, excluding any HTML markup or tags. A regular expression `(?s)^(?=.{0,100}$)(.*)$` is applied to capture the entire text only if its length is at most 100 characters; if the text exceeds 100 characters, no capture occurs and the assertion fails.",
					"test_case": "element_text_length_lower_equal_validation_xpath",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementTextLength",
					"Validation"
				]
			},
			"description": [
				"### Element Text Length LowerEqual Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the visible text of the element identified by the Xpath selector `//div[@id='content']` is less than or equal to 100 characters.",
				"The length is based solely on the visible text, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(?=.{0,100}$)(.*)$` is applied to the visible text to capture the entire text only if its length is at most 100 characters; if the text exceeds 100 characters, the regex fails to match.",
				"The assertion passes only if the regex successfully captures text and the computed length is less than or equal to 100 characters."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:LowerEqual --Expected:100}}",
				"locator": "Xpath",
				"onElement": "//div[@id='content']",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(?=.{0,100}$)(.*)$"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect Id usage",
						"Unexpected DOM structure",
						"Unexpected whitespace or formatting in the element text"
					],
					"expected_result": true,
					"notes": "Verifies that the visible text of the element with the Id `content` does not exceed 100 characters. The length is determined solely from the visible text, excluding any HTML markup or tags. A regular expression `(?s)^(?=.{0,100}$)(.*)$` is applied to capture the entire text only if its length is at most 100 characters; if the text exceeds 100 characters, no capture occurs and the assertion fails.",
					"test_case": "element_text_length_lower_equal_validation_id",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementTextLength",
					"Validation"
				]
			},
			"description": [
				"### Element Text Length LowerEqual Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that the visible text of the element with the Id `content` is less than or equal to 100 characters.",
				"The length is based solely on the visible text, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(?=.{0,100}$)(.*)$` is applied to the visible text to capture the entire text only if its length is at most 100 characters; if the text exceeds 100 characters, the regex fails to match.",
				"The assertion passes only if the regex successfully captures text and the computed length is less than or equal to 100 characters."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:LowerEqual --Expected:100}}",
				"locator": "Id",
				"onElement": "content",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(?=.{0,100}$)(.*)$"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect CssSelector usage",
						"Unexpected DOM structure",
						"Unexpected whitespace or formatting in the attribute value",
						"Visible text length exceeds expected"
					],
					"expected_result": true,
					"notes": "Verifies that the text length of the value attribute of the input element with the CSS selector `input#content` does not exceed 150 characters. The length is determined solely from the text from the `value` attribute, excluding any HTML markup or tags.",
					"test_case": "element_text_length_lower_equal_validation_css_input",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttributeCheck",
					"ElementTextLength",
					"InputField",
					"Validation",
					"ValueLength"
				]
			},
			"description": [
				"### Input Value Text Length LowerEqual Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the text length of the value attribute of an input element (of type text) identified by the CSS selector `input#content` is less than or equal to 150 characters.",
				"The length is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"The assertion passes only if the computed length is less than or equal to 150."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:LowerEqual --Expected:150}}",
				"locator": "CssSelector",
				"onAttribute": "value",
				"onElement": "input#content",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect XPath indexing or attribute usage",
						"Unexpected DOM structure",
						"Unexpected whitespace or formatting in the attribute value",
						"Xpath syntax errors",
						"Visible text length exceeds expected"
					],
					"expected_result": true,
					"notes": "Verifies that the text length of the value attribute of the input element with the Xpath selector `//input[@id='content']` does not exceed 150 characters. The length is determined solely from the text from the `value` attribute, excluding any HTML markup or tags.",
					"test_case": "element_text_length_lower_equal_validation_xpath_input",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttributeCheck",
					"ElementTextLength",
					"InputField",
					"Validation",
					"ValueLength"
				]
			},
			"description": [
				"### Input Value Text Length LowerEqual Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the text length of the value attribute of an input element (of type text) identified by the Xpath selector `//input[@id='content']` is less than or equal to 150 characters.",
				"The length is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"The assertion passes only if the computed length is less than or equal to 150."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:LowerEqual --Expected:150}}",
				"locator": "Xpath",
				"onAttribute": "value",
				"onElement": "//input[@id='content']",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect Id usage",
						"Unexpected DOM structure",
						"Unexpected whitespace or formatting in the attribute value",
						"Visible text length exceeds expected"
					],
					"expected_result": true,
					"notes": "Verifies that the text length of the value attribute of the input element with the Id `content` does not exceed 150 characters. The length is determined solely from the text from the `value` attribute, excluding any HTML markup or tags.",
					"test_case": "element_text_length_lower_equal_validation_id_input",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttributeCheck",
					"ElementTextLength",
					"InputField",
					"Validation",
					"ValueLength"
				]
			},
			"description": [
				"### Input Value Text Length LowerEqual Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that the text length of the value attribute of an input element (of type text) with the Id `content` is less than or equal to 150 characters.",
				"The length is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"The assertion passes only if the computed length is less than or equal to 150."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:LowerEqual --Expected:150}}",
				"locator": "Id",
				"onAttribute": "value",
				"onElement": "content",
				"pluginName": "Assert"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect CssSelector usage",
						"Unexpected DOM structure",
						"Unexpected whitespace or formatting in the attribute value"
					],
					"expected_result": true,
					"notes": "Verifies that the visible text of the textarea with the CSS selector `textarea#content` does not exceed 100 characters. The text length is determined solely from the text extracted from the value attribute, excluding any HTML markup or tags. The regular expression `(?s)^(.{0,100})` is applied to extract only the first 100 characters, ensuring that only this segment of text is evaluated.",
					"test_case": "element_text_length_lower_equal_validation_css_textarea",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttributeCheck",
					"ElementTextLength",
					"Textarea",
					"Validation",
					"ValueLength"
				]
			},
			"description": [
				"### Textarea Value Text Length LowerEqual Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the visible text of a textarea's value attribute, identified by the CSS selector `textarea#content`, is less than or equal to 100 characters.",
				"A regular expression `(?s)^(.{0,100})` is applied to the value attribute to extract only the first 100 characters, so that even if the full text is longer, only these 100 characters are evaluated.",
				"The assertion passes only if the computed length from this capture group is less than or equal to 100 characters; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:LowerEqual --Expected:100}}",
				"locator": "CssSelector",
				"onAttribute": "value",
				"onElement": "textarea#content",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,100})"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect XPath indexing or attribute usage",
						"Unexpected DOM structure",
						"Unexpected whitespace or formatting in the attribute value",
						"Xpath syntax errors"
					],
					"expected_result": true,
					"notes": "Verifies that the visible text of the textarea with the Xpath selector `//textarea[@id='content']` does not exceed 100 characters. The text length is computed solely from the text extracted from the value attribute, excluding any HTML markup or tags. A regular expression `(?s)^(.{0,100})` is applied to extract only the first 100 characters, ensuring that only that segment is evaluated.",
					"test_case": "element_text_length_lower_equal_validation_xpath_textarea",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttributeCheck",
					"ElementTextLength",
					"Textarea",
					"Validation",
					"ValueLength"
				]
			},
			"description": [
				"### Textarea Value Text Length LowerEqual Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the visible text of a textarea's value attribute, identified by the Xpath selector `//textarea[@id='content']`, is less than or equal to 100 characters.",
				"A regular expression `(?s)^(.{0,100})` is applied to the value attribute to extract only the first 100 characters, so that even if the full text is longer, only these 100 characters are evaluated.",
				"The assertion passes only if the computed length from this capture group is less than or equal to 100 characters; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:LowerEqual --Expected:100}}",
				"locator": "Xpath",
				"onAttribute": "value",
				"onElement": "//textarea[@id='content']",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,100})"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect Id usage",
						"Unexpected DOM structure",
						"Unexpected whitespace or formatting in the attribute value"
					],
					"expected_result": true,
					"notes": "Verifies that the visible text of the textarea with the Id `content` does not exceed 100 characters. The text length is determined solely from the text extracted from the value attribute, excluding any HTML markup or tags. A regular expression `(?s)^(.{0,100})` is applied to extract only the first 100 characters; the assertion passes only if the computed length is less than or equal to 100.",
					"test_case": "element_text_length_lower_equal_validation_id_textarea",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttributeCheck",
					"ElementTextLength",
					"Textarea",
					"Validation",
					"ValueLength"
				]
			},
			"description": [
				"### Textarea Value Text Length LowerEqual Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that the visible text of a textarea's value attribute, with the Id `content`, is less than or equal to 100 characters.",
				"A regular expression `(?s)^(.{0,100})` is applied to the value attribute to extract only the first 100 characters, so that even if the full text is longer, only these 100 characters are evaluated.",
				"The assertion passes only if the computed length from this capture group is less than or equal to 100 characters; if more than 100 characters are captured, the assertion fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:LowerEqual --Expected:100}}",
				"locator": "Id",
				"onAttribute": "value",
				"onElement": "content",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,100})"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect CssSelector usage",
						"Unexpected DOM structure",
						"Visible text length is greater than or equal to expected"
					],
					"expected_result": true,
					"notes": "Verifies that the visible text of the element with the CSS selector `#content` is less than 255 characters. The length is determined solely from the visible text, excluding any HTML markup or tags.",
					"test_case": "element_text_length_lower_validation_css",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementTextLength",
					"Validation"
				]
			},
			"description": [
				"### Element Text Length Lower Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the visible text of the element identified by the CSS selector `#content` is less than 255 characters.",
				"The length is computed from the visible text only, excluding any HTML markup or tags.",
				"The assertion passes only if the computed length is less than 255; if it is greater than or equal to 255, the assertion fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:Lower --Expected:255}}",
				"locator": "CssSelector",
				"onElement": "#content",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect XPath indexing or attribute usage",
						"Unexpected DOM structure",
						"Xpath syntax errors",
						"Visible text length is greater than or equal to expected"
					],
					"expected_result": true,
					"notes": "Verifies that the visible text of the element with the Xpath selector `//div[@id='content']` is less than 255 characters. The length is determined solely from the visible text, excluding any HTML markup or tags.",
					"test_case": "element_text_length_lower_validation_xpath",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementTextLength",
					"Validation"
				]
			},
			"description": [
				"### Element Text Length Lower Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the visible text of the element identified by the Xpath selector `//div[@id='content']` is less than 255 characters.",
				"The length is computed from the visible text only, excluding any HTML markup or tags.",
				"The assertion passes only if the computed length is less than 255; if it is greater than or equal to 255, the assertion fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:Lower --Expected:255}}",
				"locator": "Xpath",
				"onElement": "//div[@id='content']",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect Id usage",
						"Unexpected DOM structure",
						"Visible text length is greater than or equal to expected"
					],
					"expected_result": true,
					"notes": "Verifies that the visible text of the element with the Id `content` is less than 255 characters. The length is determined solely from the visible text, excluding any HTML markup or tags.",
					"test_case": "element_text_length_lower_validation_id",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementTextLength",
					"Validation"
				]
			},
			"description": [
				"### Element Text Length Lower Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that the visible text of the element with the Id `content` is less than 255 characters.",
				"The length is computed from the visible text only, excluding any HTML markup or tags.",
				"The assertion passes only if the computed length is less than 255; if it is greater than or equal to 255, the assertion fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:Lower --Expected:255}}",
				"locator": "Id",
				"onElement": "content",
				"pluginName": "Assert"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect CssSelector usage",
						"Unexpected DOM structure",
						"Unexpected whitespace or formatting in the element text"
					],
					"expected_result": true,
					"notes": "Verifies that the visible text of the element with the CSS selector `#content` is less than 100 characters. The length is computed solely from the visible text, excluding any HTML markup or tags. A regular expression `(?s)^(.{0,100})` is applied to extract up to 100 characters, and the assertion passes only if the computed length is less than 100.",
					"test_case": "element_text_length_lower_validation_css",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementTextLength",
					"Validation"
				]
			},
			"description": [
				"### Element Text Length Lower Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the visible text of the element identified by the CSS selector `#content` is less than 100 characters.",
				"The length is determined solely from the visible text, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(.{0,100})` is applied to the visible text to extract up to 100 characters into a capture group.",
				"The assertion passes only if the computed length is less than 100; if 100 or more characters are captured, the assertion fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:Lower --Expected:100}}",
				"locator": "CssSelector",
				"onElement": "#content",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,100})"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect XPath indexing or attribute usage",
						"Unexpected DOM structure",
						"Unexpected whitespace or formatting in the element text",
						"Xpath syntax errors"
					],
					"expected_result": true,
					"notes": "Verifies that the visible text of the element with the Xpath selector `//div[@id='content']` is less than 100 characters. The length is computed solely from the visible text, excluding any HTML markup or tags. A regular expression `(?s)^(.{0,100})` is applied to extract up to 100 characters, and the assertion passes only if the computed length is less than 100.",
					"test_case": "element_text_length_lower_validation_xpath",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementTextLength",
					"Validation"
				]
			},
			"description": [
				"### Element Text Length Lower Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the visible text of the element identified by the Xpath selector `//div[@id='content']` is less than 100 characters.",
				"The length is determined solely from the visible text, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(.{0,100})` is applied to the visible text to extract up to 100 characters into a capture group.",
				"The assertion passes only if the computed length is less than 100; if 100 or more characters are captured, the assertion fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:Lower --Expected:100}}",
				"locator": "Xpath",
				"onElement": "//div[@id='content']",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,100})"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect Id usage",
						"Unexpected DOM structure",
						"Unexpected whitespace or formatting in the element text"
					],
					"expected_result": true,
					"notes": "Verifies that the visible text of the element with the Id `content` is less than 100 characters. The length is computed solely from the visible text, excluding any HTML markup or tags. A regular expression `(?s)^(.{0,100})` is applied to extract up to 100 characters, and the assertion passes only if the computed length is less than 100.",
					"test_case": "element_text_length_lower_validation_id",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementTextLength",
					"Validation"
				]
			},
			"description": [
				"### Element Text Length Lower Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that the visible text of the element with the Id `content` is less than 100 characters.",
				"The length is determined solely from the visible text, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(.{0,100})` is applied to the visible text to extract up to 100 characters into a capture group.",
				"The assertion passes only if the computed length is less than 100; if 100 or more characters are captured, the assertion fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:Lower --Expected:100}}",
				"locator": "Id",
				"onElement": "content",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,100})"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect CssSelector usage",
						"Unexpected DOM structure",
						"Unexpected whitespace or formatting in the attribute value",
						"Visible text length is greater than or equal to expected"
					],
					"expected_result": true,
					"notes": "Verifies that the text length of the value attribute of the textarea with the CSS selector `textarea#content` is less than 150 characters. The length is determined solely from the text from the `value` attribute, excluding any HTML markup or tags.",
					"test_case": "element_text_length_lower_validation_css_textarea",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttributeCheck",
					"ElementTextLength",
					"Textarea",
					"Validation",
					"ValueLength"
				]
			},
			"description": [
				"### Textarea Value Text Length Lower Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the text length of the value attribute of a textarea element identified by the CSS selector `textarea#content` is less than 150 characters.",
				"The length is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"The assertion passes only if the computed length is less than 150; if 150 or more characters are captured, the assertion fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:Lower --Expected:150}}",
				"locator": "CssSelector",
				"onAttribute": "value",
				"onElement": "textarea#content",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect XPath indexing or attribute usage",
						"Unexpected DOM structure",
						"Unexpected whitespace or formatting in the attribute value",
						"Xpath syntax errors"
					],
					"expected_result": true,
					"notes": "Verifies that the text length of the value attribute of the textarea with the Xpath selector `//textarea[@id='content']` is less than 150 characters. The length is determined solely from the text from the `value` attribute, excluding any HTML markup or tags.",
					"test_case": "element_text_length_lower_validation_xpath_textarea",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttributeCheck",
					"ElementTextLength",
					"Textarea",
					"Validation",
					"ValueLength"
				]
			},
			"description": [
				"### Textarea Value Text Length Lower Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the text length of the value attribute of a textarea element identified by the Xpath selector `//textarea[@id='content']` is less than 150 characters.",
				"The length is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"The assertion passes only if the computed length is less than 150; if 150 or more characters are captured, the assertion fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:Lower --Expected:150}}",
				"locator": "Xpath",
				"onAttribute": "value",
				"onElement": "//textarea[@id='content']",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect Id usage",
						"Unexpected DOM structure",
						"Unexpected whitespace or formatting in the attribute value"
					],
					"expected_result": true,
					"notes": "Verifies that the text length of the value attribute of the textarea with the Id `content` is less than 150 characters. The length is determined solely from the text from the `value` attribute, excluding any HTML markup or tags.",
					"test_case": "element_text_length_lower_validation_id_textarea",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttributeCheck",
					"ElementTextLength",
					"Textarea",
					"Validation",
					"ValueLength"
				]
			},
			"description": [
				"### Textarea Value Text Length Lower Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that the text length of the value attribute of a textarea with the Id `content` is less than 150 characters.",
				"The length is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"The assertion passes only if the computed length is less than 150; if 150 or more characters are captured, the assertion fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:Lower --Expected:150}}",
				"locator": "Id",
				"onAttribute": "value",
				"onElement": "content",
				"pluginName": "Assert"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect CssSelector usage",
						"Unexpected DOM structure",
						"Unexpected whitespace or formatting in the attribute value",
						"Visible text length equals or exceeds expected"
					],
					"expected_result": true,
					"notes": "Verifies that the text from the `value` attribute of the input element with the CSS selector `input#content` is less than 100 characters. The text length is determined solely from the attribute value, excluding any HTML markup or tags. A regular expression `(?s)^(.{0,100})` extracts up to 100 characters into a capture group; the assertion passes only if the computed length is less than 100.",
					"test_case": "element_text_length_lower_validation_css_input",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttributeCheck",
					"ElementTextLength",
					"InputField",
					"Validation",
					"ValueLength"
				]
			},
			"description": [
				"### Input Value Text Length Lower Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the text from the `value` attribute of an input element identified by the CSS selector `input#content` is less than 100 characters.",
				"The length is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(.{0,100})` is applied to the `value` attribute to extract up to 100 characters into a capture group.",
				"The assertion passes only if the computed length is less than 100; if 100 or more characters are captured, the assertion fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:Lower --Expected:100}}",
				"locator": "CssSelector",
				"onAttribute": "value",
				"onElement": "input#content",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,100})"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect XPath indexing or attribute usage",
						"Unexpected DOM structure",
						"Unexpected whitespace or formatting in the attribute value",
						"Xpath syntax errors"
					],
					"expected_result": true,
					"notes": "Verifies that the text from the `value` attribute of the input element with the Xpath selector `//input[@id='content']` is less than 100 characters. The text length is determined solely from the attribute value, excluding any HTML markup or tags. A regular expression `(?s)^(.{0,100})` extracts up to 100 characters into a capture group; the assertion passes only if the computed length is less than 100.",
					"test_case": "element_text_length_lower_validation_xpath_input",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttributeCheck",
					"ElementTextLength",
					"InputField",
					"Validation",
					"ValueLength"
				]
			},
			"description": [
				"### Input Value Text Length Lower Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the text from the `value` attribute of an input element identified by the Xpath selector `//input[@id='content']` is less than 100 characters.",
				"The length is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(.{0,100})` is applied to the `value` attribute to extract up to 100 characters into a capture group.",
				"The assertion passes only if the computed length is less than 100; if 100 or more characters are captured, the assertion fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:Lower --Expected:100}}",
				"locator": "Xpath",
				"onAttribute": "value",
				"onElement": "//input[@id='content']",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,100})"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect Id usage",
						"Unexpected DOM structure",
						"Unexpected whitespace or formatting in the attribute value"
					],
					"expected_result": true,
					"notes": "Verifies that the text from the `value` attribute of the input element with the Id `content` is less than 100 characters. The text length is determined solely from the attribute value, excluding any HTML markup or tags. A regular expression `(?s)^(.{0,100})` extracts up to 100 characters into a capture group; the assertion passes only if the computed length is less than 100.",
					"test_case": "element_text_length_lower_validation_id_input",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttributeCheck",
					"ElementTextLength",
					"InputField",
					"Validation",
					"ValueLength"
				]
			},
			"description": [
				"### Input Value Text Length Lower Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that the text from the `value` attribute of an input element with the Id `content` is less than 100 characters.",
				"The length is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(.{0,100})` is applied to the `value` attribute to extract up to 100 characters into a capture group.",
				"The assertion passes only if the computed length is less than 100; if 100 or more characters are captured, the assertion fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:Lower --Expected:100}}",
				"locator": "Id",
				"onAttribute": "value",
				"onElement": "content",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,100})"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect CssSelector usage",
						"Unexpected DOM structure",
						"Unexpected whitespace or formatting in the element text"
					],
					"expected_result": true,
					"notes": "Verifies that the visible text of the element with the CSS selector `#content` has a length that matches the pattern `^2\\d+$`. The length is determined solely from the visible text, excluding HTML markup or tags. The regular expression is applied to the computed length (as a string) and must match the expected pattern for the assertion to pass.",
					"test_case": "element_text_length_match_validation_css",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementTextLength",
					"Validation"
				]
			},
			"description": [
				"### Element Text Length Match Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the visible text of the element identified by the CSS selector `#content` has a length that matches the regular expression pattern `^2\\d+$`.",
				"The length is computed from the visible text only, excluding any HTML markup or tags.",
				"The regular expression is used to validate that the computed length (converted to a string) begins with the digit 2 and is followed by one or more digits.",
				"The assertion passes only if the computed length exactly matches this pattern."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:Match --Expected:^2\\d+$}}",
				"locator": "CssSelector",
				"onElement": "#content",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect XPath indexing or attribute usage",
						"Unexpected DOM structure",
						"Unexpected whitespace or formatting in the element text",
						"Xpath syntax errors"
					],
					"expected_result": true,
					"notes": "Verifies that the visible text of the element with the Xpath selector `//div[@id='content']` has a length that matches the pattern `^2\\d+$`. The length is determined solely from the visible text, excluding HTML markup or tags. The regular expression is applied to the computed length (as a string) and must match the expected pattern for the assertion to pass.",
					"test_case": "element_text_length_match_validation_xpath",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementTextLength",
					"Validation"
				]
			},
			"description": [
				"### Element Text Length Match Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the visible text of the element identified by the Xpath selector `//div[@id='content']` has a length that matches the regular expression pattern `^2\\d+$`.",
				"The length is computed from the visible text only, excluding any HTML markup or tags.",
				"The regular expression is used to validate that the computed length (as a string) begins with the digit 2 and is followed by one or more digits.",
				"The assertion passes only if the computed length exactly matches this pattern."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:Match --Expected:^2\\d+$}}",
				"locator": "Xpath",
				"onElement": "//div[@id='content']",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect Id usage",
						"Unexpected DOM structure",
						"Unexpected whitespace or formatting in the element text"
					],
					"expected_result": true,
					"notes": "Verifies that the visible text of the element with the Id `content` has a length that matches the pattern `^2\\d+$`. The length is determined solely from the visible text, excluding HTML markup or tags. The regular expression is applied to the computed length (as a string) and must match the expected pattern for the assertion to pass.",
					"test_case": "element_text_length_match_validation_id",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementTextLength",
					"Validation"
				]
			},
			"description": [
				"### Element Text Length Match Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that the visible text of the element with the Id `content` has a length that matches the regular expression pattern `^2\\d+$`.",
				"The length is computed from the visible text only, excluding any HTML markup or tags.",
				"The regular expression is used to confirm that the computed length (converted to a string) starts with the digit 2 followed by one or more digits.",
				"The assertion passes only if the computed length exactly matches this pattern."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:Match --Expected:^2\\d+$}}",
				"locator": "Id",
				"onElement": "content",
				"pluginName": "Assert"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect CssSelector usage",
						"Unexpected DOM structure",
						"Unexpected whitespace or formatting in the attribute value"
					],
					"expected_result": false,
					"notes": "Verifies that the computed length of the text from the value attribute of the input element with the CSS selector `input#content` matches the pattern `^15\\d+$`. Since the extraction regex `(?s)^(.{0,100})` limits the capture to at most 100 characters, the expected pattern cannot be met. Note: This test case is designed to fail because the computed length will never begin with '15'.",
					"test_case": "element_text_length_match_failure_validation_css_input",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttributeCheck",
					"ElementTextLength",
					"InputField",
					"Validation",
					"ValueLength"
				]
			},
			"description": [
				"### Input Value Text Length Match Validation (Failure Expected) Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed length of the text from the value attribute of an input element, identified by the CSS selector `input#content`, matches the pattern `^15\\d+$`.",
				"The length is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(.{0,100})` is applied to the `value` attribute to extract up to 100 characters into a capture group.",
				"Because the regex limits the extraction to 100 characters, the computed length will never begin with '15', and therefore the assertion is expected to fail."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:Match --Expected:^15\\d+$}}",
				"locator": "CssSelector",
				"onAttribute": "value",
				"onElement": "input#content",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,100})"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect XPath indexing or attribute usage",
						"Unexpected DOM structure",
						"Unexpected whitespace or formatting in the attribute value",
						"Xpath syntax errors"
					],
					"expected_result": false,
					"notes": "Verifies that the computed length of the text from the value attribute of the input element with the Xpath selector `//input[@id='content']` matches the pattern `^15\\d+$`. Since the regular expression `(?s)^(.{0,100})` limits extraction to 100 characters, the expected pattern cannot be fulfilled. Note: This test case is intended to fail because the computed length will never begin with '15'.",
					"test_case": "element_text_length_match_failure_validation_xpath_input",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttributeCheck",
					"ElementTextLength",
					"InputField",
					"Validation",
					"ValueLength"
				]
			},
			"description": [
				"### Input Value Text Length Match Validation (Failure Expected) Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed length of the text from the value attribute of an input element, identified by the Xpath selector `//input[@id='content']`, matches the pattern `^15\\d+$`.",
				"The length is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(.{0,100})` is applied to the `value` attribute to extract up to 100 characters into a capture group.",
				"Because the regex restricts the capture to 100 characters, the computed length will never meet the expected pattern, and the assertion is designed to fail."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:Match --Expected:^15\\d+$}}",
				"locator": "Xpath",
				"onAttribute": "value",
				"onElement": "//input[@id='content']",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,100})"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect Id usage",
						"Unexpected DOM structure",
						"Unexpected whitespace or formatting in the attribute value"
					],
					"expected_result": false,
					"notes": "Verifies that the computed length of the text from the value attribute of the input element with the Id `content` matches the pattern `^15\\d+$`. The regular expression `(?s)^(.{0,100})` limits extraction to at most 100 characters, making it impossible to meet the expected pattern. Note: This test case is designed to fail because the computed length will never begin with '15'.",
					"test_case": "element_text_length_match_failure_validation_id",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttributeCheck",
					"ElementTextLength",
					"InputField",
					"Validation",
					"ValueLength"
				]
			},
			"description": [
				"### Element Text Length Match Validation (Failure Expected) Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed length of the text from the value attribute of an input element with the Id `content` matches the pattern `^15\\d+$`.",
				"The length is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(.{0,100})` is applied to the `value` attribute to extract up to 100 characters into a capture group.",
				"Given that the extraction is capped at 100 characters, the computed length will never fulfill the pattern, causing the assertion to fail."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:Match --Expected:^15\\d+$}}",
				"locator": "Id",
				"onAttribute": "value",
				"onElement": "content",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,100})"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Computed length does not match expected pattern",
						"Element not found",
						"Incorrect CssSelector usage",
						"Unexpected DOM structure",
						"Unexpected whitespace or formatting in the attribute value"
					],
					"expected_result": true,
					"notes": "Verifies that the computed length of the text from the value attribute of the input element with the CSS selector `input#content` matches the expected pattern `^15\\d+$`. In other words, when converted to a string, the length must start with '15' (e.g., '150', '151').",
					"test_case": "element_text_length_match_validation_css_input",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttributeCheck",
					"ElementTextLength",
					"InputField",
					"Validation",
					"ValueLength"
				]
			},
			"description": [
				"### Input Value Text Length Match Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed length of the text from the value attribute of an input element (of type text) identified by the CSS selector `input#content` matches the pattern `^15\\d+$`.",
				"The length is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"The expected outcome is that the computed length, when converted to a string, will begin with '15' (for example, '150', '151', etc.).",
				"The assertion passes only if the computed length meets this pattern."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:Match --Expected:^15\\d+$}}",
				"locator": "CssSelector",
				"onAttribute": "value",
				"onElement": "input#content",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Computed length does not match expected pattern",
						"Element not found",
						"Incorrect XPath indexing or attribute usage",
						"Unexpected DOM structure",
						"Unexpected whitespace or formatting in the attribute value",
						"Xpath syntax errors"
					],
					"expected_result": true,
					"notes": "Verifies that the computed length of the text from the value attribute of the input element with the Xpath selector `//input[@id='content']` matches the expected pattern `^15\\d+$`. In other words, when converted to a string, the length must begin with '15' (e.g., '150', '151').",
					"test_case": "element_text_length_match_validation_xpath_input",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttributeCheck",
					"ElementTextLength",
					"InputField",
					"Validation",
					"ValueLength"
				]
			},
			"description": [
				"### Input Value Text Length Match Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed length of the text from the value attribute of an input element (of type text) identified by the Xpath selector `//input[@id='content']` matches the pattern `^15\\d+$`.",
				"The length is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"The expected outcome is that the computed length, when converted to a string, will start with '15' (for example, '150', '151', etc.).",
				"The assertion passes only if the computed length meets this pattern."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:Match --Expected:^15\\d+$}}",
				"locator": "Xpath",
				"onAttribute": "value",
				"onElement": "//input[@id='content']",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Computed length does not match expected pattern",
						"Element not found",
						"Incorrect Id usage",
						"Unexpected DOM structure",
						"Unexpected whitespace or formatting in the attribute value"
					],
					"expected_result": true,
					"notes": "Verifies that the computed length of the text from the value attribute of the input element with the Id `content` matches the expected pattern `^15\\d+$`. In other words, when converted to a string, the length must begin with '15' (e.g., '150', '151').",
					"test_case": "element_text_length_match_validation_id",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttributeCheck",
					"ElementTextLength",
					"InputField",
					"Validation",
					"ValueLength"
				]
			},
			"description": [
				"### Element Text Length Match Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed length of the text from the value attribute of an input element with the Id `content` matches the pattern `^15\\d+$`.",
				"The length is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"The expected outcome is that the computed length, when converted to a string, will start with '15' (for example, '150', '151', etc.).",
				"The assertion passes only if the computed length meets this pattern."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:Match --Expected:^15\\d+$}}",
				"locator": "Id",
				"onAttribute": "value",
				"onElement": "content",
				"pluginName": "Assert"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect CssSelector usage",
						"Unexpected DOM structure",
						"Unexpected whitespace or formatting in the attribute value"
					],
					"expected_result": true,
					"notes": "Verifies that the computed length of the text from the value attribute of the input element with the CSS selector `input#content`, when converted to a string, matches the pattern `^1\\d+$`. The regular expression `(?s)^(.{0,100})` is used to extract up to 100 characters from the attribute, and the test passes only if the resulting length meets the expected pattern.",
					"test_case": "element_text_length_match_validation_css_input",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttributeCheck",
					"ElementTextLength",
					"InputField",
					"Validation",
					"ValueLength"
				]
			},
			"description": [
				"### Input Value Text Length Match Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed length of the text from the value attribute of an input element, identified by the CSS selector `input#content`, matches the expected pattern `^1\\d+$`.",
				"The length is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(.{0,100})` is applied to the `value` attribute to extract up to 100 characters into a capture group. The computed length, when converted to a string, must match the pattern `^1\\d+$` (for example, '10', '11', '150', etc.).",
				"The assertion passes only if the computed length matches this pattern."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:Match --Expected:^1\\d+$}}",
				"locator": "CssSelector",
				"onAttribute": "value",
				"onElement": "input#content",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,100})"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect XPath indexing or attribute usage",
						"Unexpected DOM structure",
						"Unexpected whitespace or formatting in the attribute value",
						"Xpath syntax errors"
					],
					"expected_result": true,
					"notes": "Verifies that the computed length of the text from the value attribute of the input element with the Xpath selector `//input[@id='content']`, when converted to a string, matches the pattern `^1\\d+$`. The regular expression `(?s)^(.{0,100})` extracts up to 100 characters from the attribute, and the assertion passes only if the resulting length meets the expected pattern.",
					"test_case": "element_text_length_match_validation_xpath_input",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttributeCheck",
					"ElementTextLength",
					"InputField",
					"Validation",
					"ValueLength"
				]
			},
			"description": [
				"### Input Value Text Length Match Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed length of the text from the value attribute of an input element, identified by the Xpath selector `//input[@id='content']`, matches the expected pattern `^1\\d+$`.",
				"The length is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(.{0,100})` is applied to the `value` attribute to extract up to 100 characters into a capture group. The computed length, when converted to a string, must match the pattern `^1\\d+$` (for example, '10', '11', '150', etc.).",
				"The assertion passes only if the computed length matches this pattern."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:Match --Expected:^1\\d+$}}",
				"locator": "Xpath",
				"onAttribute": "value",
				"onElement": "//input[@id='content']",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,100})"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect Id usage",
						"Unexpected DOM structure",
						"Unexpected whitespace or formatting in the attribute value"
					],
					"expected_result": true,
					"notes": "Verifies that the computed length of the text from the value attribute of the input element with the Id `content`, when converted to a string, matches the expected pattern `^1\\d+$`. A regular expression `(?s)^(.{0,100})` is applied to extract up to 100 characters from the attribute, and the assertion passes only if the resulting length meets the expected pattern.",
					"test_case": "element_text_length_match_validation_id",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttributeCheck",
					"ElementTextLength",
					"InputField",
					"Validation",
					"ValueLength"
				]
			},
			"description": [
				"### Element Text Length Match Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed length of the text from the value attribute of an input element with the Id `content` matches the expected pattern `^1\\d+$`.",
				"The length is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(.{0,100})` is applied to the `value` attribute to extract up to 100 characters into a capture group. The computed length, when converted to a string, must match the pattern `^1\\d+$` (for example, '10', '11', '150', etc.).",
				"The assertion passes only if the computed length matches this pattern."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:Match --Expected:^1\\d+$}}",
				"locator": "Id",
				"onAttribute": "value",
				"onElement": "content",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,100})"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect CssSelector usage",
						"Unexpected DOM structure",
						"Unexpected whitespace or formatting in the element text"
					],
					"expected_result": true,
					"notes": "Verifies that the computed length of the visible text of the element with the CSS selector `#content`, when converted to a string, does not match the pattern `^2\\d+$`. In other words, the length should not start with the digit '2'.",
					"test_case": "element_text_length_not_match_validation_css",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementTextLength",
					"Validation"
				]
			},
			"description": [
				"### Element Text Length NotMatch Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed length of the visible text of the element identified by the CSS selector `#content` does not match the pattern `^2\\d+$`.",
				"The length is determined solely from the visible text, excluding any HTML markup or tags.",
				"The assertion passes only if the computed length, when converted to a string, does not begin with the digit '2'."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:NotMatch --Expected:^2\\d+$}}",
				"locator": "CssSelector",
				"onElement": "#content",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect XPath indexing or attribute usage",
						"Unexpected DOM structure",
						"Unexpected whitespace or formatting in the element text",
						"Xpath syntax errors"
					],
					"expected_result": true,
					"notes": "Verifies that the computed length of the visible text of the element with the Xpath selector `//div[@id='content']`, when converted to a string, does not match the pattern `^2\\d+$`. In other words, the length should not start with the digit '2'.",
					"test_case": "element_text_length_not_match_validation_xpath",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementTextLength",
					"Validation"
				]
			},
			"description": [
				"### Element Text Length NotMatch Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed length of the visible text of the element identified by the Xpath selector `//div[@id='content']` does not match the pattern `^2\\d+$`.",
				"The length is determined solely from the visible text, excluding any HTML markup or tags.",
				"The assertion passes only if the computed length, when converted to a string, does not begin with the digit '2'."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:NotMatch --Expected:^2\\d+$}}",
				"locator": "Xpath",
				"onElement": "//div[@id='content']",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect Id usage",
						"Unexpected DOM structure",
						"Unexpected whitespace or formatting in the element text"
					],
					"expected_result": true,
					"notes": "Verifies that the computed length of the visible text of the element with the Id `content`, when converted to a string, does not match the pattern `^2\\d+$`. In other words, the length should not start with the digit '2'.",
					"test_case": "element_text_length_not_match_validation_id",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementTextLength",
					"Validation"
				]
			},
			"description": [
				"### Element Text Length NotMatch Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed length of the visible text of the element with the Id `content` does not match the pattern `^2\\d+$`.",
				"The length is determined solely from the visible text, excluding any HTML markup or tags.",
				"The assertion passes only if the computed length, when converted to a string, does not begin with the digit '2'."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:NotMatch --Expected:^2\\d+$}}",
				"locator": "Id",
				"onElement": "content",
				"pluginName": "Assert"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect CssSelector usage",
						"Unexpected DOM structure",
						"Unexpected whitespace or formatting in the attribute value"
					],
					"expected_result": true,
					"notes": "Verifies that the computed length of the text from the value attribute of the input element with the CSS selector `input#content`, when converted to a string, does not match the expected pattern `^15\\d+$`. The length is determined solely from the text from the `value` attribute, excluding any HTML markup or tags. A regular expression `(?s)^(.{0,100})` is applied to extract up to 100 characters into a capture group.",
					"test_case": "element_text_length_not_match_validation_css_input",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttributeCheck",
					"ElementTextLength",
					"InputField",
					"Validation",
					"ValueLength"
				]
			},
			"description": [
				"### Input Value Text Length NotMatch Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed length of the text from the value attribute of an input element identified by the CSS selector `input#content` does not match the expected pattern `^15\\d+$`.",
				"The length is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(.{0,100})` is applied to the value attribute to extract up to 100 characters into a capture group.",
				"The assertion passes only if the computed length, when converted to a string, does not match the pattern `^15\\d+$`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:NotMatch --Expected:^15\\d+$}}",
				"locator": "CssSelector",
				"onAttribute": "value",
				"onElement": "input#content",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,100})"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect XPath indexing or attribute usage",
						"Unexpected DOM structure",
						"Unexpected whitespace or formatting in the attribute value",
						"Xpath syntax errors"
					],
					"expected_result": true,
					"notes": "Verifies that the computed length of the text from the value attribute of the input element with the Xpath selector `//input[@id='content']`, when converted to a string, does not match the expected pattern `^15\\d+$`. The length is determined solely from the text from the `value` attribute, excluding any HTML markup or tags. A regular expression `(?s)^(.{0,100})` is applied to extract up to 100 characters into a capture group.",
					"test_case": "element_text_length_not_match_validation_xpath_input",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttributeCheck",
					"ElementTextLength",
					"InputField",
					"Validation",
					"ValueLength"
				]
			},
			"description": [
				"### Input Value Text Length NotMatch Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed length of the text from the value attribute of an input element identified by the Xpath selector `//input[@id='content']` does not match the expected pattern `^15\\d+$`.",
				"The length is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(.{0,100})` is applied to the value attribute to extract up to 100 characters into a capture group.",
				"The assertion passes only if the computed length, when converted to a string, does not match the pattern `^15\\d+$`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:NotMatch --Expected:^15\\d+$}}",
				"locator": "Xpath",
				"onAttribute": "value",
				"onElement": "//input[@id='content']",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,100})"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect Id usage",
						"Unexpected DOM structure",
						"Unexpected whitespace or formatting in the attribute value"
					],
					"expected_result": true,
					"notes": "Verifies that the computed length of the text from the value attribute of the input element with the Id `content`, when converted to a string, does not match the expected pattern `^15\\d+$`. The length is determined solely from the text from the `value` attribute, excluding any HTML markup or tags. A regular expression `(?s)^(.{0,100})` is applied to extract up to 100 characters into a capture group.",
					"test_case": "element_text_length_not_match_validation_id",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttributeCheck",
					"ElementTextLength",
					"InputField",
					"Validation",
					"ValueLength"
				]
			},
			"description": [
				"### Element Text Length NotMatch Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed length of the text from the value attribute of an input element with the Id `content` does not match the expected pattern `^15\\d+$`.",
				"The length is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(.{0,100})` is applied to the value attribute to extract up to 100 characters into a capture group.",
				"The assertion passes only if the computed length, when converted to a string, does not match the pattern `^15\\d+$`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:NotMatch --Expected:^15\\d+$}}",
				"locator": "Id",
				"onAttribute": "value",
				"onElement": "content",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,100})"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect CSS selector usage",
						"Regex match occurs when it shouldn't",
						"Unexpected DOM structure"
					],
					"expected_result": "The assertion passes if the text from the value attribute does not match the regular expression `^15\\d+$`; it fails if it does match exactly.",
					"notes": "Validation is based solely on text from the value attribute. The regular expression is applied to extract up to 100 characters, and the assertion checks that the resulting computed length does not match the expected pattern.",
					"test_case": "element_attribute_text_length_not_match_validation_css",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttributeCheck",
					"ElementTextLength",
					"RegexValidation",
					"Validation"
				]
			},
			"description": [
				"### Element Text Length NotMatch Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed length of the text from the value attribute of a textarea element with the CssSelector `textarea#content` does not match the expected pattern `^15\\d+$`.",
				"The length is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(.{0,100})` is applied to the value attribute to extract up to 100 characters into a capture group.",
				"The assertion passes only if the computed length, when converted to a string, does not match the pattern `^15\\d+$`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:NotMatch --Expected:^15\\d+$}}",
				"locator": "CssSelector",
				"onAttribute": "value",
				"onElement": "textarea#content",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect XPath indexing or attribute usage",
						"Regex match occurs when it shouldn't",
						"Unexpected DOM structure"
					],
					"expected_result": "The assertion passes if the text from the value attribute does not match the regular expression `^15\\d+$`; it fails if it does match exactly.",
					"notes": "Validation is based solely on text from the value attribute. The regular expression is used to extract up to 100 characters, ensuring that the computed length does not conform to the prohibited pattern.",
					"test_case": "element_attribute_text_length_not_match_validation_xpath",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttributeCheck",
					"ElementTextLength",
					"RegexValidation",
					"Validation"
				]
			},
			"description": [
				"### Element Text Length NotMatch Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed length of the text from the value attribute of a textarea element with the XPath locator `//textarea[@id='content']` does not match the expected pattern `^15\\d+$`.",
				"The length is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(.{0,100})` is applied to the value attribute to extract up to 100 characters into a capture group.",
				"The assertion passes only if the computed length, when converted to a string, does not match the pattern `^15\\d+$`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:NotMatch --Expected:^15\\d+$}}",
				"locator": "Xpath",
				"onAttribute": "value",
				"onElement": "//textarea[@id='content']",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect Id usage",
						"Regex match occurs when it shouldn't",
						"Unexpected DOM structure"
					],
					"expected_result": "The assertion passes if the text from the value attribute does not match the regular expression `^15\\d+$`; it fails if it does match exactly.",
					"notes": "Validation is based solely on text from the value attribute. The regular expression extracts up to 100 characters, and the computed length is checked against the prohibited pattern.",
					"test_case": "element_attribute_text_length_not_match_validation_id",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttributeCheck",
					"ElementTextLength",
					"RegexValidation",
					"Validation"
				]
			},
			"description": [
				"### Element Text Length NotMatch Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed length of the text from the value attribute of a textarea element with the Id `content` does not match the expected pattern `^15\\d+$`.",
				"The length is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(.{0,100})` is applied to the value attribute to extract up to 100 characters into a capture group.",
				"The assertion passes only if the computed length, when converted to a string, does not match the pattern `^15\\d+$`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:NotMatch --Expected:^15\\d+$}}",
				"locator": "Id",
				"onAttribute": "value",
				"onElement": "content",
				"pluginName": "Assert"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect CSS selector usage",
						"Regex match occurs when it shouldn't",
						"Unexpected DOM structure",
						"Unexpected whitespace or formatting in the attribute value"
					],
					"expected_result": "The assertion passes if the text from the value attribute does not match the regular expression `^1\\d+$`; it fails if it matches exactly.",
					"notes": "Validation is based solely on the text from the value attribute. The regular expression is applied to extract up to 100 characters, and the computed length is then compared to the prohibited pattern.",
					"test_case": "element_attribute_text_length_not_match_validation_css",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttributeCheck",
					"ElementTextLength",
					"RegexValidation",
					"Validation"
				]
			},
			"description": [
				"### Element Text Length NotMatch Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed length of the text from the value attribute of an input element with the CssSelector `input#content` does not match the expected pattern `^1\\d+$`.",
				"The length is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(.{0,100})` is applied to the value attribute to extract up to 100 characters into a capture group.",
				"The assertion passes only if the computed length, when converted to a string, does not match the pattern `^1\\d+$`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:NotMatch --Expected:^1\\d+$}}",
				"locator": "CssSelector",
				"onAttribute": "value",
				"onElement": "input#content",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,100})"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect XPath indexing or attribute usage",
						"Regex match occurs when it shouldn't",
						"Unexpected DOM structure",
						"Unexpected whitespace or formatting in the attribute value"
					],
					"expected_result": "The assertion passes if the text from the value attribute does not match the regular expression `^1\\d+$`; it fails if it matches exactly.",
					"notes": "Validation is based solely on the text from the value attribute. The regular expression is used to extract up to 100 characters, ensuring that the computed length does not conform to the prohibited pattern.",
					"test_case": "element_attribute_text_length_not_match_validation_xpath",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttributeCheck",
					"ElementTextLength",
					"RegexValidation",
					"Validation"
				]
			},
			"description": [
				"### Element Text Length NotMatch Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed length of the text from the value attribute of an input element with the XPath locator `//input[@id='content']` does not match the expected pattern `^1\\d+$`.",
				"The length is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(.{0,100})` is applied to the value attribute to extract up to 100 characters into a capture group.",
				"The assertion passes only if the computed length, when converted to a string, does not match the pattern `^1\\d+$`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:NotMatch --Expected:^1\\d+$}}",
				"locator": "Xpath",
				"onAttribute": "value",
				"onElement": "//input[@id='content']",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,100})"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect Id usage",
						"Regex match occurs when it shouldn't",
						"Unexpected DOM structure",
						"Unexpected whitespace or formatting in the attribute value"
					],
					"expected_result": "The assertion passes if the text from the value attribute does not match the regular expression `^1\\d+$`; it fails if it matches exactly.",
					"notes": "Validation is based solely on the text from the value attribute. The regular expression is applied to extract up to 100 characters, and the computed length is then compared to the prohibited pattern.",
					"test_case": "element_attribute_text_length_not_match_validation_id",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttributeCheck",
					"ElementTextLength",
					"RegexValidation",
					"Validation"
				]
			},
			"description": [
				"### Element Text Length NotMatch Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed length of the text from the value attribute of an input element with the Id `content` does not match the expected pattern `^1\\d+$`.",
				"The length is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(.{0,100})` is applied to the value attribute to extract up to 100 characters into a capture group.",
				"The assertion passes only if the computed length, when converted to a string, does not match the pattern `^1\\d+$`."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementTextLength --Operator:NotMatch --Expected:^1\\d+$}}",
				"locator": "Id",
				"onAttribute": "value",
				"onElement": "content",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,100})"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect CSS selector usage",
						"Unexpected DOM structure"
					],
					"expected_result": "The assertion passes if the element with the provided CSS selector is visible in the DOM.",
					"notes": "Validation is based solely on the element's visibility status as determined by the CSS selector. If the element is not visible or not found, the assertion fails.",
					"test_case": "element_visible_validation_css_username",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementVisible",
					"Validation"
				]
			},
			"description": [
				"### Element Visible Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that an element identified by the CSS selector `#username` is visible in the DOM.",
				"Visibility is determined solely based on the element's presence and rendering state, excluding any hidden or collapsed styling.",
				"The assertion passes if the element is visible; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementVisible}}",
				"locator": "CssSelector",
				"onElement": "#username",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect XPath indexing or attribute usage",
						"Unexpected DOM structure"
					],
					"expected_result": "The assertion passes if the element with the provided XPath locator is visible in the DOM.",
					"notes": "Validation is based solely on the element's visibility status as determined by the XPath locator. If the element is not visible or not found, the assertion fails.",
					"test_case": "element_visible_validation_xpath_username",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementVisible",
					"Validation"
				]
			},
			"description": [
				"### Element Visible Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that an element identified by the XPath locator `//input[@id='username']` is visible in the DOM.",
				"Visibility is determined solely based on the element's presence and rendering state, excluding any hidden or collapsed styling.",
				"The assertion passes if the element is visible; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementVisible}}",
				"locator": "Xpath",
				"onElement": "//input[@id='username']",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect Id usage",
						"Unexpected DOM structure"
					],
					"expected_result": "The assertion passes if the element with the provided Id is visible in the DOM.",
					"notes": "Validation is based solely on the element's visibility status as determined by the Id locator. If the element is not visible or not found, the assertion fails.",
					"test_case": "element_visible_validation_id_username",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementVisible",
					"Validation"
				]
			},
			"description": [
				"### Element Visible Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that an element identified by the Id `username` is visible in the DOM.",
				"Visibility is determined solely based on the element's presence and rendering state, excluding any hidden or collapsed styling.",
				"The assertion passes if the element is visible; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementVisible}}",
				"locator": "Id",
				"onElement": "username",
				"pluginName": "Assert"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect CSS selector usage",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the element text"
					],
					"expected_result": "The assertion passes if the computed text of the element exactly matches the expected string.",
					"notes": "Validation is based solely on the element's visible text content. Any additional whitespace or formatting differences will cause the assertion to fail.",
					"test_case": "element_text_equal_validation_css_div",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementText",
					"Validation"
				]
			},
			"description": [
				"### Element Text Equal Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed text from the element identified by the CssSelector `div#content` is equal to the expected text 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. 42.'.",
				"The validation is based solely on the element's visible text content, excluding any HTML markup or tags.",
				"The assertion passes if the element text exactly matches the expected value; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:Equal --Expected:Lorem ipsum dolor sit amet, consectetur adipiscing elit. 42.}}",
				"locator": "CssSelector",
				"onElement": "div#content",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect XPath indexing or attribute usage",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the element text"
					],
					"expected_result": "The assertion passes if the computed text of the element exactly matches the expected string.",
					"notes": "Validation is based solely on the element's visible text content. Any extraneous whitespace or formatting differences will result in a failure.",
					"test_case": "element_text_equal_validation_xpath_div",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementText",
					"Validation"
				]
			},
			"description": [
				"### Element Text Equal Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed text from the element identified by the XPath locator `//div[@id='content']` is equal to the expected text 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. 42.'.",
				"The validation is based solely on the element's visible text content, excluding any HTML markup or tags.",
				"The assertion passes if the element text exactly matches the expected value; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:Equal --Expected:Lorem ipsum dolor sit amet, consectetur adipiscing elit. 42.}}",
				"locator": "Xpath",
				"onElement": "//div[@id='content']",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect Id usage",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the element text"
					],
					"expected_result": "The assertion passes if the computed text of the element exactly matches the expected string.",
					"notes": "Validation is based solely on the element's visible text content. Any discrepancies in whitespace or formatting will cause the assertion to fail.",
					"test_case": "element_text_equal_validation_id_div",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementText",
					"Validation"
				]
			},
			"description": [
				"### Element Text Equal Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed text from the element identified by the Id `content` is equal to the expected text 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. 42.'.",
				"The validation is based solely on the element's visible text content, excluding any HTML markup or tags.",
				"The assertion passes if the element text exactly matches the expected value; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:Equal --Expected:Lorem ipsum dolor sit amet, consectetur adipiscing elit. 42.}}",
				"locator": "Id",
				"onElement": "content",
				"pluginName": "Assert"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect CSS selector usage",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the element text",
						"Regex extraction failure"
					],
					"expected_result": "The assertion passes if the computed text from the element exactly matches 'Lorem ipsu'.",
					"notes": "Validation is based solely on the element's visible text content. The regular expression extracts up to 10 characters for comparison. Any discrepancies in text content, including whitespace or formatting differences, will cause the assertion to fail.",
					"test_case": "element_text_equal_validation_css_div",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementText",
					"RegexValidation",
					"Validation"
				]
			},
			"description": [
				"### Element Text Equal Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed text from the element identified by the CssSelector `div#content` is equal to the expected text 'Lorem ipsu'.",
				"The validation is based solely on the element's visible text content, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(.{0,10})` is applied to the element's text content to extract up to 10 characters into a capture group.",
				"The assertion passes if the element text exactly matches the expected value; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:Equal --Expected:Lorem ipsu}}",
				"locator": "CssSelector",
				"onElement": "div#content",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,10})"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect XPath indexing or attribute usage",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the element text",
						"Regex extraction failure"
					],
					"expected_result": "The assertion passes if the computed text from the element exactly matches 'Lorem ipsu'.",
					"notes": "Validation is based solely on the element's visible text content. The regular expression is used to extract up to 10 characters for comparison. Differences in the text content, such as extra whitespace or formatting issues, will result in failure.",
					"test_case": "element_text_equal_validation_xpath_div",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementText",
					"RegexValidation",
					"Validation"
				]
			},
			"description": [
				"### Element Text Equal Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed text from the element identified by the XPath locator `//div[@id='content']` is equal to the expected text 'Lorem ipsu'.",
				"The validation is based solely on the element's visible text content, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(.{0,10})` is applied to the element's text content to extract up to 10 characters into a capture group.",
				"The assertion passes if the element text exactly matches the expected value; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:Equal --Expected:Lorem ipsu}}",
				"locator": "Xpath",
				"onElement": "//div[@id='content']",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,10})"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect Id usage",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the element text",
						"Regex extraction failure"
					],
					"expected_result": "The assertion passes if the computed text from the element exactly matches 'Lorem ipsu'.",
					"notes": "Validation is based solely on the element's visible text content. The regular expression extracts up to 10 characters for comparison, and any deviations such as extra spaces or formatting anomalies will cause the assertion to fail.",
					"test_case": "element_text_equal_validation_id_div",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementText",
					"RegexValidation",
					"Validation"
				]
			},
			"description": [
				"### Element Text Equal Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed text from the element identified by the Id `content` is equal to the expected text 'Lorem ipsu'.",
				"The validation is based solely on the element's visible text content, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(.{0,10})` is applied to the element's text content to extract up to 10 characters into a capture group.",
				"The assertion passes if the element text exactly matches the expected value; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:Equal --Expected:Lorem ipsu}}",
				"locator": "Id",
				"onElement": "content",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,10})"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect CSS selector usage",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the element text"
					],
					"expected_result": "The assertion passes if the computed text from the `value` attribute exactly matches 'Lorem ipsu'.",
					"notes": "Validation is based solely on the text from the `value` attribute. Any discrepancies, including extra whitespace or formatting differences, will cause the assertion to fail.",
					"test_case": "element_text_equal_validation_css_textarea",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementText",
					"Validation"
				]
			},
			"description": [
				"### Element Text Equal Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed text from the `value` attribute of the element identified by the CssSelector `textarea#content` is equal to the expected text 'Lorem ipsu'.",
				"The validation is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"The assertion passes if the text exactly matches the expected value; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:Equal --Expected:Lorem ipsu}}",
				"locator": "CssSelector",
				"onAttribute": "value",
				"onElement": "textarea#content",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect XPath indexing or attribute usage",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the element text"
					],
					"expected_result": "The assertion passes if the computed text from the `value` attribute exactly matches 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. 42.'.",
					"notes": "Validation is based solely on the text from the `value` attribute. Any discrepancies, including extra whitespace or formatting differences, will cause the assertion to fail.",
					"test_case": "element_text_equal_validation_xpath_textarea",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementText",
					"Validation"
				]
			},
			"description": [
				"### Element Text Equal Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed text from the `value` attribute of the element identified by the XPath locator `//textarea[@id='content']` is equal to the expected text 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. 42.'.",
				"The validation is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"The assertion passes if the text exactly matches the expected value; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:Equal --Expected:Lorem ipsum dolor sit amet, consectetur adipiscing elit. 42.}}",
				"locator": "Xpath",
				"onAttribute": "value",
				"onElement": "//textarea[@id='content']",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect Id usage",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the element text"
					],
					"expected_result": "The assertion passes if the computed text from the `value` attribute exactly matches 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. 42.'.",
					"notes": "Validation is based solely on the text from the `value` attribute. Any discrepancies, including extra whitespace or formatting differences, will cause the assertion to fail.",
					"test_case": "element_text_equal_validation_id_textarea",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementText",
					"Validation"
				]
			},
			"description": [
				"### Element Text Equal Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed text from the `value` attribute of the element identified by the Id `content` is equal to the expected text 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. 42.'.",
				"The validation is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"The assertion passes if the text exactly matches the expected value; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:Equal --Expected:Lorem ipsum dolor sit amet, consectetur adipiscing elit. 42.}}",
				"locator": "Id",
				"onAttribute": "value",
				"onElement": "content",
				"pluginName": "Assert"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect CSS selector usage",
						"Regex extraction failure",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the element text"
					],
					"expected_result": "The assertion passes if the text extracted from the `value` attribute exactly matches 'Lorem ipsu'.",
					"notes": "Validation is based solely on the text from the `value` attribute. The regular expression extracts up to 10 characters for comparison. Any discrepancies, including extra whitespace or formatting differences, will cause the assertion to fail.",
					"test_case": "element_text_equal_validation_css_textarea",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementText",
					"RegexValidation",
					"Validation"
				]
			},
			"description": [
				"### Element Text Equal Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed text from the `value` attribute of the element identified by the CssSelector `textarea#content` is equal to the expected text 'Lorem ipsu'.",
				"The validation is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(.{0,10})` is applied to the text content to extract up to 10 characters into a capture group.",
				"The assertion passes if the extracted text exactly matches the expected value; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:Equal --Expected:Lorem ipsu}}",
				"locator": "CssSelector",
				"onAttribute": "value",
				"onElement": "textarea#content",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,10})"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect XPath indexing or attribute usage",
						"Regex extraction failure",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the element text"
					],
					"expected_result": "The assertion passes if the text extracted from the `value` attribute exactly matches 'Lorem ipsu'.",
					"notes": "Validation is based solely on the text from the `value` attribute. The regular expression is applied to extract up to 10 characters for comparison. Any discrepancies, including extra whitespace or formatting differences, will cause the assertion to fail.",
					"test_case": "element_text_equal_validation_xpath_textarea",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementText",
					"RegexValidation",
					"Validation"
				]
			},
			"description": [
				"### Element Text Equal Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed text from the `value` attribute of the element identified by the XPath locator `//textarea[@id='content']` is equal to the expected text 'Lorem ipsu'.",
				"The validation is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(.{0,10})` is applied to the text content to extract up to 10 characters into a capture group.",
				"The assertion passes if the extracted text exactly matches the expected value; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:Equal --Expected:Lorem ipsu}}",
				"locator": "Xpath",
				"onAttribute": "value",
				"onElement": "//textarea[@id='content']",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,10})"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect Id usage",
						"Regex extraction failure",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the element text"
					],
					"expected_result": "The assertion passes if the text extracted from the `value` attribute exactly matches 'Lorem ipsu'.",
					"notes": "Validation is based solely on the text from the `value` attribute. The regular expression extracts up to 10 characters for comparison, and any discrepancies, such as extra spaces or formatting differences, will cause the assertion to fail.",
					"test_case": "element_text_equal_validation_id_textarea",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementText",
					"RegexValidation",
					"Validation"
				]
			},
			"description": [
				"### Element Text Equal Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed text from the `value` attribute of the element identified by the Id `content` is equal to the expected text 'Lorem ipsu'.",
				"The validation is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(.{0,10})` is applied to the text content to extract up to 10 characters into a capture group.",
				"The assertion passes if the extracted text exactly matches the expected value; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:Equal --Expected:Lorem ipsu}}",
				"locator": "Id",
				"onAttribute": "value",
				"onElement": "content",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,10})"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect CSS selector usage",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the element text"
					],
					"expected_result": "The assertion passes if the computed text from the element is not equal to 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. 42.'.",
					"notes": "Validation is based solely on the element's visible text content. Any variations, including differences in whitespace or formatting that result in a non-exact match, will cause the assertion to pass.",
					"test_case": "element_text_notequal_validation_css_div",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementText",
					"Validation"
				]
			},
			"description": [
				"### Element Text NotEqual Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed text from the element identified by the CssSelector `div#content` is not equal to the expected text 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. 42.'.",
				"The validation is based solely on the element's visible text content, excluding any HTML markup or tags.",
				"The assertion passes if the element text does not match the expected value exactly; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:NotEqual --Expected:Lorem ipsum dolor sit amet, consectetur adipiscing elit. 42.}}",
				"locator": "CssSelector",
				"onElement": "div#content",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect XPath indexing or attribute usage",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the element text"
					],
					"expected_result": "The assertion passes if the computed text from the element is not equal to 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. 42.'.",
					"notes": "Validation is based solely on the element's visible text content. Any discrepancies, including subtle differences in whitespace or formatting, will result in a successful assertion if the texts are not identical.",
					"test_case": "element_text_notequal_validation_xpath_div",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementText",
					"Validation"
				]
			},
			"description": [
				"### Element Text NotEqual Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed text from the element identified by the XPath locator `//div[@id='content']` is not equal to the expected text 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. 42.'.",
				"The validation is based solely on the element's visible text content, excluding any HTML markup or tags.",
				"The assertion passes if the element text does not match the expected value exactly; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:NotEqual --Expected:Lorem ipsum dolor sit amet, consectetur adipiscing elit. 42.}}",
				"locator": "Xpath",
				"onElement": "//div[@id='content']",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect Id usage",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the element text"
					],
					"expected_result": "The assertion passes if the computed text from the element is not equal to 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. 42.'.",
					"notes": "Validation is based solely on the element's visible text content. Any differences, including extra spaces or formatting variations leading to a non-exact match, will cause the assertion to pass.",
					"test_case": "element_text_notequal_validation_id_div",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementText",
					"Validation"
				]
			},
			"description": [
				"### Element Text NotEqual Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed text from the element identified by the Id `content` is not equal to the expected text 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. 42.'.",
				"The validation is based solely on the element's visible text content, excluding any HTML markup or tags.",
				"The assertion passes if the element text does not exactly match the expected value; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:NotEqual --Expected:Lorem ipsum dolor sit amet, consectetur adipiscing elit. 42.}}",
				"locator": "Id",
				"onElement": "content",
				"pluginName": "Assert"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect CSS selector usage",
						"Regex extraction failure",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the element text"
					],
					"expected_result": "The assertion passes if the text extracted from the element does not exactly match 'Lorem ipsu'.",
					"notes": "Validation is based solely on the element's visible text content. The regular expression extracts up to 10 characters for comparison, and any discrepancies, including extra whitespace or formatting differences, will cause the assertion to pass if the texts are not identical.",
					"test_case": "element_text_notequal_validation_css_div",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementText",
					"RegexValidation",
					"Validation"
				]
			},
			"description": [
				"### Element Text NotEqual Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed text from the element identified by the CssSelector `div#content` is not equal to the expected text 'Lorem ipsu'.",
				"The validation is based solely on the element's visible text content, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(.{0,10})` is applied to the text content to extract up to 10 characters into a capture group.",
				"The assertion passes if the extracted text does not match the expected value exactly; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:NotEqual --Expected:Lorem ipsu}}",
				"locator": "CssSelector",
				"onElement": "div#content",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,10})"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect XPath indexing or attribute usage",
						"Regex extraction failure",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the element text"
					],
					"expected_result": "The assertion passes if the text extracted from the element does not exactly match 'Lorem ipsu'.",
					"notes": "Validation is based solely on the element's visible text content. The regular expression is used to extract up to 10 characters for comparison. Any discrepancies, such as extra whitespace or unexpected formatting, will cause the assertion to pass when there is a non-exact match.",
					"test_case": "element_text_notequal_validation_xpath_div",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementText",
					"RegexValidation",
					"Validation"
				]
			},
			"description": [
				"### Element Text NotEqual Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed text from the element identified by the XPath locator `//div[@id='content']` is not equal to the expected text 'Lorem ipsu'.",
				"The validation is based solely on the element's visible text content, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(.{0,10})` is applied to the text content to extract up to 10 characters into a capture group.",
				"The assertion passes if the extracted text does not match the expected value exactly; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:NotEqual --Expected:Lorem ipsu}}",
				"locator": "Xpath",
				"onElement": "//div[@id='content']",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,10})"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect Id usage",
						"Regex extraction failure",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the element text"
					],
					"expected_result": "The assertion passes if the text extracted from the element does not exactly match 'Lorem ipsu'.",
					"notes": "Validation is based solely on the element's visible text content. The regular expression extracts up to 10 characters for comparison, and any differences such as additional whitespace or formatting anomalies will cause the assertion to pass if the texts are not identical.",
					"test_case": "element_text_notequal_validation_id_div",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementText",
					"RegexValidation",
					"Validation"
				]
			},
			"description": [
				"### Element Text NotEqual Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed text from the element identified by the Id `content` is not equal to the expected text 'Lorem ipsu'.",
				"The validation is based solely on the element's visible text content, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(.{0,10})` is applied to the text content to extract up to 10 characters into a capture group.",
				"The assertion passes if the extracted text does not match the expected value exactly; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:NotEqual --Expected:Lorem ipsu}}",
				"locator": "Id",
				"onElement": "content",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,10})"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect CSS selector usage",
						"Regex extraction failure",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the element text"
					],
					"expected_result": "The assertion passes if the text extracted from the element does not exactly match 'Lorem ipsu'.",
					"notes": "Validation is based solely on the element's visible text content. The regular expression extracts up to 10 characters for comparison, and any discrepancies, including extra whitespace or formatting differences, will cause the assertion to pass if the texts are not identical.",
					"test_case": "element_text_notequal_validation_css_div",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementText",
					"RegexValidation",
					"Validation"
				]
			},
			"description": [
				"### Element Text NotEqual Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed text from the element identified by the CssSelector `div#content` is not equal to the expected text 'Lorem ipsu'.",
				"The validation is based solely on the element's visible text content, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(.{0,10})` is applied to the text content to extract up to 10 characters into a capture group.",
				"The assertion passes if the extracted text does not match the expected value exactly; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:NotEqual --Expected:Lorem ipsu}}",
				"locator": "CssSelector",
				"onElement": "div#content",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,10})"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect XPath indexing or attribute usage",
						"Regex extraction failure",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the element text"
					],
					"expected_result": "The assertion passes if the text extracted from the element does not exactly match 'Lorem ipsu'.",
					"notes": "Validation is based solely on the element's visible text content. The regular expression is used to extract up to 10 characters for comparison. Any discrepancies, such as extra whitespace or unexpected formatting, will cause the assertion to pass when there is a non-exact match.",
					"test_case": "element_text_notequal_validation_xpath_div",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementText",
					"RegexValidation",
					"Validation"
				]
			},
			"description": [
				"### Element Text NotEqual Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed text from the element identified by the XPath locator `//div[@id='content']` is not equal to the expected text 'Lorem ipsu'.",
				"The validation is based solely on the element's visible text content, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(.{0,10})` is applied to the text content to extract up to 10 characters into a capture group.",
				"The assertion passes if the extracted text does not match the expected value exactly; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:NotEqual --Expected:Lorem ipsu}}",
				"locator": "Xpath",
				"onElement": "//div[@id='content']",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,10})"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect Id usage",
						"Regex extraction failure",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the element text"
					],
					"expected_result": "The assertion passes if the text extracted from the element does not exactly match 'Lorem ipsu'.",
					"notes": "Validation is based solely on the element's visible text content. The regular expression extracts up to 10 characters for comparison, and any differences such as additional whitespace or formatting anomalies will cause the assertion to pass if the texts are not identical.",
					"test_case": "element_text_notequal_validation_id_div",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementText",
					"RegexValidation",
					"Validation"
				]
			},
			"description": [
				"### Element Text NotEqual Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed text from the element identified by the Id `content` is not equal to the expected text 'Lorem ipsu'.",
				"The validation is based solely on the element's visible text content, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(.{0,10})` is applied to the text content to extract up to 10 characters into a capture group.",
				"The assertion passes if the extracted text does not match the expected value exactly; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:NotEqual --Expected:Lorem ipsu}}",
				"locator": "Id",
				"onElement": "content",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,10})"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect CSS selector usage",
						"Regex extraction failure",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the element text"
					],
					"expected_result": "The assertion passes if the text extracted from the element does not exactly match 'Lorem ipsu'.",
					"notes": "Validation is based solely on the element's visible text content. The regular expression extracts up to 10 characters for comparison, and any discrepancies, including extra whitespace or formatting differences, will cause the assertion to pass when there is a non-exact match.",
					"test_case": "element_text_notequal_validation_css_div",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementText",
					"RegexValidation",
					"Validation"
				]
			},
			"description": [
				"### Element Text NotEqual Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed text from the element identified by the CssSelector `div#content` is not equal to the expected text 'Lorem ipsu'.",
				"The validation is based solely on the element's visible text content, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(.{0,10})` is applied to the text content to extract up to 10 characters into a capture group.",
				"The assertion passes if the extracted text does not exactly match the expected value; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:NotEqual --Expected:Lorem ipsu}}",
				"locator": "CssSelector",
				"onElement": "div#content",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,10})"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect XPath indexing or attribute usage",
						"Regex extraction failure",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the element text"
					],
					"expected_result": "The assertion passes if the text extracted from the element does not exactly match 'Lorem ipsu'.",
					"notes": "Validation is based solely on the element's visible text content. The regular expression is used to extract up to 10 characters for comparison. Any discrepancies, such as extra whitespace or unexpected formatting, will cause the assertion to pass when there is a non-exact match.",
					"test_case": "element_text_notequal_validation_xpath_div",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementText",
					"RegexValidation",
					"Validation"
				]
			},
			"description": [
				"### Element Text NotEqual Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed text from the element identified by the XPath locator `//div[@id='content']` is not equal to the expected text 'Lorem ipsu'.",
				"The validation is based solely on the element's visible text content, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(.{0,10})` is applied to the text content to extract up to 10 characters into a capture group.",
				"The assertion passes if the extracted text does not exactly match the expected value; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:NotEqual --Expected:Lorem ipsu}}",
				"locator": "Xpath",
				"onElement": "//div[@id='content']",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,10})"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect Id usage",
						"Regex extraction failure",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the element text"
					],
					"expected_result": "The assertion passes if the text extracted from the element does not exactly match 'Lorem ipsu'.",
					"notes": "Validation is based solely on the element's visible text content. The regular expression extracts up to 10 characters for comparison, and any differences such as additional whitespace or formatting anomalies will cause the assertion to pass if the texts are not identical.",
					"test_case": "element_text_notequal_validation_id_div",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementText",
					"RegexValidation",
					"Validation"
				]
			},
			"description": [
				"### Element Text NotEqual Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed text from the element identified by the Id `content` is not equal to the expected text 'Lorem ipsu'.",
				"The validation is based solely on the element's visible text content, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(.{0,10})` is applied to the text content to extract up to 10 characters into a capture group.",
				"The assertion passes if the extracted text does not exactly match the expected value; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:NotEqual --Expected:Lorem ipsu}}",
				"locator": "Id",
				"onElement": "content",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,10})"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect CSS selector usage",
						"Regex extraction failure",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the element text"
					],
					"expected_result": "The assertion passes if the numeric value extracted from the element's visible text content is greater than 42.",
					"notes": "Validation is based solely on the element's visible text content. The regular expression extracts a numeric value from the text, and the assertion compares this number against the expected threshold 42. If the extracted numeric value is not greater than 42, the assertion fails.",
					"test_case": "element_text_greater_validation_css_div",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementText",
					"RegexValidation",
					"Validation"
				]
			},
			"description": [
				"### Element Text Greater Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the numeric value extracted from the visible text content of the element identified by the CssSelector `div#content` is greater than the expected value 42.",
				"The visible text content is processed using the regular expression `\\d+` to extract a numeric value.",
				"The assertion passes if the extracted numeric value is greater than 42; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:Greater --Expected:42}}",
				"locator": "CssSelector",
				"onElement": "div#content",
				"pluginName": "Assert",
				"regularExpression": "\\d+"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect XPath indexing or attribute usage",
						"Regex extraction failure",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the element text"
					],
					"expected_result": "The assertion passes if the numeric value extracted from the element's visible text content is greater than 42.",
					"notes": "Validation is based solely on the element's visible text content. The regular expression is applied to extract a numeric value from the text, and the assertion compares this value to the expected threshold of 42. The assertion fails if the extracted number is not greater than 42.",
					"test_case": "element_text_greater_validation_xpath_div",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementText",
					"RegexValidation",
					"Validation"
				]
			},
			"description": [
				"### Element Text Greater Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the numeric value extracted from the visible text content of the element identified by the XPath locator `//div[@id='content']` is greater than the expected value 42.",
				"The visible text content is processed using the regular expression `\\d+` to extract a numeric value.",
				"The assertion passes if the extracted numeric value is greater than 42; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:Greater --Expected:42}}",
				"locator": "Xpath",
				"onElement": "//div[@id='content']",
				"pluginName": "Assert",
				"regularExpression": "\\d+"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect Id usage",
						"Regex extraction failure",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the element text"
					],
					"expected_result": "The assertion passes if the numeric value extracted from the element's visible text content is greater than 42.",
					"notes": "Validation is based solely on the element's visible text content. The regular expression extracts a numeric value from the text, and the assertion verifies that this value is greater than the threshold 42. The assertion fails if the extracted numeric value does not exceed 42.",
					"test_case": "element_text_greater_validation_id_div",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementText",
					"RegexValidation",
					"Validation"
				]
			},
			"description": [
				"### Element Text Greater Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that the numeric value extracted from the visible text content of the element identified by the Id `content` is greater than the expected value 42.",
				"The visible text content is processed using the regular expression `\\d+` to extract a numeric value.",
				"The assertion passes if the extracted numeric value is greater than 42; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:Greater --Expected:42}}",
				"locator": "Id",
				"onElement": "content",
				"pluginName": "Assert",
				"regularExpression": "\\d+"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect CSS selector usage",
						"Regex extraction failure",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the attribute value"
					],
					"expected_result": "The assertion passes if the numeric value extracted from the `value` attribute is greater than 42.",
					"notes": "Validation is based solely on the text from the `value` attribute. The regular expression extracts a numeric value from the attribute text, and the assertion verifies that this value is greater than 42. Any failure to extract a number or a numeric value less than or equal to 42 will result in assertion failure.",
					"test_case": "element_text_greater_validation_css_textarea",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementText",
					"RegexValidation",
					"Validation"
				]
			},
			"description": [
				"### Element Text Greater Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the numeric value extracted from the text of the `value` attribute of the textarea element identified by the CssSelector `textarea#content` is greater than the expected value 42.",
				"The validation is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"A regular expression `\\d+` is applied to the text content to extract a numeric value.",
				"The assertion passes if the extracted numeric value is greater than 42; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:Greater --Expected:42}}",
				"locator": "CssSelector",
				"onAttribute": "value",
				"onElement": "textarea#content",
				"pluginName": "Assert",
				"regularExpression": "\\d+"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect XPath indexing or attribute usage",
						"Regex extraction failure",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the attribute value"
					],
					"expected_result": "The assertion passes if the numeric value extracted from the `value` attribute is greater than 42.",
					"notes": "Validation is based solely on the text from the `value` attribute. The regular expression is applied to extract a numeric value from the attribute text, and the assertion verifies that this number is greater than 42. Inability to extract a valid number or a number less than or equal to 42 causes assertion failure.",
					"test_case": "element_text_greater_validation_xpath_textarea",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementText",
					"RegexValidation",
					"Validation"
				]
			},
			"description": [
				"### Element Text Greater Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the numeric value extracted from the text of the `value` attribute of the textarea element identified by the XPath locator `//textarea[@id='content']` is greater than the expected value 42.",
				"The validation is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"A regular expression `\\d+` is applied to the text content to extract a numeric value.",
				"The assertion passes if the extracted numeric value is greater than 42; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:Greater --Expected:42}}",
				"locator": "Xpath",
				"onAttribute": "value",
				"onElement": "//textarea[@id='content']",
				"pluginName": "Assert",
				"regularExpression": "\\d+"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect Id usage",
						"Regex extraction failure",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the attribute value"
					],
					"expected_result": "The assertion passes if the numeric value extracted from the `value` attribute is greater than 42.",
					"notes": "Validation is based solely on the text from the `value` attribute. The regular expression extracts a numeric value from the attribute text, and the assertion verifies that this value is greater than 42. If a valid numeric value is not extracted or the value is not greater than 42, the assertion fails.",
					"test_case": "element_text_greater_validation_id_textarea",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementText",
					"RegexValidation",
					"Validation"
				]
			},
			"description": [
				"### Element Text Greater Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that the numeric value extracted from the text of the `value` attribute of the textarea element identified by the Id `content` is greater than the expected value 42.",
				"The validation is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"A regular expression `\\d+` is applied to the text content to extract a numeric value.",
				"The assertion passes if the extracted numeric value is greater than 42; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:Greater --Expected:42}}",
				"locator": "Id",
				"onAttribute": "value",
				"onElement": "content",
				"pluginName": "Assert",
				"regularExpression": "\\d+"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect CSS selector usage",
						"Regex extraction failure",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the element text"
					],
					"expected_result": "The assertion passes if the numeric value extracted from the element's visible text content is greater than or equal to 42.",
					"notes": "Validation is based solely on the element's visible text content. The regular expression extracts a numeric value from the text, and the assertion verifies that this value is greater than or equal to 42. If extraction fails or the value is less than 42, the assertion fails.",
					"test_case": "element_text_greaterequal_validation_css_div",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementText",
					"RegexValidation",
					"Validation"
				]
			},
			"description": [
				"### Element Text GreaterEqual Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the numeric value extracted from the visible text content of the element identified by the CssSelector `div#content` is greater than or equal to the expected value 42.",
				"The visible text content is processed using the regular expression `\\d+` to extract a numeric value.",
				"The assertion passes if the extracted numeric value is greater than or equal to 42; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:GreaterEqual --Expected:42}}",
				"locator": "CssSelector",
				"onElement": "div#content",
				"pluginName": "Assert",
				"regularExpression": "\\d+"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect XPath indexing or attribute usage",
						"Regex extraction failure",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the element text"
					],
					"expected_result": "The assertion passes if the numeric value extracted from the element's visible text content is greater than or equal to 42.",
					"notes": "Validation is based solely on the element's visible text content. The regular expression is applied to extract a numeric value from the text, and the assertion verifies that this value meets or exceeds 42. Failure to extract a valid number or a value less than 42 will result in assertion failure.",
					"test_case": "element_text_greaterequal_validation_xpath_div",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementText",
					"RegexValidation",
					"Validation"
				]
			},
			"description": [
				"### Element Text GreaterEqual Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the numeric value extracted from the visible text content of the element identified by the XPath locator `//div[@id='content']` is greater than or equal to the expected value 42.",
				"The visible text content is processed using the regular expression `\\d+` to extract a numeric value.",
				"The assertion passes if the extracted numeric value is greater than or equal to 42; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:GreaterEqual --Expected:42}}",
				"locator": "Xpath",
				"onElement": "//div[@id='content']",
				"pluginName": "Assert",
				"regularExpression": "\\d+"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect Id usage",
						"Regex extraction failure",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the element text"
					],
					"expected_result": "The assertion passes if the numeric value extracted from the element's visible text content is greater than or equal to 42.",
					"notes": "Validation is based solely on the element's visible text content. The regular expression extracts a numeric value from the text, and the assertion confirms that this number is at least 42. If a valid number cannot be extracted or it is less than 42, the assertion fails.",
					"test_case": "element_text_greaterequal_validation_id_div",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementText",
					"RegexValidation",
					"Validation"
				]
			},
			"description": [
				"### Element Text GreaterEqual Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that the numeric value extracted from the visible text content of the element identified by the Id `content` is greater than or equal to the expected value 42.",
				"The visible text content is processed using the regular expression `\\d+` to extract a numeric value.",
				"The assertion passes if the extracted numeric value is greater than or equal to 42; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:GreaterEqual --Expected:42}}",
				"locator": "Id",
				"onElement": "content",
				"pluginName": "Assert",
				"regularExpression": "\\d+"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect CSS selector usage",
						"Regex extraction failure",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the attribute value"
					],
					"expected_result": "The assertion passes if the numeric value extracted from the `value` attribute is greater than or equal to 42.",
					"notes": "Validation is based solely on the text from the `value` attribute. The regular expression extracts a numeric value from the attribute text, and the assertion verifies that this value meets or exceeds the threshold of 42. If a valid number is not extracted or is less than 42, the assertion fails.",
					"test_case": "element_text_greaterequal_validation_css_textarea",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementText",
					"RegexExtraction",
					"Validation"
				]
			},
			"description": [
				"### Element Text GreaterEqual Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the numeric value extracted from the text of the `value` attribute of the textarea element identified by the CssSelector `textarea#content` is greater than or equal to the expected value 42.",
				"The validation is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"A regular expression `\\d+` is applied to the attribute text to extract a numeric value.",
				"The assertion passes if the extracted numeric value is greater than or equal to 42; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:GreaterEqual --Expected:42}}",
				"locator": "CssSelector",
				"onAttribute": "value",
				"onElement": "textarea#content",
				"pluginName": "Assert",
				"regularExpression": "\\d+"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect XPath indexing or attribute usage",
						"Regex extraction failure",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the attribute value"
					],
					"expected_result": "The assertion passes if the numeric value extracted from the `value` attribute is greater than or equal to 42.",
					"notes": "Validation is based solely on the text from the `value` attribute. The regular expression extracts a numeric value from the attribute text, and the assertion confirms that this number is at least 42. Failure to extract a valid number or a number less than 42 will result in assertion failure.",
					"test_case": "element_text_greaterequal_validation_xpath_textarea",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementText",
					"RegexExtraction",
					"Validation"
				]
			},
			"description": [
				"### Element Text GreaterEqual Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the numeric value extracted from the text of the `value` attribute of the textarea element identified by the XPath locator `//textarea[@id='content']` is greater than or equal to the expected value 42.",
				"The validation is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"A regular expression `\\d+` is applied to the attribute text to extract a numeric value.",
				"The assertion passes if the extracted numeric value is greater than or equal to 42; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:GreaterEqual --Expected:42}}",
				"locator": "Xpath",
				"onAttribute": "value",
				"onElement": "//textarea[@id='content']",
				"pluginName": "Assert",
				"regularExpression": "\\d+"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect Id usage",
						"Regex extraction failure",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the attribute value"
					],
					"expected_result": "The assertion passes if the numeric value extracted from the `value` attribute is greater than or equal to 42.",
					"notes": "Validation is based solely on the text from the `value` attribute. The regular expression extracts a numeric value from the attribute text, and the assertion verifies that this number is at least 42. If a valid number is not extracted or if the extracted number is less than 42, the assertion fails.",
					"test_case": "element_text_greaterequal_validation_id_textarea",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementText",
					"RegexExtraction",
					"Validation"
				]
			},
			"description": [
				"### Element Text GreaterEqual Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that the numeric value extracted from the text of the `value` attribute of the textarea element identified by the Id `content` is greater than or equal to the expected value 42.",
				"The validation is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"A regular expression `\\d+` is applied to the attribute text to extract a numeric value.",
				"The assertion passes if the extracted numeric value is greater than or equal to 42; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:GreaterEqual --Expected:42}}",
				"locator": "Id",
				"onAttribute": "value",
				"onElement": "content",
				"pluginName": "Assert",
				"regularExpression": "\\d+"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect CSS selector usage",
						"Regex extraction failure",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the element text"
					],
					"expected_result": "The assertion passes if the numeric value extracted from the element's visible text content is lower than 42.",
					"notes": "Validation is based solely on the visible text content of the element. The regular expression extracts a numeric value, and the assertion verifies that this value is lower than 42. If no valid number is extracted or if the extracted number is 42 or greater, the assertion fails.",
					"test_case": "element_text_lower_validation_css_div",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementText",
					"RegexExtraction",
					"Validation"
				]
			},
			"description": [
				"### Element Text Lower Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the numeric value extracted from the visible text content of the element identified by the CssSelector `div#content` is lower than the expected value 42.",
				"The visible text is processed using the regular expression `\\d+` to extract a numeric value.",
				"The assertion passes if the extracted numeric value is lower than 42; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:Lower --Expected:42}}",
				"locator": "CssSelector",
				"onElement": "div#content",
				"pluginName": "Assert",
				"regularExpression": "\\d+"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect XPath indexing or attribute usage",
						"Regex extraction failure",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the element text"
					],
					"expected_result": "The assertion passes if the numeric value extracted from the element's visible text content is lower than 42.",
					"notes": "Validation is based solely on the visible text content of the element. The regular expression extracts a numeric value from the text, and the assertion confirms that this number is lower than 42. Failure to extract a valid number or extraction of a value that is 42 or greater will cause the assertion to fail.",
					"test_case": "element_text_lower_validation_xpath_div",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementText",
					"RegexExtraction",
					"Validation"
				]
			},
			"description": [
				"### Element Text Lower Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the numeric value extracted from the visible text content of the element identified by the XPath locator `//div[@id='content']` is lower than the expected value 42.",
				"The visible text is processed using the regular expression `\\d+` to extract a numeric value.",
				"The assertion passes if the extracted numeric value is lower than 42; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:Lower --Expected:42}}",
				"locator": "Xpath",
				"onElement": "//div[@id='content']",
				"pluginName": "Assert",
				"regularExpression": "\\d+"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect Id usage",
						"Regex extraction failure",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the element text"
					],
					"expected_result": "The assertion passes if the numeric value extracted from the element's visible text content is lower than 42.",
					"notes": "Validation is based solely on the visible text content of the element. The regular expression is used to extract a numeric value from the text, and the assertion verifies that this number is lower than 42. If extraction fails or the value is not lower than 42, the assertion fails.",
					"test_case": "element_text_lower_validation_id_div",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementText",
					"RegexExtraction",
					"Validation"
				]
			},
			"description": [
				"### Element Text Lower Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that the numeric value extracted from the visible text content of the element identified by the Id `content` is lower than the expected value 42.",
				"The visible text is processed using the regular expression `\\d+` to extract a numeric value.",
				"The assertion passes if the extracted numeric value is lower than 42; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:Lower --Expected:42}}",
				"locator": "Id",
				"onElement": "content",
				"pluginName": "Assert",
				"regularExpression": "\\d+"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect CSS selector usage",
						"Regex extraction failure",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the attribute value"
					],
					"expected_result": "The assertion passes if the numeric value extracted from the `value` attribute is lower than 42.",
					"notes": "Validation is based solely on the text from the `value` attribute. The regular expression extracts a numeric value from the attribute text, and the assertion verifies that this value is lower than 42. Failure to extract a valid number or an extracted value of 42 or greater will cause the assertion to fail.",
					"test_case": "element_text_lower_validation_css_textarea",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementText",
					"RegexExtraction",
					"Validation"
				]
			},
			"description": [
				"### Element Text Lower Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the numeric value extracted from the text of the `value` attribute of the textarea element identified by the CssSelector `textarea#content` is lower than the expected value 42.",
				"The validation is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"A regular expression `\\d+` is applied to the attribute text to extract a numeric value.",
				"The assertion passes if the extracted numeric value is lower than 42; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:Lower --Expected:42}}",
				"locator": "CssSelector",
				"onAttribute": "value",
				"onElement": "textarea#content",
				"pluginName": "Assert",
				"regularExpression": "\\d+"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect XPath indexing or attribute usage",
						"Regex extraction failure",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the attribute value"
					],
					"expected_result": "The assertion passes if the numeric value extracted from the `value` attribute is lower than 42.",
					"notes": "Validation is based solely on the text from the `value` attribute. The regular expression is applied to extract a numeric value from the attribute text, and the assertion verifies that this number is lower than 42. If a valid number is not extracted or the number is 42 or greater, the assertion fails.",
					"test_case": "element_text_lower_validation_xpath_textarea",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementText",
					"RegexExtraction",
					"Validation"
				]
			},
			"description": [
				"### Element Text Lower Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the numeric value extracted from the text of the `value` attribute of the textarea element identified by the XPath locator `//textarea[@id='content']` is lower than the expected value 42.",
				"The validation is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"A regular expression `\\d+` is applied to the attribute text to extract a numeric value.",
				"The assertion passes if the extracted numeric value is lower than 42; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:Lower --Expected:42}}",
				"locator": "Xpath",
				"onAttribute": "value",
				"onElement": "//textarea[@id='content']",
				"pluginName": "Assert",
				"regularExpression": "\\d+"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect Id usage",
						"Regex extraction failure",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the attribute value"
					],
					"expected_result": "The assertion passes if the numeric value extracted from the `value` attribute is lower than 42.",
					"notes": "Validation is based solely on the text from the `value` attribute. The regular expression extracts a numeric value from the attribute text, and the assertion confirms that this value is lower than 42. If the extraction fails or the resulting number is not lower than 42, the assertion fails.",
					"test_case": "element_text_lower_validation_id_textarea",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementText",
					"RegexExtraction",
					"Validation"
				]
			},
			"description": [
				"### Element Text Lower Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that the numeric value extracted from the text of the `value` attribute of the textarea element identified by the Id `content` is lower than the expected value 42.",
				"The validation is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"A regular expression `\\d+` is applied to the attribute text to extract a numeric value.",
				"The assertion passes if the extracted numeric value is lower than 42; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:Lower --Expected:42}}",
				"locator": "Id",
				"onAttribute": "value",
				"onElement": "content",
				"pluginName": "Assert",
				"regularExpression": "\\d+"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect CSS selector usage",
						"Regex extraction failure",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the element text"
					],
					"expected_result": "The assertion passes if the numeric value extracted from the element's visible text content is lower than or equal to 42.",
					"notes": "Validation is based solely on the element's visible text content. The regular expression extracts a numeric value from the text, and the assertion confirms that this value is less than or equal to 42. Failure to extract a valid number or extraction of a number greater than 42 will result in assertion failure.",
					"test_case": "element_text_lowerequal_validation_css_div",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementText",
					"RegexExtraction",
					"Validation"
				]
			},
			"description": [
				"### Element Text LowerEqual Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the numeric value extracted from the visible text content of the element identified by the CssSelector `div#content` is lower than or equal to the expected value 42.",
				"The visible text is processed using the regular expression `\\d+` to extract a numeric value.",
				"The assertion passes if the extracted numeric value is lower than or equal to 42; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:LowerEqual --Expected:42}}",
				"locator": "CssSelector",
				"onElement": "div#content",
				"pluginName": "Assert",
				"regularExpression": "\\d+"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect XPath indexing or attribute usage",
						"Regex extraction failure",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the element text"
					],
					"expected_result": "The assertion passes if the numeric value extracted from the element's visible text content is lower than or equal to 42.",
					"notes": "Validation is based solely on the element's visible text content. The regular expression extracts a numeric value from the text, and the assertion confirms that this value is less than or equal to 42. If extraction fails or the resulting number exceeds 42, the assertion fails.",
					"test_case": "element_text_lowerequal_validation_xpath_div",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementText",
					"RegexExtraction",
					"Validation"
				]
			},
			"description": [
				"### Element Text LowerEqual Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the numeric value extracted from the visible text content of the element identified by the XPath locator `//div[@id='content']` is lower than or equal to the expected value 42.",
				"The visible text is processed using the regular expression `\\d+` to extract a numeric value.",
				"The assertion passes if the extracted numeric value is lower than or equal to 42; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:LowerEqual --Expected:42}}",
				"locator": "Xpath",
				"onElement": "//div[@id='content']",
				"pluginName": "Assert",
				"regularExpression": "\\d+"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect Id usage",
						"Regex extraction failure",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the element text"
					],
					"expected_result": "The assertion passes if the numeric value extracted from the element's visible text content is lower than or equal to 42.",
					"notes": "Validation is based solely on the element's visible text content. The regular expression extracts a numeric value from the text, and the assertion verifies that this extracted number is less than or equal to 42. If a valid number is not extracted or if the number exceeds 42, the assertion fails.",
					"test_case": "element_text_lowerequal_validation_id_div",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementText",
					"RegexExtraction",
					"Validation"
				]
			},
			"description": [
				"### Element Text LowerEqual Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that the numeric value extracted from the visible text content of the element identified by the Id `content` is lower than or equal to the expected value 42.",
				"The visible text is processed using the regular expression `\\d+` to extract a numeric value.",
				"The assertion passes if the extracted numeric value is lower than or equal to 42; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:LowerEqual --Expected:42}}",
				"locator": "Id",
				"onElement": "content",
				"pluginName": "Assert",
				"regularExpression": "\\d+"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect CSS selector usage",
						"Regex extraction failure",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the attribute value"
					],
					"expected_result": "The assertion passes if the numeric value extracted from the `value` attribute is lower than or equal to 42.",
					"notes": "Validation is based solely on the text from the `value` attribute. The regular expression extracts a numeric value from the attribute text, and the assertion verifies that this value is lower than or equal to 42. Failure to extract a valid number or extraction of a number greater than 42 will cause the assertion to fail.",
					"test_case": "element_text_lowerequal_validation_css_textarea",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementText",
					"RegexExtraction",
					"Validation"
				]
			},
			"description": [
				"### Element Text LowerEqual Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the numeric value extracted from the text of the `value` attribute of the textarea element identified by the CssSelector `textarea#content` is lower than or equal to the expected value 42.",
				"The validation is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"A regular expression `\\d+` is applied to the attribute text to extract a numeric value.",
				"The assertion passes if the extracted numeric value is lower than or equal to 42; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:LowerEqual --Expected:42}}",
				"locator": "CssSelector",
				"onAttribute": "value",
				"onElement": "textarea#content",
				"pluginName": "Assert",
				"regularExpression": "\\d+"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect XPath indexing or attribute usage",
						"Regex extraction failure",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the attribute value"
					],
					"expected_result": "The assertion passes if the numeric value extracted from the `value` attribute is lower than or equal to 42.",
					"notes": "Validation is based solely on the text from the `value` attribute. The regular expression is applied to extract a numeric value from the attribute text, and the assertion confirms that this number is lower than or equal to 42. Failure to extract a valid number or extraction of a number greater than 42 will cause the assertion to fail.",
					"test_case": "element_text_lowerequal_validation_xpath_textarea",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementText",
					"RegexExtraction",
					"Validation"
				]
			},
			"description": [
				"### Element Text LowerEqual Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the numeric value extracted from the text of the `value` attribute of the textarea element identified by the XPath locator `//textarea[@id='content']` is lower than or equal to the expected value 42.",
				"The validation is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"A regular expression `\\d+` is applied to the attribute text to extract a numeric value.",
				"The assertion passes if the extracted numeric value is lower than or equal to 42; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:LowerEqual --Expected:42}}",
				"locator": "Xpath",
				"onAttribute": "value",
				"onElement": "//textarea[@id='content']",
				"pluginName": "Assert",
				"regularExpression": "\\d+"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect Id usage",
						"Regex extraction failure",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the attribute value"
					],
					"expected_result": "The assertion passes if the numeric value extracted from the `value` attribute is lower than or equal to 42.",
					"notes": "Validation is based solely on the text from the `value` attribute. The regular expression extracts a numeric value from the attribute text, and the assertion verifies that this extracted number is less than or equal to 42. If a valid number is not extracted or if the extracted number exceeds 42, the assertion fails.",
					"test_case": "element_text_lowerequal_validation_id_textarea",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementText",
					"RegexExtraction",
					"Validation"
				]
			},
			"description": [
				"### Element Text LowerEqual Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that the numeric value extracted from the text of the `value` attribute of the textarea element identified by the Id `content` is lower than or equal to the expected value 42.",
				"The validation is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"A regular expression `\\d+` is applied to the attribute text to extract a numeric value.",
				"The assertion passes if the extracted numeric value is lower than or equal to 42; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:LowerEqual --Expected:42}}",
				"locator": "Id",
				"onAttribute": "value",
				"onElement": "content",
				"pluginName": "Assert",
				"regularExpression": "\\d+"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect CSS selector usage",
						"Regex match failure",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the element text"
					],
					"expected_result": "The assertion passes if the element's visible text matches the regular expression `^Lorem ipsum dolor.*`; it fails otherwise.",
					"notes": "Validation is based solely on the element's visible text content. A regular expression is applied to test for the expected pattern. If the text does not match, the assertion fails.",
					"test_case": "element_text_match_validation_css_div",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementText",
					"RegexValidation",
					"Validation"
				]
			},
			"description": [
				"### Element Text Match Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed text from the element identified by the CssSelector `div#content` matches the expected pattern `^Lorem ipsum dolor.*`.",
				"The validation is based solely on the element's visible text content, excluding any HTML markup or tags.",
				"A regular expression `^Lorem ipsum dolor.*` is applied to the visible text to test for a match.",
				"The assertion passes only if the element text matches the pattern; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:Match --Expected:^Lorem ipsum dolor.*}}",
				"locator": "CssSelector",
				"onElement": "div#content",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect XPath indexing or attribute usage",
						"Regex match failure",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the element text"
					],
					"expected_result": "The assertion passes if the element's visible text matches the regular expression `^Lorem ipsum dolor.*`; it fails otherwise.",
					"notes": "Validation is based solely on the element's visible text content. A regular expression is applied to test for the expected pattern. Failure to match the pattern causes the assertion to fail.",
					"test_case": "element_text_match_validation_xpath_div",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementText",
					"RegexValidation",
					"Validation"
				]
			},
			"description": [
				"### Element Text Match Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed text from the element identified by the XPath locator `//div[@id='content']` matches the expected pattern `^Lorem ipsum dolor.*`.",
				"The validation is based solely on the element's visible text content, excluding any HTML markup or tags.",
				"A regular expression `^Lorem ipsum dolor.*` is applied to the visible text to test for a match.",
				"The assertion passes only if the element text matches the pattern; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:Match --Expected:^Lorem ipsum dolor.*}}",
				"locator": "Xpath",
				"onElement": "//div[@id='content']",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect Id usage",
						"Regex match failure",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the element text"
					],
					"expected_result": "The assertion passes if the element's visible text matches the regular expression `^Lorem ipsum dolor.*`; it fails otherwise.",
					"notes": "Validation is based solely on the element's visible text content. A regular expression is applied to test for the expected pattern. If the pattern does not match, the assertion fails.",
					"test_case": "element_text_match_validation_id_div",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementText",
					"RegexValidation",
					"Validation"
				]
			},
			"description": [
				"### Element Text Match Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed text from the element identified by the Id `content` matches the expected pattern `^Lorem ipsum dolor.*`.",
				"The validation is based solely on the element's visible text content, excluding any HTML markup or tags.",
				"A regular expression `^Lorem ipsum dolor.*` is applied to the visible text to test for a match.",
				"The assertion passes only if the element text matches the pattern; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:Match --Expected:^Lorem ipsum dolor.*}}",
				"locator": "Id",
				"onElement": "content",
				"pluginName": "Assert"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect CSS selector usage",
						"Regex match failure",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the element text"
					],
					"expected_result": "The assertion passes only if the extracted text matches the pattern `^Lorem ipsu$`.",
					"notes": "Validation is based solely on the element's visible text content. The first regular expression extracts up to 10 characters into a capture group, which is converted to a string. The second regular expression `^Lorem ipsu$` is then applied to this string to test for an exact match. If the pattern does not match, the assertion fails.",
					"test_case": "element_text_match_validation_css_content",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementText",
					"RegexValidation",
					"Validation"
				]
			},
			"description": [
				"### Element Text Match Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed text from the element identified by the CssSelector `div#content` matches the expected pattern `^Lorem ipsu$`.",
				"The validation is based solely on the element's visible text content, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(.{0,10})` is applied to the visible text to extract up to 10 characters into a capture group.",
				"A regular expression `^Lorem ipsu$` is then applied to the extracted text to test for an exact match.",
				"The assertion passes only if the extracted text matches the pattern `^Lorem ipsu$`; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:Match --Expected:^Lorem ipsu$}}",
				"locator": "CssSelector",
				"onElement": "div#content",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,10})"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect XPath indexing or attribute usage",
						"Regex match failure",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the element text"
					],
					"expected_result": "The assertion passes only if the extracted text matches the pattern `^Lorem ipsu$`.",
					"notes": "Validation is based solely on the element's visible text content. The first regular expression extracts up to 10 characters into a capture group, which is converted to a string. The second regular expression `^Lorem ipsu$` is then applied to this string to test for an exact match. If the pattern does not match, the assertion fails.",
					"test_case": "element_text_match_validation_xpath_content",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementText",
					"RegexValidation",
					"Validation"
				]
			},
			"description": [
				"### Element Text Match Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed text from the element identified by the Xpath locator `//div[@id='content']` matches the expected pattern `^Lorem ipsu$`.",
				"The validation is based solely on the element's visible text content, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(.{0,10})` is applied to the visible text to extract up to 10 characters into a capture group.",
				"A regular expression `^Lorem ipsu$` is then applied to the extracted text to test for an exact match.",
				"The assertion passes only if the extracted text matches the pattern `^Lorem ipsu$`; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:Match --Expected:^Lorem ipsu$}}",
				"locator": "Xpath",
				"onElement": "//div[@id='content']",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,10})"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect Id usage",
						"Regex match failure",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the element text"
					],
					"expected_result": "The assertion passes only if the extracted text matches the pattern `^Lorem ipsu$`.",
					"notes": "Validation is based solely on the element's visible text content. The first regular expression extracts up to 10 characters into a capture group, which is converted to a string. The second regular expression `^Lorem ipsu$` is then applied to this string to test for an exact match. If the pattern does not match, the assertion fails.",
					"test_case": "element_text_match_validation_id_content",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementText",
					"RegexValidation",
					"Validation"
				]
			},
			"description": [
				"### Element Text Match Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed text from the element identified by the Id `content` matches the expected pattern `^Lorem ipsu$`.",
				"The validation is based solely on the element's visible text content, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(.{0,10})` is applied to the visible text to extract up to 10 characters into a capture group.",
				"A regular expression `^Lorem ipsu$` is then applied to the extracted text to test for an exact match.",
				"The assertion passes only if the extracted text matches the pattern `^Lorem ipsu$`; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:Match --Expected:^Lorem ipsu$}}",
				"locator": "Id",
				"onElement": "content",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,10})"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Attribute 'value' empty",
						"Attribute 'value' not found",
						"Element not found",
						"Incorrect CSS selector usage",
						"Regex match failure",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the element text"
					],
					"expected_result": "The assertion passes only if the text from the `value` attribute matches the pattern `^Lorem ipsum dolor.*`.",
					"notes": "Validation is based solely on the text from the `value` attribute. A regular expression `^Lorem ipsum dolor.*` is applied directly to this text to test for a match. If the pattern does not match, the assertion fails.",
					"test_case": "element_text_match_validation_css_content_value",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttributeCheck",
					"ElementText",
					"RegexValidation",
					"Validation"
				]
			},
			"description": [
				"### Element Text Match Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed text from the `value` attribute of the textarea element identified by the CssSelector `textarea#content` matches the expected pattern `^Lorem ipsum dolor.*`.",
				"The validation is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"A regular expression `^Lorem ipsum dolor.*` is applied to the text from the `value` attribute to test for a match.",
				"The assertion passes only if the text from the `value` attribute matches the pattern `^Lorem ipsum dolor.*`; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:Match --Expected:^Lorem ipsum dolor.*}}",
				"locator": "CssSelector",
				"onAttribute": "value",
				"onElement": "textarea#content",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Attribute 'value' empty",
						"Attribute 'value' not found",
						"Element not found",
						"Incorrect Xpath indexing or attribute usage",
						"Regex match failure",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the element text"
					],
					"expected_result": "The assertion passes only if the text from the `value` attribute matches the pattern `^Lorem ipsum dolor.*`.",
					"notes": "Validation is based solely on the text from the `value` attribute. A regular expression `^Lorem ipsum dolor.*` is applied directly to this text to test for a match. If the pattern does not match, the assertion fails.",
					"test_case": "element_text_match_validation_xpath_content_value",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttributeCheck",
					"ElementText",
					"RegexValidation",
					"Validation"
				]
			},
			"description": [
				"### Element Text Match Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed text from the `value` attribute of the textarea element identified by the Xpath locator `//textarea[@id='content']` matches the expected pattern `^Lorem ipsum dolor.*`.",
				"The validation is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"A regular expression `^Lorem ipsum dolor.*` is applied to the text from the `value` attribute to test for a match.",
				"The assertion passes only if the text from the `value` attribute matches the pattern `^Lorem ipsum dolor.*`; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:Match --Expected:^Lorem ipsum dolor.*}}",
				"locator": "Xpath",
				"onAttribute": "value",
				"onElement": "//textarea[@id='content']",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Attribute 'value' empty",
						"Attribute 'value' not found",
						"Element not found",
						"Incorrect Id usage",
						"Regex match failure",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the element text"
					],
					"expected_result": "The assertion passes only if the text from the `value` attribute matches the pattern `^Lorem ipsum dolor.*`.",
					"notes": "Validation is based solely on the text from the `value` attribute. A regular expression `^Lorem ipsum dolor.*` is applied directly to this text to test for a match. If the pattern does not match, the assertion fails.",
					"test_case": "element_text_match_validation_id_content_value",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttributeCheck",
					"ElementText",
					"RegexValidation",
					"Validation"
				]
			},
			"description": [
				"### Element Text Match Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed text from the `value` attribute of the textarea element identified by the Id `content` matches the expected pattern `^Lorem ipsum dolor.*`.",
				"The validation is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"A regular expression `^Lorem ipsum dolor.*` is applied to the text from the `value` attribute to test for a match.",
				"The assertion passes only if the text from the `value` attribute matches the pattern `^Lorem ipsum dolor.*`; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:Match --Expected:^Lorem ipsum dolor.*}}",
				"locator": "Id",
				"onAttribute": "value",
				"onElement": "content",
				"pluginName": "Assert"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Attribute 'value' empty",
						"Attribute 'value' not found",
						"Element not found",
						"Incorrect CSS selector usage",
						"Regex match failure",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the element text"
					],
					"expected_result": "The assertion passes only if the text from the `value` attribute matches the pattern `^Lorem ipsu$`.",
					"notes": "Validation is based solely on the text from the `value` attribute. A regular expression `(?s)^(.{0,10})` extracts up to 10 characters into a capture group, which is converted to a string. A second regular expression `^Lorem ipsu$` is then applied to that capture group to test for an exact match. If the pattern does not match, the assertion fails.",
					"test_case": "element_text_match_validation_css_content_value",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttributeCheck",
					"ElementText",
					"RegexValidation",
					"Validation"
				]
			},
			"description": [
				"### Element Text Match Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed text from the `value` attribute of the textarea element identified by the CssSelector `textarea#content` matches the expected pattern `^Lorem ipsu$`.",
				"The validation is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(.{0,10})` is applied to the `value` attribute to extract up to 10 characters into a capture group.",
				"A regular expression `^Lorem ipsu$` is then applied to the extracted 10-character capture group to test for an exact match.",
				"The assertion passes only if the text from the `value` attribute matches the pattern `^Lorem ipsu$`; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:Match --Expected:^Lorem ipsu$}}",
				"locator": "CssSelector",
				"onAttribute": "value",
				"onElement": "textarea#content",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,10})"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Attribute 'value' empty",
						"Attribute 'value' not found",
						"Element not found",
						"Incorrect Xpath indexing or attribute usage",
						"Regex match failure",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the element text"
					],
					"expected_result": "The assertion passes only if the text from the `value` attribute matches the pattern `^Lorem ipsu$`.",
					"notes": "Validation is based solely on the text from the `value` attribute. A regular expression `(?s)^(.{0,10})` extracts up to 10 characters into a capture group, which is converted to a string. A second regular expression `^Lorem ipsu$` is then applied to that capture group to test for an exact match. If the pattern does not match, the assertion fails.",
					"test_case": "element_text_match_validation_xpath_content_value",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttributeCheck",
					"ElementText",
					"RegexValidation",
					"Validation"
				]
			},
			"description": [
				"### Element Text Match Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed text from the `value` attribute of the textarea element identified by the Xpath locator `//textarea[@id='content']` matches the expected pattern `^Lorem ipsu$`.",
				"The validation is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(.{0,10})` is applied to the `value` attribute to extract up to 10 characters into a capture group.",
				"A regular expression `^Lorem ipsu$` is then applied to the extracted 10-character capture group to test for an exact match.",
				"The assertion passes only if the text from the `value` attribute matches the pattern `^Lorem ipsu$`; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:Match --Expected:^Lorem ipsu$}}",
				"locator": "Xpath",
				"onAttribute": "value",
				"onElement": "//textarea[@id='content']",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,10})"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Attribute 'value' empty",
						"Attribute 'value' not found",
						"Element not found",
						"Incorrect Id usage",
						"Regex match failure",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the element text"
					],
					"expected_result": "The assertion passes only if the text from the `value` attribute matches the pattern `^Lorem ipsu$`.",
					"notes": "Validation is based solely on the text from the `value` attribute. A regular expression `(?s)^(.{0,10})` extracts up to 10 characters into a capture group, which is converted to a string. A second regular expression `^Lorem ipsu$` is then applied to that capture group to test for an exact match. If the pattern does not match, the assertion fails.",
					"test_case": "element_text_match_validation_id_content_value",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttributeCheck",
					"ElementText",
					"RegexValidation",
					"Validation"
				]
			},
			"description": [
				"### Element Text Match Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed text from the `value` attribute of the textarea element identified by the Id `content` matches the expected pattern `^Lorem ipsu$`.",
				"The validation is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(.{0,10})` is applied to the `value` attribute to extract up to 10 characters into a capture group.",
				"A regular expression `^Lorem ipsu$` is then applied to the extracted 10-character capture group to test for an exact match.",
				"The assertion passes only if the text from the `value` attribute matches the pattern `^Lorem ipsu$`; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:Match --Expected:^Lorem ipsu$}}",
				"locator": "Id",
				"onAttribute": "value",
				"onElement": "content",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,10})"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect CSS selector usage",
						"Regex match occurs when it shouldn't",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the element text"
					],
					"expected_result": "The assertion passes only if the text does not match the pattern `^Lorem ipsum dolor.*`.",
					"notes": "Validation is based solely on the element's visible text content. A regular expression `^Lorem ipsum dolor.*` is applied directly to this text to test for a non-match. If the pattern matches, the assertion fails.",
					"test_case": "element_text_notmatch_validation_css_content",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementText",
					"RegexValidation",
					"Validation"
				]
			},
			"description": [
				"### Element Text NotMatch Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed text from the element identified by the CssSelector `div#content` does not match the expected pattern `^Lorem ipsum dolor.*`.",
				"The validation is based solely on the element's visible text content, excluding any HTML markup or tags.",
				"A regular expression `^Lorem ipsum dolor.*` is applied to the visible text to test for a non-match.",
				"The assertion passes only if the text does not match the pattern `^Lorem ipsum dolor.*`; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:NotMatch --Expected:^Lorem ipsum dolor.*}}",
				"locator": "CssSelector",
				"onElement": "div#content",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect Xpath indexing or attribute usage",
						"Regex match occurs when it shouldn't",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the element text"
					],
					"expected_result": "The assertion passes only if the text does not match the pattern `^Lorem ipsum dolor.*`.",
					"notes": "Validation is based solely on the element's visible text content. A regular expression `^Lorem ipsum dolor.*` is applied directly to this text to test for a non-match. If the pattern matches, the assertion fails.",
					"test_case": "element_text_notmatch_validation_xpath_content",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementText",
					"RegexValidation",
					"Validation"
				]
			},
			"description": [
				"### Element Text NotMatch Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed text from the element identified by the Xpath locator `//div[@id='content']` does not match the expected pattern `^Lorem ipsum dolor.*`.",
				"The validation is based solely on the element's visible text content, excluding any HTML markup or tags.",
				"A regular expression `^Lorem ipsum dolor.*` is applied to the visible text to test for a non-match.",
				"The assertion passes only if the text does not match the pattern `^Lorem ipsum dolor.*`; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:NotMatch --Expected:^Lorem ipsum dolor.*}}",
				"locator": "Xpath",
				"onElement": "//div[@id='content']",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect Id usage",
						"Regex match occurs when it shouldn't",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the element text"
					],
					"expected_result": "The assertion passes only if the text does not match the pattern `^Lorem ipsum dolor.*`.",
					"notes": "Validation is based solely on the element's visible text content. A regular expression `^Lorem ipsum dolor.*` is applied directly to this text to test for a non-match. If the pattern matches, the assertion fails.",
					"test_case": "element_text_notmatch_validation_id_content",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementText",
					"RegexValidation",
					"Validation"
				]
			},
			"description": [
				"### Element Text NotMatch Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed text from the element identified by the Id `content` does not match the expected pattern `^Lorem ipsum dolor.*`.",
				"The validation is based solely on the element's visible text content, excluding any HTML markup or tags.",
				"A regular expression `^Lorem ipsum dolor.*` is applied to the visible text to test for a non-match.",
				"The assertion passes only if the text does not match the pattern `^Lorem ipsum dolor.*`; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:NotMatch --Expected:^Lorem ipsum dolor.*}}",
				"locator": "Id",
				"onElement": "content",
				"pluginName": "Assert"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect CSS selector usage",
						"Regex match occurs when it shouldn't",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the element text"
					],
					"expected_result": "The assertion passes only if the extracted 10-character capture group does not match the pattern `^Lorem ipsu$`.",
					"notes": "Validation is based solely on the element's visible text content. A regular expression `(?s)^(.{0,10})` extracts up to 10 characters into a capture group, which is then tested against the pattern `^Lorem ipsu$` for a non-match.",
					"test_case": "element_text_notmatch_validation_css_content",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementText",
					"RegexValidation",
					"Validation"
				]
			},
			"description": [
				"### Element Text NotMatch Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed text from the element identified by the CssSelector `div#content` does not match the expected pattern `^Lorem ipsu$`.",
				"The validation is based solely on the element's visible text content, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(.{0,10})` is applied to the visible text to extract up to 10 characters into a capture group.",
				"A regular expression `^Lorem ipsu$` is then applied to the extracted 10-character capture group to test for a non-match.",
				"The assertion passes only if the extracted 10-character capture group does not match the pattern `^Lorem ipsu$`; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:NotMatch --Expected:^Lorem ipsu$}}",
				"locator": "CssSelector",
				"onElement": "div#content",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,10})"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect Xpath indexing or attribute usage",
						"Regex match occurs when it shouldn't",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the element text"
					],
					"expected_result": "The assertion passes only if the extracted 10-character capture group does not match the pattern `^Lorem ipsu$`.",
					"notes": "Validation is based solely on the element's visible text content. A regular expression `(?s)^(.{0,10})` extracts up to 10 characters into a capture group, which is then tested against the pattern `^Lorem ipsu$` for a non-match.",
					"test_case": "element_text_notmatch_validation_xpath_content",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementText",
					"RegexValidation",
					"Validation"
				]
			},
			"description": [
				"### Element Text NotMatch Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed text from the element identified by the Xpath locator `//div[@id='content']` does not match the expected pattern `^Lorem ipsu$`.",
				"The validation is based solely on the element's visible text content, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(.{0,10})` is applied to the visible text to extract up to 10 characters into a capture group.",
				"A regular expression `^Lorem ipsu$` is then applied to the extracted 10-character capture group to test for a non-match.",
				"The assertion passes only if the extracted 10-character capture group does not match the pattern `^Lorem ipsu$`; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:NotMatch --Expected:^Lorem ipsu$}}",
				"locator": "Xpath",
				"onElement": "//div[@id='content']",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,10})"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Incorrect Id usage",
						"Regex match occurs when it shouldn't",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the element text"
					],
					"expected_result": "The assertion passes only if the extracted 10-character capture group does not match the pattern `^Lorem ipsu$`.",
					"notes": "Validation is based solely on the element's visible text content. A regular expression `(?s)^(.{0,10})` extracts up to 10 characters into a capture group, which is then tested against the pattern `^Lorem ipsu$` for a non-match.",
					"test_case": "element_text_notmatch_validation_id_content",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementText",
					"RegexValidation",
					"Validation"
				]
			},
			"description": [
				"### Element Text NotMatch Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed text from the element identified by the Id `content` does not match the expected pattern `^Lorem ipsu$`.",
				"The validation is based solely on the element's visible text content, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(.{0,10})` is applied to the visible text to extract up to 10 characters into a capture group.",
				"A regular expression `^Lorem ipsu$` is then applied to the extracted 10-character capture group to test for a non-match.",
				"The assertion passes only if the extracted 10-character capture group does not match the pattern `^Lorem ipsu$`; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:NotMatch --Expected:^Lorem ipsu$}}",
				"locator": "Id",
				"onElement": "content",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,10})"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Attribute 'value' empty",
						"Attribute 'value' not found",
						"Element not found",
						"Incorrect CSS selector usage",
						"Regex match occurs when it shouldn't",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the attribute value"
					],
					"expected_result": "The assertion passes only if the text from the `value` attribute does not match the pattern `^Lorem ipsum dolor.*`.",
					"notes": "Validation is based solely on the text from the `value` attribute. A regular expression `^Lorem ipsum dolor.*` is applied to this text to test for a non-match. If the pattern matches, the assertion fails.",
					"test_case": "element_text_notmatch_validation_css_content_value",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttributeCheck",
					"ElementText",
					"RegexValidation",
					"Validation"
				]
			},
			"description": [
				"### Element Text NotMatch Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed text from the `value` attribute of the textarea element identified by the CssSelector `textarea#content` does not match the expected pattern `^Lorem ipsum dolor.*`.",
				"The validation is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"A regular expression `^Lorem ipsum dolor.*` is applied to the text from the `value` attribute to test for a non-match.",
				"The assertion passes only if the text from the `value` attribute does not match the pattern `^Lorem ipsum dolor.*`; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:NotMatch --Expected:^Lorem ipsum dolor.*}}",
				"locator": "CssSelector",
				"onAttribute": "value",
				"onElement": "textarea#content",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Attribute 'value' empty",
						"Attribute 'value' not found",
						"Element not found",
						"Incorrect Xpath indexing or attribute usage",
						"Regex match occurs when it shouldn't",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the attribute value"
					],
					"expected_result": "The assertion passes only if the text from the `value` attribute does not match the pattern `^Lorem ipsum dolor.*`.",
					"notes": "Validation is based solely on the text from the `value` attribute. A regular expression `^Lorem ipsum dolor.*` is applied to this text to test for a non-match. If the pattern matches, the assertion fails.",
					"test_case": "element_text_notmatch_validation_xpath_content_value",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttributeCheck",
					"ElementText",
					"RegexValidation",
					"Validation"
				]
			},
			"description": [
				"### Element Text NotMatch Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed text from the `value` attribute of the textarea element identified by the Xpath locator `//textarea[@id='content']` does not match the expected pattern `^Lorem ipsum dolor.*`.",
				"The validation is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"A regular expression `^Lorem ipsum dolor.*` is applied to the text from the `value` attribute to test for a non-match.",
				"The assertion passes only if the text from the `value` attribute does not match the pattern `^Lorem ipsum dolor.*`; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:NotMatch --Expected:^Lorem ipsum dolor.*}}",
				"locator": "Xpath",
				"onAttribute": "value",
				"onElement": "//textarea[@id='content']",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Attribute 'value' empty",
						"Attribute 'value' not found",
						"Element not found",
						"Incorrect Id usage",
						"Regex match occurs when it shouldn't",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the attribute value"
					],
					"expected_result": "The assertion passes only if the text from the `value` attribute does not match the pattern `^Lorem ipsum dolor.*`.",
					"notes": "Validation is based solely on the text from the `value` attribute. A regular expression `^Lorem ipsum dolor.*` is applied to this text to test for a non-match. If the pattern matches, the assertion fails.",
					"test_case": "element_text_notmatch_validation_id_content_value",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttributeCheck",
					"ElementText",
					"RegexValidation",
					"Validation"
				]
			},
			"description": [
				"### Element Text NotMatch Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed text from the `value` attribute of the textarea element identified by the Id `content` does not match the expected pattern `^Lorem ipsum dolor.*`.",
				"The validation is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"A regular expression `^Lorem ipsum dolor.*` is applied to the text from the `value` attribute to test for a non-match.",
				"The assertion passes only if the text from the `value` attribute does not match the pattern `^Lorem ipsum dolor.*`; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:NotMatch --Expected:^Lorem ipsum dolor.*}}",
				"locator": "Id",
				"onAttribute": "value",
				"onElement": "content",
				"pluginName": "Assert"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Attribute 'value' empty",
						"Attribute 'value' not found",
						"Element not found",
						"Incorrect CSS selector usage",
						"Regex match occurs when it shouldn't",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the attribute value"
					],
					"expected_result": "The assertion passes only if the text from the `value` attribute does not match the pattern `^Lorem ipsu$`.",
					"notes": "Validation is based solely on the text from the `value` attribute. A regular expression `(?s)^(.{0,10})` extracts up to 10 characters into a capture group, which is converted to a string. A second regular expression `^Lorem ipsu$` is then applied to that capture group to test for a non-match. If the pattern matches, the assertion fails.",
					"test_case": "element_text_notmatch_validation_css_content_value",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttributeCheck",
					"ElementText",
					"RegexValidation",
					"Validation"
				]
			},
			"description": [
				"### Element Text NotMatch Validation Using CssSelector",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed text from the `value` attribute of the textarea element identified by the CssSelector `textarea#content` does not match the expected pattern `^Lorem ipsu$`.",
				"The validation is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(.{0,10})` is applied to the `value` attribute to extract up to 10 characters into a capture group.",
				"A regular expression `^Lorem ipsu$` is then applied to the extracted 10-character capture group to test for a non-match.",
				"The assertion passes only if the text from the `value` attribute does not match the pattern `^Lorem ipsu$`; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:NotMatch --Expected:^Lorem ipsu$}}",
				"locator": "CssSelector",
				"onAttribute": "value",
				"onElement": "textarea#content",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,10})"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Attribute 'value' empty",
						"Attribute 'value' not found",
						"Element not found",
						"Incorrect Xpath indexing or attribute usage",
						"Regex match occurs when it shouldn't",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the attribute value"
					],
					"expected_result": "The assertion passes only if the text from the `value` attribute does not match the pattern `^Lorem ipsu$`.",
					"notes": "Validation is based solely on the text from the `value` attribute. A regular expression `(?s)^(.{0,10})` extracts up to 10 characters into a capture group, which is converted to a string. A second regular expression `^Lorem ipsu$` is then applied to that capture group to test for a non-match. If the pattern matches, the assertion fails.",
					"test_case": "element_text_notmatch_validation_xpath_content_value",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttributeCheck",
					"ElementText",
					"RegexValidation",
					"Validation"
				]
			},
			"description": [
				"### Element Text NotMatch Validation Using Xpath",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed text from the `value` attribute of the textarea element identified by the Xpath locator `//textarea[@id='content']` does not match the expected pattern `^Lorem ipsu$`.",
				"The validation is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(.{0,10})` is applied to the `value` attribute to extract up to 10 characters into a capture group.",
				"A regular expression `^Lorem ipsu$` is then applied to the extracted 10-character capture group to test for a non-match.",
				"The assertion passes only if the text from the `value` attribute does not match the pattern `^Lorem ipsu$`; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:NotMatch --Expected:^Lorem ipsu$}}",
				"locator": "Xpath",
				"onAttribute": "value",
				"onElement": "//textarea[@id='content']",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,10})"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Attribute 'value' empty",
						"Attribute 'value' not found",
						"Element not found",
						"Incorrect Id usage",
						"Regex match occurs when it shouldn't",
						"Unexpected DOM structure",
						"Whitespace or formatting differences in the attribute value"
					],
					"expected_result": "The assertion passes only if the text from the `value` attribute does not match the pattern `^Lorem ipsu$`.",
					"notes": "Validation is based solely on the text from the `value` attribute. A regular expression `(?s)^(.{0,10})` extracts up to 10 characters into a capture group, which is converted to a string. A second regular expression `^Lorem ipsu$` is then applied to that capture group to test for a non-match. If the pattern matches, the assertion fails.",
					"test_case": "element_text_notmatch_validation_id_content_value",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"ElementAttributeCheck",
					"ElementText",
					"RegexValidation",
					"Validation"
				]
			},
			"description": [
				"### Element Text NotMatch Validation Using Id",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed text from the `value` attribute of the textarea element identified by the Id `content` does not match the expected pattern `^Lorem ipsu$`.",
				"The validation is based solely on the text from the `value` attribute, excluding any HTML markup or tags.",
				"A regular expression `(?s)^(.{0,10})` is applied to the `value` attribute to extract up to 10 characters into a capture group.",
				"A regular expression `^Lorem ipsu$` is then applied to the extracted 10-character capture group to test for a non-match.",
				"The assertion passes only if the text from the `value` attribute does not match the pattern `^Lorem ipsu$`; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementText --Operator:NotMatch --Expected:^Lorem ipsu$}}",
				"locator": "Id",
				"onAttribute": "value",
				"onElement": "content",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,10})"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Page title missing",
						"Unexpected page load issues",
						"Unexpected whitespace or formatting in the page title"
					],
					"expected_result": "The assertion passes only if the page title exactly matches 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. 42.'.",
					"notes": "Validation is based solely on the page title string. If the title differs in any way, including whitespace or formatting, the assertion fails.",
					"test_case": "page_title_equal_validation",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"PageTitle",
					"Validation"
				]
			},
			"description": [
				"### Page Title Equal Validation",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed page title is equal to the expected text 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. 42.'.",
				"The validation is based solely on the page title, excluding any HTML markup or tags.",
				"The assertion passes only if the page title exactly matches the expected text; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:PageTitle --Operator:Equal --Expected:Lorem ipsum dolor sit amet, consectetur adipiscing elit. 42.}}",
				"pluginName": "Assert"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Page title missing",
						"Regex extraction failure",
						"Unexpected page load issues",
						"Unexpected whitespace or formatting in the page title"
					],
					"expected_result": "The assertion passes only if the extracted 10-character capture group exactly matches 'Lorem ipsu'.",
					"notes": "Validation is based solely on the page title string. A regular expression `(?s)^(.{0,10})` extracts up to 10 characters into a capture group, which is then converted to a string and compared to the expected value. If extraction fails or the texts differ, the assertion fails.",
					"test_case": "page_title_equal_validation_regex",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"PageTitle",
					"RegexExtraction",
					"RegexValidation",
					"Validation"
				]
			},
			"description": [
				"### Page Title Equal Validation With Extraction",
				"",
				"The validation is based solely on the page title, excluding any HTML markup or tags.",
				"This example demonstrates how the Assert plugin verifies that the computed page title, after extracting up to 10 characters, matches the expected text 'Lorem ipsu'.",
				"A regular expression `(?s)^(.{0,10})` is applied to the page title to extract up to 10 characters into a capture group.",
				"The assertion passes only if the extracted 10-character capture group exactly matches 'Lorem ipsu'; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:PageTitle --Operator:Equal --Expected:Lorem ipsu}}",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,10})"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Page title missing",
						"Unexpected page load issues",
						"Unexpected whitespace or formatting in the page title"
					],
					"expected_result": "The assertion passes only if the page title differs from 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. 42.'.",
					"notes": "Validation is based solely on the page title string. Any difference in content, whitespace, or formatting causes the assertion to pass; exact match causes failure.",
					"test_case": "page_title_not_equal_validation",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"PageTitle",
					"Validation"
				]
			},
			"description": [
				"### Page Title NotEqual Validation",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed page title is not equal to the expected text 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. 42.'.",
				"The validation is based solely on the page title, excluding any HTML markup or tags.",
				"The assertion passes only if the page title differs from the expected text; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:PageTitle --Operator:NotEqual --Expected:Lorem ipsum dolor sit amet, consectetur adipiscing elit. 42.}}",
				"pluginName": "Assert"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Page title missing",
						"Regex extraction failure",
						"Unexpected page load issues",
						"Unexpected whitespace or formatting in the page title"
					],
					"expected_result": "The assertion passes only if the extracted 10-character capture group does not equal 'Lorem ipsu'.",
					"notes": "Validation is based solely on the page title string. A regular expression `(?s)^(.{0,10})` extracts up to 10 characters into a capture group, which is then converted to a string and compared to the expected value. If they are equal, the assertion fails.",
					"test_case": "page_title_not_equal_validation_regex",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"PageTitle",
					"RegexExtraction",
					"RegexValidation",
					"Validation"
				]
			},
			"description": [
				"### Page Title NotEqual Validation With Extraction",
				"",
				"The validation is based solely on the page title, excluding any HTML markup or tags.",
				"This example demonstrates how the Assert plugin verifies that the computed page title, after extracting up to 10 characters, does not equal the expected text 'Lorem ipsu'.",
				"A regular expression `(?s)^(.{0,10})` is applied to the page title to extract up to 10 characters into a capture group.",
				"The assertion passes only if that extracted 10-character capture group does not equal 'Lorem ipsu'; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:PageTitle --Operator:NotEqual --Expected:Lorem ipsu}}",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,10})"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"No numeric content in page title",
						"Page title missing",
						"Regex extraction failure",
						"Unexpected page load issues",
						"Unexpected whitespace or formatting in the page title"
					],
					"expected_result": "The assertion passes only if the extracted number is greater than 42.",
					"notes": "Validation is based solely on the page title string. A regular expression `\\d+` extracts the first numeric sequence into a capture group, which is then converted to a number for comparison. If extraction fails or the number is not greater than 42, the assertion fails.",
					"test_case": "page_title_greater_validation_regex",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"PageTitle",
					"RegexExtraction",
					"RegexValidation",
					"Validation"
				]
			},
			"description": [
				"### Page Title Greater Validation With Extraction",
				"",
				"The validation is based solely on the page title, excluding any HTML markup or tags.",
				"This example demonstrates how the Assert plugin verifies that the numeric value extracted from the page title is greater than the expected value 42.",
				"A regular expression `\\d+` is applied to the page title to extract the first numeric sequence into a capture group.",
				"The assertion passes only if that extracted number is greater than 42; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:PageTitle --Operator:Greater --Expected:42}}",
				"pluginName": "Assert",
				"regularExpression": "\\d+"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"No numeric content in page title",
						"Page title missing",
						"Regex extraction failure",
						"Unexpected page load issues",
						"Unexpected whitespace or formatting in the page title"
					],
					"expected_result": "The assertion passes only if the extracted number is greater than or equal to 42.",
					"notes": "Validation is based solely on the page title string. A regular expression `\\d+` extracts the first numeric sequence into a capture group, which is then converted to a number for comparison. If extraction fails or the number is less than 42, the assertion fails.",
					"test_case": "page_title_greater_equal_validation_regex",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"PageTitle",
					"RegexExtraction",
					"RegexValidation",
					"Validation"
				]
			},
			"description": [
				"### Page Title Greater Equal Validation With Extraction",
				"",
				"The validation is based solely on the page title, excluding any HTML markup or tags.",
				"This example demonstrates how the Assert plugin verifies that the numeric value extracted from the page title is greater than or equal to the expected value 42.",
				"A regular expression `\\d+` is applied to the page title to extract the first numeric sequence into a capture group.",
				"The assertion passes only if that extracted number is greater than or equal to 42; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:PageTitle --Operator:GreaterEqual --Expected:42}}",
				"pluginName": "Assert",
				"regularExpression": "\\d+"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"No numeric content in page title",
						"Page title missing",
						"Regex extraction failure",
						"Unexpected page load issues",
						"Unexpected whitespace or formatting in the page title"
					],
					"expected_result": "The assertion passes only if the extracted number is lower than 42.",
					"notes": "Validation is based solely on the page title string. A regular expression `\\d+` extracts the first numeric sequence into a capture group, which is then converted to a number for comparison. If extraction fails or the number is not lower than 42, the assertion fails.",
					"test_case": "page_title_lower_validation_regex",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"PageTitle",
					"RegexExtraction",
					"RegexValidation",
					"Validation"
				]
			},
			"description": [
				"### Page Title Lower Validation With Extraction",
				"",
				"The validation is based solely on the page title, excluding any HTML markup or tags.",
				"This example demonstrates how the Assert plugin verifies that the numeric value extracted from the page title is lower than the expected value 42.",
				"A regular expression `\\d+` is applied to the page title to extract the first numeric sequence into a capture group.",
				"The assertion passes only if that extracted number is lower than 42; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:PageTitle --Operator:Lower --Expected:42}}",
				"pluginName": "Assert",
				"regularExpression": "\\d+"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"No numeric content in page title",
						"Page title missing",
						"Regex extraction failure",
						"Unexpected page load issues",
						"Unexpected whitespace or formatting in the page title"
					],
					"expected_result": "The assertion passes only if the extracted number is lower than or equal to 42.",
					"notes": "Validation is based solely on the page title string. A regular expression `\\d+` extracts the first numeric sequence into a capture group, which is then converted to a number for comparison. If extraction fails or the number is greater than 42, the assertion fails.",
					"test_case": "page_title_lower_equal_validation_regex",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"PageTitle",
					"RegexExtraction",
					"RegexValidation",
					"Validation"
				]
			},
			"description": [
				"### Page Title Lower Equal Validation With Extraction",
				"",
				"The validation is based solely on the page title, excluding any HTML markup or tags.",
				"This example demonstrates how the Assert plugin verifies that the numeric value extracted from the page title is lower than or equal to the expected value 42.",
				"A regular expression `\\d+` is applied to the page title to extract the first numeric sequence into a capture group.",
				"The assertion passes only if that extracted number is lower than or equal to 42; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:PageTitle --Operator:LowerEqual --Expected:42}}",
				"pluginName": "Assert",
				"regularExpression": "\\d+"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Page title missing",
						"Regex match failure",
						"Unexpected page load issues",
						"Unexpected whitespace or formatting in the page title"
					],
					"expected_result": "The assertion passes only if the page title matches the pattern `^Lorem ipsum dolor.*`.",
					"notes": "Validation is based solely on the page title string. A regular expression `^Lorem ipsum dolor.*` is applied directly to the full title to test for a match. If the pattern does not match, the assertion fails.",
					"test_case": "page_title_match_validation",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"PageTitle",
					"RegexValidation",
					"Validation"
				]
			},
			"description": [
				"### Page Title Match Validation",
				"",
				"This example demonstrates how the Assert plugin verifies that the computed page title matches the expected pattern `^Lorem ipsum dolor.*`.",
				"The validation is based solely on the page title, excluding any HTML markup or tags.",
				"A regular expression `^Lorem ipsum dolor.*` is applied to the page title to test for a match.",
				"The assertion passes only if the page title matches the pattern `^Lorem ipsum dolor.*`; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:PageTitle --Operator:Match --Expected:^Lorem ipsum dolor.*}}",
				"pluginName": "Assert"
			}
		},

		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Page title missing",
						"Regex extraction failure",
						"Unexpected page load issues",
						"Unexpected whitespace or formatting in the page title"
					],
					"expected_result": "The assertion passes only if the extracted 10-character capture group matches the pattern `^Lorem ipsu$`.",
					"notes": "Validation is based solely on the page title string. A regular expression `(?s)^(.{0,10})` extracts up to 10 characters into a capture group, which is then converted to a string. A second regular expression `^Lorem ipsu$` is applied to that capture group to test for an exact match. If the pattern does not match, the assertion fails.",
					"test_case": "page_title_match_validation_regex",
					"version": "1.0"
				},
				"labels": [
					"Assert",
					"PageTitle",
					"RegexExtraction",
					"RegexValidation",
					"Validation"
				]
			},
			"description": [
				"### Page Title Match Validation With Extraction",
				"",
				"The validation is based solely on the page title, excluding any HTML markup or tags.",
				"This example demonstrates how the Assert plugin verifies that the computed page title, after extracting up to 10 characters, matches the expected pattern `^Lorem ipsu$`.",
				"A regular expression `(?s)^(.{0,10})` is applied to the page title to extract up to 10 characters into a capture group.",
				"A regular expression `^Lorem ipsu$` is then applied to the extracted 10-character capture group to test for an exact match.",
				"The assertion passes only if the extracted 10-character capture group matches the pattern `^Lorem ipsu$`; otherwise, it fails."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:PageTitle --Operator:Match --Expected:^Lorem ipsu$}}",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,10})"
			}
		},

		{
			"description": [
				""
			],
			"rule": {
				"argument": "{{$ --Condition:PageTitle --Operator:NotMatch --Expected:^Lorem ipsum dolor.*}}",
				"pluginName": "Assert"
			}
		},
		{
			"description": [
				""
			],
			"rule": {
				"argument": "{{$ --Condition:PageTitle --Operator:NotMatch --Expected:^Lorem ipsu$}}",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,10})"
			}
		},

		{
			"description": [
				""
			],
			"rule": {
				"argument": "{{$ --Condition:PageUrl --Operator:Equal --Expected:https://example42.com/page/}}",
				"pluginName": "Assert"
			}
		},
		{
			"description": [
				""
			],
			"rule": {
				"argument": "{{$ --Condition:PageUrl --Operator:Equal --Expected:https://ex}}",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,10})"
			}
		},
		{
			"description": [
				""
			],
			"rule": {
				"argument": "{{$ --Condition:PageUrl --Operator:NotEqual --Expected:https://example42.com/page/}}",
				"pluginName": "Assert"
			}
		},
		{
			"description": [
				""
			],
			"rule": {
				"argument": "{{$ --Condition:PageUrl --Operator:NotEqual --Expected:https://ex}}",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,10})"
			}
		},
		{
			"description": [
				""
			],
			"rule": {
				"argument": "{{$ --Condition:PageUrl --Operator:Greater --Expected:42}}",
				"pluginName": "Assert",
				"regularExpression": "\\d+"
			}
		},
		{
			"description": [
				""
			],
			"rule": {
				"argument": "{{$ --Condition:PageUrl --Operator:GreaterEqual --Expected:42}}",
				"pluginName": "Assert",
				"regularExpression": "\\d+"
			}
		},
		{
			"description": [
				""
			],
			"rule": {
				"argument": "{{$ --Condition:PageUrl --Operator:Lower --Expected:42}}",
				"pluginName": "Assert",
				"regularExpression": "\\d+"
			}
		},
		{
			"description": [
				""
			],
			"rule": {
				"argument": "{{$ --Condition:PageUrl --Operator:LowerEqual --Expected:42}}",
				"pluginName": "Assert",
				"regularExpression": "\\d+"
			}
		},
		{
			"description": [
				""
			],
			"rule": {
				"argument": "{{$ --Condition:PageUrl --Operator:Match --Expected:^https://example42.com/page/$}}",
				"pluginName": "Assert"
			}
		},
		{
			"description": [
				""
			],
			"rule": {
				"argument": "{{$ --Condition:PageUrl --Operator:Match --Expected:^https://ex$}}",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,10})"
			}
		},
		{
			"description": [
				""
			],
			"rule": {
				"argument": "{{$ --Condition:PageUrl --Operator:NotMatch --Expected:^https://example42.com/page/$}}",
				"pluginName": "Assert"
			}
		},
		{
			"description": [
				""
			],
			"rule": {
				"argument": "{{$ --Condition:PageUrl --Operator:NotMatch --Expected:^https://ex$}}",
				"pluginName": "Assert",
				"regularExpression": "(?s)^(.{0,10})"
			}
		},
		{
			"description": [
				""
			],
			"rule": {
				"argument": "{{$ --Condition:WindowCount --Operator:Equal --Expected:1}}",
				"pluginName": "Assert"
			}
		},
		{
			"description": [
				""
			],
			"rule": {
				"argument": "{{$ --Condition:WindowCount --Operator:NotEqual --Expected:1}}",
				"pluginName": "Assert"
			}
		},
		{
			"description": [
				""
			],
			"rule": {
				"argument": "{{$ --Condition:WindowCount --Operator:Greater --Expected:1}}",
				"pluginName": "Assert"
			}
		},
		{
			"description": [
				""
			],
			"rule": {
				"argument": "{{$ --Condition:WindowCount --Operator:GreaterEqual --Expected:1}}",
				"pluginName": "Assert"
			}
		},
		{
			"description": [
				""
			],
			"rule": {
				"argument": "{{$ --Condition:WindowCount --Operator:LowerEqual --Expected:1}}",
				"pluginName": "Assert"
			}
		},
		{
			"description": [
				""
			],
			"rule": {
				"argument": "{{$ --Condition:WindowCount --Operator:Lower --Expected:1}}",
				"pluginName": "Assert"
			}
		},
		{
			"description": [
				""
			],
			"rule": {
				"argument": "{{$ --Condition:WindowCount --Operator:Match --Expected:^1\\d+?$}}",
				"pluginName": "Assert"
			}
		},
		{
			"description": [
				""
			],
			"rule": {
				"argument": "{{$ --Condition:WindowCount --Operator:NotMatch --Expected:^1\\d+?$}}",
				"pluginName": "Assert"
			}
		},
		{
			"description": [
				""
			],
			"rule": {
				"argument": "{{$ --Condition:Text --Operator:Equal --Expected:ExpectedValue}}",
				"onElement": "{{$Get-Parameter --Name:MyParameter --Scope:Session}}",
				"pluginName": "Assert"
			}
		},
		{
			"description": [
				""
			],
			"rule": {
				"argument": "{{$ --Condition:Text --Operator:NotEqual --Expected:Static Text}}",
				"onElement": "Static Text",
				"pluginName": "Assert"
			}
		},
		{
			"description": [
				""
			],
			"rule": {
				"argument": "{{$ --Condition:Text --Operator:Match --Expected:\\d{3}-\\d{2}-\\d{4}}}",
				"onElement": "123-45-6789",
				"pluginName": "Assert"
			}
		},
		{
			"description": [
				""
			],
			"rule": {
				"argument": "{{$ --Condition:Text --Operator:NotMatch --Expected:\\d{3}-\\d{2}-\\d{4}}}",
				"onElement": "123-45-6789",
				"pluginName": "Assert"
			}
		},
		{
			"description": [
				""
			],
			"rule": {
				"argument": "{{$ --Condition:Text --Operator:Greater --Expected:10}}",
				"onElement": "20",
				"pluginName": "Assert"
			}
		},
		{
			"description": [
				""
			],
			"rule": {
				"argument": "{{$ --Condition:Text --Operator:Lower --Expected:10}}",
				"onElement": "5",
				"pluginName": "Assert"
			}
		},
		{
			"description": [
				""
			],
			"rule": {
				"argument": "{{$ --Condition:Text --Operator:GreaterEqual --Expected:10}}",
				"onElement": "10",
				"pluginName": "Assert"
			}
		},
		{
			"description": [
				""
			],
			"rule": {
				"argument": "{{$ --Condition:Text --Operator:LowerEqual --Expected:10}}",
				"onElement": "10",
				"pluginName": "Assert"
			}
		},
		{
			"description": [
				""
			],
			"rule": {
				"argument": "{{$ --Condition:Text --Operator:Equal --Expected:1000}}",
				"onElement": "1000",
				"pluginName": "Assert",
				"regularExpression": "\\d+"
			}
		}
	],
	"key": "Assert",
	"manifestVersion": 4,
	"parameters": [
		{
			"description": [
				"Serves as a dynamic specifier for the type of validation or verification to be executed in automation rules. ",
				"This parameter is particularly noteworthy for its adaptability, as its available values are dynamically generated based on the plugins of type `Assertion` within G4™ engine.",
				"",
				"### Dynamic Condition Values",
				"",
				"The `Condition` parameter allows the rule to express various types of assertions or conditions dynamically. ",
				"These dynamic conditions are derived from the plugins of type `Assertion` available in the G4™ framework. ",
				"Each assertion plugin contributes unique conditions, reflecting diverse validation scenarios.",
				"",
				"### Plugin-Driven Flexibility",
				"",
				"As new assertion plugins are introduced or existing ones are updated, the `Condition` parameter seamlessly incorporates these changes. ",
				"This ensures that automation rules remain adaptable and can leverage the latest assertion capabilities without requiring explicit modifications to the rule structures."
			],
			"mandatory": true,
			"name": "Condition",
			"type": "Assertion"
		},
		{
			"description": [
				"Defines the value or condition that the automation rule expects to encounter or validate. This value represents the anticipated state of the UI element or the result of an action."
			],
			"mandatory": false,
			"name": "Expected",
			"type": "Any"
		},
		{
			"description": [
				"Serves as a dynamic specifier that defines the type of comparison or action to be executed during automation. ",
				"This parameter is particularly noteworthy for its adaptability, as its available values are dynamically generated based on the plugins of type `Operator` within G4™ engine.",
				"",
				"### Dynamic Operator Values",
				"",
				"The `Operator` parameter dynamically incorporates values based on plugins of type `Operator` within the automation framework. ",
				"Each operator plugin introduces specific operators for use in rule configurations.",
				"",
				"### Plugin-Driven Flexibility",
				"",
				"As new operator plugins are introduced or existing ones are updated, the `Operator` parameter seamlessly incorporates these changes. ",
				"This ensures that automation rules remain adaptable and can leverage the latest operator capabilities without requiring explicit modifications to the rule structures."
			],
			"mandatory": false,
			"name": "Operator",
			"type": "Operator"
		}
	],
	"pluginType": "Action",
	"properties": [
		{
			"description": [
				"Specifies the condition and parameters for the assertion to be performed by a particular plugin. ",
				"It is a key part of the rule definition and influences how the validation or verification is carried out."
			],
			"mandatory": true,
			"name": "Argument",
			"type": "Expression"
		},
		{
			"default": "Xpath",
			"description": [
				"Specifies how the automation framework should identify or locate the target element within the UI. ",
				"It defines the strategy or method for selecting the element on which the assertion or action will be performed."
			],
			"mandatory": false,
			"name": "Locator",
			"type": "String"
		},
		{
			"description": [
				"Specifies the attribute of the target element on which the assertion or action should be performed. ",
				"It defines which attribute of the identified element will be the focus of the validation or manipulation."
			],
			"mandatory": false,
			"name": "OnAttribute",
			"type": "String"
		},
		{
			"description": [
				"Specifies the identifier or selector for the element on which the assertion or action should be performed. ",
				"It essentially points to the target element within the web page or application."
			],
			"mandatory": false,
			"name": "OnElement",
			"type": "String"
		},
		{
			"description": [
				"Allows you to apply a regular expression pattern to manipulate or extract specific information from the value of an attribute or the element text before the actual validation or action is performed. ",
				"It is particularly useful when you want to perform more complex checks or extract specific substrings from attribute values."
			],
			"mandatory": false,
			"name": "RegularExpression",
			"type": "Regex"
		}
	],
	"protocol": {
		"apiDocumentation": "None",
		"w3c": "None"
	},
	"platforms": [
		"Any"
	],
	"summary": [
		"The `Assert` plugin automates the validation of expected conditions during the execution of automation scripts, ensuring the reliability and accuracy of automated processes.",
		"It creates and sends appropriate assertion plugins based on provided data, supporting various conditions, operators, and expected values for flexible assertions.",
		"Key features include data extraction, dynamic assertion handling, and exception handling, capturing and managing context information and supporting data extractions.",
		"Common use cases include process validation, error handling, and logging in RPA, as well as functional testing, regression testing, and data validation in automation testing."
	]
}
