{
	"author": {
		"name": "Roei Sabag",
		"link": "https://www.linkedin.com/in/roei-sabag-247aa18/"
	},
	"categories": [
		"Validations"
	],
	"context": {
		"integration": {
			"sequentialWorkflow": {
				"$type": "Action",
				"componentType": "task",
				"iconProvider": "assert",
				"model": "ActionRuleModel"
			},
			"rag": {
				"description": "The Assert plugin automates the validation of expected conditions during automation to ensure reliable and accurate process execution. It supports dynamic assertion handling, regex-based data extraction, and robust exception management.",
				"qa": [
					{
						"question": "What is the Assert plugin?",
						"answer": "It is a tool that verifies critical conditions in automation workflows by ensuring UI elements and data values match predefined expectations."
					},
					{
						"question": "How does the Assert plugin enhance workflow reliability?",
						"answer": "By performing dynamic condition checks and using flexible operators, it quickly identifies discrepancies to ensure processes perform as intended."
					},
					{
						"question": "What key features does the Assert plugin offer?",
						"answer": "It provides flexible assertions, regex-based data extraction, dynamic validation handling, and robust exception management."
					},
					{
						"question": "What types of validations can the Assert plugin perform?",
						"answer": "It can validate element visibility, text equality, numerical comparisons, attribute values, and pattern matching using regular expressions."
					},
					{
						"question": "What are the primary parameters used by the Assert plugin?",
						"answer": "The key parameters are 'Condition' for the type of validation, 'Expected' for the anticipated value, and 'Operator' for the comparison logic."
					},
					{
						"question": "What configurable properties does the Assert plugin provide?",
						"answer": "It offers properties such as 'Argument' for the assertion expression, 'Locator' (defaulting to Xpath) for element identification, 'OnAttribute' for attribute checks, 'OnElement' for element selection, and 'RegularExpression' for pattern-based validation."
					},
					{
						"question": "Who is the author of the Assert plugin?",
						"answer": "It was developed by Roei Sabag, an experienced professional in automation and RPA solutions."
					},
					{
						"question": "Which category and platforms does the Assert plugin support?",
						"answer": "The plugin falls under the 'Validations' category and is designed to work on any platform."
					},
					{
						"question": "What is the integration context of the Assert plugin?",
						"answer": "It is integrated into the G4 API Automation Engine, operating within sequential workflows to execute validation actions seamlessly."
					},
					{
						"question": "What is the manifest version for this plugin?",
						"answer": "The manifest version is 4, indicating the current schema iteration used for configuration."
					},
					{
						"question": "Does the Assert plugin adhere to any specific protocols?",
						"answer": "No specific protocols such as API documentation or W3C standards are defined; it operates within the proprietary G4 engine framework."
					},
					{
						"question": "What are the typical use cases for the Assert plugin?",
						"answer": "The Assert plugin is used for process validation in RPA by confirming that expected UI elements and data values are present. In automation testing, it verifies that application features function correctly and data is accurately processed."
					},
					{
						"question": "How does the Assert plugin support both RPA and automation testing?",
						"answer": "It offers flexible, dynamic validations that can be applied to various UI elements and data points, ensuring both process success in RPA and functional accuracy in testing scenarios."
					},
					{
						"question": "When should I integrate the Assert plugin into my workflow?",
						"answer": "Incorporate the Assert plugin whenever you need to verify that critical conditions are met—such as confirming element visibility, validating text or numerical values, or ensuring that attributes match expected patterns—to maintain overall process integrity."
					},
					{
						"question": "How does the Assert plugin improve error handling and troubleshooting?",
						"answer": "By validating key conditions early, it detects errors and discrepancies promptly, allowing for rapid diagnosis and correction of issues, thereby enhancing the reliability of your automation processes."
					},
					{
						"question": "How does the Assert plugin fit into the overall architecture of the G4 API Automation Engine?",
						"answer": "It serves as a critical validation checkpoint within sequential workflows, ensuring that each automation step meets the required conditions before the process proceeds."
					},
					{
						"question": "How do sequential workflows enhance the functionality of the Assert plugin?",
						"answer": "They provide an ordered execution environment that allows the Assert plugin to systematically verify conditions at each step, ensuring smooth and reliable automation."
					},
					{
						"question": "What is the significance of context integration for the Assert plugin?",
						"answer": "Context integration allows you to embed the Assert plugin into external tools, such as the sequential-workflow-designer. It provides a flexible mechanism where you can add any object under the integration field, enabling seamless connectivity with external systems and expanding the plugin's usability."
					},
					{
						"question": "How does the Assert plugin interact with other components in the automation framework?",
						"answer": "It works in tandem with related assertion, operator, and action plugins, using shared parameters and dynamic checks to maintain overall process integrity and error handling."
					},
					{
						"question": "What are the best practices for configuring the Assert plugin?",
						"answer": "When configuring the Assert plugin, define clear and specific conditions, choose precise selectors, and set appropriate operators to ensure validations accurately reflect your expectations. Regularly review and update these settings as your UI or data requirements evolve."
					},
					{
						"question": "How can I optimize my automation workflow using the Assert plugin?",
						"answer": "Integrate the Assert plugin at critical checkpoints in your workflow to verify that each process step meets expected conditions. This proactive validation helps catch errors early and maintains overall process reliability."
					},
					{
						"question": "What should I consider when setting parameters for the Assert plugin?",
						"answer": "Ensure that the 'Condition', 'Expected', and 'Operator' parameters are clearly defined and aligned with your validation logic. Use accurate element selectors and, if needed, regular expressions to extract and compare values effectively."
					},
					{
						"question": "How can I troubleshoot assertion failures effectively?",
						"answer": "Review your configuration by verifying the conditions, selectors, and expected values. Utilize logging or error messages provided by the plugin to identify mismatches, and adjust parameters as necessary to resolve discrepancies."
					}
				]
			}
		}
	},
	"description": [
		"### Purpose",
		"",
		"The `Assert` plugin is a crucial component in the world of Robotic Process Automation (RPA) and automation testing. ",
		"Its primary purpose is to facilitate the validation of expected conditions during the execution of automation scripts. ",
		"By asserting specific conditions, it ensures that the application or system under test behaves as anticipated, contributing to the overall reliability and accuracy of automated processes.",
		"",
		"### Key Features and Functionality",
		"",
		"| Feature                             | Description                                                                                               |",
		"|-------------------------------------|-----------------------------------------------------------------------------------------------------------|",
		"| Meta Action                         | Creates and sends appropriate assertion plugins based on the provided data.                               |",
		"| Flexible Assertions                 | Supports various conditions, operators, and expected values for assertions.                               |",
		"| Data Extraction                     | Can apply regular expressions and handle element attributes for precise data extraction before assertion. |",
		"| Dynamic Assertion Handling          | Handles dynamic conditions during automation.                                                             |",
		"| Exception Handling                  | Captures and manages exceptions during the assertion process, preventing script failures.                 |",
		"| Extractions and Context Information | Captures and manages context information and supports data extractions. |",
		"",
		"### Usages in RPA",
		"",
		"| Use Case                   | Description                                                                                                                              |",
		"|----------------------------|------------------------------------------------------------------------------------------------------------------------------------------|",
		"| Process Validation         | Ensure automated processes execute successfully by validating key conditions, such as form submission success or expected data presence. |",
		"| Error Handling and Logging | Captures exceptions and logs relevant information for diagnosing issues and understanding failures.                                      |",
		"",
		"### Usages in Automation Testing",
		"",
		"| Use Case           | Description                                                                                                     |",
		"|--------------------|-----------------------------------------------------------------------------------------------------------------|",
		"| Functional Testing | Validate the correctness of application features, such as element presence or data display.                     |",
		"| Regression Testing | Verify that changes do not adversely impact expected outcomes, ensuring existing functionalities remain intact. |",
		"| Data Validation    | Assert the correctness of data manipulations, calculations, or transfers within the application.                |"
	],
	"examples": [
		{
			"description": [
				"Assert that the Text condition equals 'Success'.",
				"",
				"The Assert plugin is utilized to perform this validation, taking the actual value from the 'OnElement' property which can be a parameter, data row, or some other dynamic data. ",
				"If the condition is met, the assertion passes; otherwise, it fails."
			],
			"rule": {
				"argument": "{{$ --Condition:Text --Operator:Equal --Expected:Success}}",
				"onElement": "{{$Get-Parameter --Name:MyParam --Scope:Session}}",
				"pluginName": "Assert"
			}
		},
		{
			"description": [
				"Assert that an alert exists.",
				"",
				"The Assert plugin is utilized to perform this validation. ",
				"If an alert exists, the assertion passes; otherwise, it fails."
			],
			"rule": {
				"argument": "{{$ --Condition:AlertExists}}",
				"pluginName": "Assert"
			}
		},
		{
			"description": [
				"Assert that the text of the element identified by the CSS selector '#greeting' matches the regular expression '^Hello.*'.",
				"",
				"The Assert plugin is utilized to perform this validation, providing a means to check the text content of UI elements. ",
				"If the condition is met, the assertion passes; otherwise, it fails."
			],
			"rule": {
				"argument": "{{$ --Condition:ElementText --Operator:Match --Expected:^Hello.*}}",
				"locator": "CssSelector",
				"onElement": "#greeting",
				"pluginName": "Assert"
			}
		},
		{
			"description": [
				"Assert that the 'class' attribute of the element identified by the CSS selector '#elementId' does not match the regular expression '^hidden$'.",
				"",
				"The Assert plugin is utilized to perform this validation, providing a means to check attribute values of UI elements. ",
				"If the condition is met, the assertion passes; otherwise, it fails."
			],
			"rule": {
				"argument": "{{$ --Condition:ElementText --Operator:NotMatch --Expected:^hidden$}}",
				"locator": "CssSelector",
				"onAttribute": "class",
				"onElement": "#elementId",
				"pluginName": "Assert"
			}
		},
		{
			"description": [
				"Assert that the text length of the element identified by the CSS selector '#description' is greater than 5.",
				"",
				"The Assert plugin is utilized to perform this validation, providing a means to check the text length of UI elements. ",
				"If the condition is met, the assertion passes; otherwise, it fails."
			],
			"rule": {
				"argument": "{{$ --Condition:ElementTextLength --Operator:Greater --Expected:5}}",
				"locator": "CssSelector",
				"onElement": "#description",
				"pluginName": "Assert"
			}
		},
		{
			"description": [
				"Assert that the element identified by the CSS selector '#hiddenElement' is visible.",
				"",
				"The Assert plugin is utilized to perform this validation, providing a means to check the visibility state of UI elements. ",
				"If the condition is met, the assertion passes; otherwise, it fails."
			],
			"rule": {
				"argument": "{{$ --Condition:ElementVisible}}",
				"locator": "CssSelector",
				"onElement": "#hiddenElement",
				"pluginName": "Assert"
			}
		},
		{
			"description": [
				"Assert that the numeric value of the element identified by the CSS selector '#price' is less than or equal to 100.",
				"",
				"The Assert plugin is utilized to perform this validation. ",
				"If the condition is met, the assertion passes; otherwise, it fails."
			],
			"rule": {
				"argument": "{{$ --Condition:ElementText --Operator:LowerEqual --Expected:100}}",
				"locator": "CssSelector",
				"onElement": "#price",
				"pluginName": "Assert"
			}
		},
		{
			"description": [
				"Assert that the numeric value of the element identified by the CSS selector '#score' is greater than or equal to 85.",
				"",
				"The Assert plugin is utilized to perform this validation. ",
				"If the condition is met, the assertion passes; otherwise, it fails."
			],
			"rule": {
				"argument": "{{$ --Condition:ElementText --Operator:GreaterEqual --Expected:85}}",
				"locator": "CssSelector",
				"onElement": "#score",
				"pluginName": "Assert"
			}
		},
		{
			"description": [
				"Assert that the value of the `value` attribute of the element with the CSS selector `#ElementActive` is equal to `Foo Bar`.",
				"",
				"The Assert plugin is utilized to perform this validation, providing a means to check attribute values of UI elements. ",
				"If the condition is met, the assertion passes; otherwise, it fails."
			],
			"rule": {
				"argument": "{{$ --Condition:ElementText --Operator:Equal --Expected:Foo Bar}}",
				"locator": "CssSelector",
				"onAttribute": "value",
				"onElement": "#ElementActive",
				"pluginName": "Assert"
			}
		},
		{
			"description": [
				"Assert that the value of the `value` attribute of the element with the CSS selector `#ElementActive` is equal to `Bar`, applying the regular expression `B.*$` before validation.",
				"",
				"The Assert plugin is utilized to perform this validation, providing a means to check attribute values with regular expression patterns. ",
				"If the condition is met post-regular expression application, the assertion passes; otherwise, it fails."
			],
			"rule": {
				"argument": "{{$ --Condition:ElementText --Operator:Equal --Expected:Bar}}",
				"locator": "CssSelector",
				"onAttribute": "value",
				"onElement": "#ElementActive",
				"pluginName": "Assert",
				"regularExpression": "B.*$"
			}
		},
		{
			"description": [
				"Validate the absence of an alert in the current browser session.",
				"",
				"The Assert plugin is utilized to perform this validation, ensuring that no alert is currently present. ",
				"If the condition is met, the assertion passes; otherwise, it fails."
			],
			"rule": {
				"argument": "{{$ --Condition:AlertNotExists}}",
				"pluginName": "Assert"
			}
		},
		{
			"description": [
				"Validate that the text content of the element identified by the CSS selector `#ElementText` is equal to the expected value `ElementText`.",
				"",
				"The Assert plugin is utilized to perform this validation, providing a means to check the text content of UI elements. ",
				"If the condition is met, the assertion passes; otherwise, it fails."
			],
			"rule": {
				"argument": "{{$ --Condition:ElementText --Operator:Equal --Expected:ElementText}}",
				"locator": "CssSelector",
				"onElement": "#ElementText",
				"pluginName": "Assert"
			}
		},
		{
			"description": [
				"Assert that the numeric text content of the element identified by the CSS selector '#amount' matches the extracted numbers using the regular expression '\\d+' and is equal to '100'.",
				"",
				"The Assert plugin is utilized to perform this validation, applying a regular expression to extract numbers before asserting the extracted value. ",
				"If the condition is met after the extraction, the assertion passes; otherwise, it fails."
			],
			"rule": {
				"argument": "{{$ --Condition:ElementText --Operator:Equal --Expected:100}}",
				"locator": "CssSelector",
				"onElement": "#amount",
				"pluginName": "Assert",
				"regularExpression": "\\d+"
			}
		}
	],
	"key": "Assert",
	"manifestVersion": 4,
	"parameters": [
		{
			"description": [
				"Serves as a dynamic specifier for the type of validation or verification to be executed in automation rules. ",
				"This parameter is particularly noteworthy for its adaptability, as its available values are dynamically generated based on the plugins of type `Assertion` within G4™ engine.",
				"",
				"### Dynamic Condition Values",
				"",
				"The `Condition` parameter allows the rule to express various types of assertions or conditions dynamically. ",
				"These dynamic conditions are derived from the plugins of type `Assertion` available in the G4™ framework. ",
				"Each assertion plugin contributes unique conditions, reflecting diverse validation scenarios.",
				"",
				"### Plugin-Driven Flexibility",
				"",
				"As new assertion plugins are introduced or existing ones are updated, the `Condition` parameter seamlessly incorporates these changes. ",
				"This ensures that automation rules remain adaptable and can leverage the latest assertion capabilities without requiring explicit modifications to the rule structures."
			],
			"mandatory": true,
			"name": "Condition",
			"type": "Assertion"
		},
		{
			"description": [
				"Defines the value or condition that the automation rule expects to encounter or validate. This value represents the anticipated state of the UI element or the result of an action."
			],
			"mandatory": false,
			"name": "Expected",
			"type": "Any"
		},
		{
			"description": [
				"Serves as a dynamic specifier that defines the type of comparison or action to be executed during automation. ",
				"This parameter is particularly noteworthy for its adaptability, as its available values are dynamically generated based on the plugins of type `Operator` within G4™ engine.",
				"",
				"### Dynamic Operator Values",
				"",
				"The `Operator` parameter dynamically incorporates values based on plugins of type `Operator` within the automation framework. ",
				"Each operator plugin introduces specific operators for use in rule configurations.",
				"",
				"### Plugin-Driven Flexibility",
				"",
				"As new operator plugins are introduced or existing ones are updated, the `Operator` parameter seamlessly incorporates these changes. ",
				"This ensures that automation rules remain adaptable and can leverage the latest operator capabilities without requiring explicit modifications to the rule structures."
			],
			"mandatory": false,
			"name": "Operator",
			"type": "Operator"
		}
	],
	"pluginType": "Action",
	"properties": [
		{
			"description": [
				"Specifies the condition and parameters for the assertion to be performed by a particular plugin. ",
				"It is a key part of the rule definition and influences how the validation or verification is carried out."
			],
			"mandatory": true,
			"name": "Argument",
			"type": "Expression"
		},
		{
			"default": "Xpath",
			"description": [
				"Specifies how the automation framework should identify or locate the target element within the UI. ",
				"It defines the strategy or method for selecting the element on which the assertion or action will be performed."
			],
			"mandatory": false,
			"name": "Locator",
			"type": "String"
		},
		{
			"description": [
				"Specifies the attribute of the target element on which the assertion or action should be performed. ",
				"It defines which attribute of the identified element will be the focus of the validation or manipulation."
			],
			"mandatory": false,
			"name": "OnAttribute",
			"type": "String"
		},
		{
			"description": [
				"Specifies the identifier or selector for the element on which the assertion or action should be performed. ",
				"It essentially points to the target element within the web page or application."
			],
			"mandatory": false,
			"name": "OnElement",
			"type": "String"
		},
		{
			"description": [
				"Allows you to apply a regular expression pattern to manipulate or extract specific information from the value of an attribute or the element text before the actual validation or action is performed. ",
				"It is particularly useful when you want to perform more complex checks or extract specific substrings from attribute values."
			],
			"mandatory": false,
			"name": "RegularExpression",
			"type": "Regex"
		}
	],
	"protocol": {
		"apiDocumentation": "None",
		"w3c": "None"
	},
	"platforms": [
		"Any"
	],
	"summary": [
		"The `Assert` plugin automates the validation of expected conditions during the execution of automation scripts, ensuring the reliability and accuracy of automated processes.",
		"It creates and sends appropriate assertion plugins based on provided data, supporting various conditions, operators, and expected values for flexible assertions.",
		"Key features include data extraction, dynamic assertion handling, and exception handling, capturing and managing context information and supporting data extractions.",
		"Common use cases include process validation, error handling, and logging in RPA, as well as functional testing, regression testing, and data validation in automation testing."
	]
}
