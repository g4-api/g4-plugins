{
	"author": {
		"name": "Roei Sabag",
		"link": "https://www.linkedin.com/in/roei-sabag-247aa18/"
	},
	"categories": [
		"Loops"
	],
	"context": {
		"integration": {
			"sequentialWorkflow": {
				"$type": "Action",
				"componentType": "container",
				"iconProvider": "loop",
				"model": "ActionRuleModel"
			},
			"rag": {
				"description": "The InvokeForEachLoop plugin automates repetitive tasks by finding collections of elements with a specified locator and executing defined actions on each item. It supports alternative locators, nested loops, and exception logging to maintain reliable workflows in RPA and automated testing.",
				"qa": [
					{
						"question": "What is the InvokeForEachLoop plugin?",
						"answer": "It is an automation action that locates a set of elements using a locator and runs a series of child actions on each element in sequence."
					},
					{
						"question": "Why is InvokeForEachLoop useful?",
						"answer": "It simplifies repetitive tasks such as data processing or UI interaction testing by looping through elements automatically rather than scripting each action manually."
					},
					{
						"question": "What are the main features of InvokeForEachLoop?",
						"answer": "Key features include element iteration, sequential execution, alternative locator support, nested loop capability, and detailed exception logging."
					},
					{
						"question": "How do you specify which elements to iterate over?",
						"answer": "You set the locator (for example Xpath or CSS selector) and the onElement value to identify each item; to run on the full collection use onElement \".\" and omit locator."
					},
					{
						"question": "How do nested loops work in InvokeForEachLoop?",
						"answer": "Each InvokeForEachLoop always processes its own collection of elements based on its locator; an inner loop does not inherit or filter the outer loop's elements."
					},
					{
						"question": "Can I pass the current element from the outer loop into the inner loop?",
						"answer": "No. Each loop independently queries the DOM and does not maintain a reference to another loop's current element. Sharing that context would require additional state management and element reference handling, which is beyond the plugin's design."
					},
					{
						"question": "How is InvokeForEachLoop integrated in external workflow designers?",
						"answer": "The manifest defines a sequentialWorkflow integration under context.integration, mapping it to a container component with an ActionRuleModel for task execution."
					},
					{
						"question": "What best practices improve loop reliability?",
						"answer": "Use precise locators, test nested loops separately, handle edge cases where no elements are found, and configure stop-on-error only when necessary."
					},
					{
						"question": "How does InvokeForEachLoop handle exceptions during execution?",
						"answer": "It adds an exception entry to the response and log stream for each failure but continues the loop by default unless the workflow is explicitly set to stop on error."
					},
					{
						"question": "What fields define an InvokeForEachLoop rule schema?",
						"answer": "A rule includes $type, pluginName, locator (optional), onElement, and rules (an array of child action definitions)."
					},
					{
						"question": "Which categories and platforms does this plugin support?",
						"answer": "It is categorized under Loops, supports Any platform, and is defined as an Action pluginType."
					},
					{
						"question": "How can you run the plugin on the entire collection without a locator?",
						"answer": "Set onElement to \".\" and remove the locator entry so that actions apply to every item found by the loop rule."
					}
				]
			}
		}
	},
	"description": [
		"### Purpose",
		"",
		"The InvokeForEachLoop plugin finds all elements matching your locator and runs a set of actions on each one. To operate on the entire collection, set onElement to \".\" and omit the locator. You can also specify a different locator to decide where actions take place. It supports nested loops for multi-level workflows, making it easier to automate repetitive tasks in RPA and automated testing.",
		"",
		"### Key Features and Functionality",
		"",
		"| Feature                     | Description                                                         |",
		"|-----------------------------|---------------------------------------------------------------------|",
		"| Element Iteration           | Finds all elements matching the locator and loops through each one. |",
		"| Sequential Execution        | Runs actions in order on each element for a clear workflow.         |",
		"| Alternative Locator Support | Lets you specify a different locator for where actions run.         |",
		"| Nested Loop Capability      | Allows loops inside loops for multi-level workflows.                |",
		"",
		"### Usages in RPA",
		"",
		"| Use Case            | Description                                                                       |",
		"|---------------------|-----------------------------------------------------------------------------------|",
		"| Data Processing     | Process each item in a list by running data entry, validation, or transformation. |",
		"| Batch Operations    | Perform a series of tasks on groups of files, records, or transactions in order.  |",
		"| Dynamic Interaction | Work with UI items created at runtime by clicking, typing, or checking content.   |",
		"",
		"### Usages in Automation Testing",
		"",
		"| Use Case               | Description                                                                 |",
		"|------------------------|-----------------------------------------------------------------------------|",
		"| Element Verification   | Check each UI element to confirm its state or value matches expectations.   |",
		"| Data-Driven Testing    | Run tests across different data sets by looping through inputs and actions. |",
		"| UI Interaction Testing | Simulate user steps like clicks or form entries on each element.            |"
	],
	"examples": [
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Empty elements list",
						"Incorrect XPath usage",
						"Loop action or rule failure",
						"Unexpected DOM structure"
					],
					"expected_result": "All pagination buttons matching the XPath selector are processed with Click; exceptions are recorded but do not halt execution.",
					"notes": "The InvokeForEachLoop plugin locates all elements matching the XPath selector `//ul[@id='Pagination1']/li/button` and performs a Click on each. If no elements are found, an exception is logged and the loop is skipped. If a Click action throws an exception, it is recorded and the loop continues. The process only stops on configured stop-on-error.",
					"test_case": "invoke_foreach_click_pagination_xpath",
					"version": "1.0"
				},
				"labels": [
					"InvokeForEachLoop",
					"Loop"
				]
			},
			"description": [
				"### Click Each Pagination Button Using XPath",
				"",
				"This example demonstrates how the InvokeForEachLoop plugin iterates over each button element matching the XPath selector `//ul[@id='Pagination1']/li/button` and performs a Click action on each.",
				"The inner rule uses `.` to refer to the current element in the loop context.",
				"If no buttons are found, an exception is added and the loop is skipped. ",
				"If a Click action fails on any element, an exception is recorded and execution continues to the next element. ",
				"The overall process does not stop unless explicitly configured to stop on error."
			],
			"rule": {
				"$type": "Action",
				"onElement": "//ul[@id='Pagination1']/li/button",
				"pluginName": "InvokeForEachLoop",
				"rules": [
					{
						"$type": "Action",
						"onElement": ".",
						"pluginName": "Click"
					}
				]
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Empty elements list",
						"Incorrect CSS selector usage",
						"Loop action or rule failure",
						"Unexpected DOM structure"
					],
					"expected_result": "All pagination buttons matching the CSS selector are processed with Click; exceptions are recorded but do not halt execution.",
					"notes": "The InvokeForEachLoop plugin locates all elements matching the CSS selector `#Pagination1 > li > button` and performs a Click on each. If no elements are found, an exception is logged and the loop is skipped. If a Click action throws an exception, it is recorded and the loop continues. The process only stops on configured stop-on-error.",
					"test_case": "invoke_foreach_click_pagination_css",
					"version": "1.0"
				},
				"labels": [
					"InvokeForEachLoop",
					"Loop"
				]
			},
			"description": [
				"### Click Each Pagination Button Using CSS Selector",
				"",
				"This example demonstrates how the InvokeForEachLoop plugin iterates over each button element matching the CSS selector `#Pagination1 > li > button` and performs a Click action on each.",
				"The inner rule uses `.` to refer to the current element in the loop context.",
				"If no buttons are found, an exception is added and the loop is skipped. ",
				"If a Click action fails on any element, an exception is recorded and execution continues to the next element. ",
				"The overall process does not stop unless explicitly configured to stop on error."
			],
			"rule": {
				"$type": "Action",
				"locator": "CssSelector",
				"onElement": "#Pagination1 > li > button",
				"pluginName": "InvokeForEachLoop",
				"rules": [
					{
						"$type": "Action",
						"onElement": ".",
						"pluginName": "Click"
					}
				]
			}
		},
		{
			"context": {
				"annotations": {
					"test_case": "invoke_foreach_click_pagination_li_xpath_inner_xpath",
					"expected_result": "Each `<li>` matching `//ul[@class='pagination']/li` has its child button clicked; exceptions are recorded but do not halt execution.",
					"notes": "InvokeForEachLoop locates each `<li>` via XPath and performs a Click on its child via relative XPath. Exceptions for missing elements or click failures are logged without stopping the loop.",
					"edge_cases": [
						"Empty elements list",
						"Incorrect XPath usage",
						"Loop action or rule failure",
						"Unexpected DOM structure"
					],
					"version": "1.0"
				},
				"labels": [
					"InvokeForEachLoop",
					"Loop"
				]
			},
			"description": [
				"### Click Each Pagination Button Using XPath and Relative XPath",
				"",
				"This example demonstrates how the InvokeForEachLoop plugin iterates over each `<li>` element matching the XPath selector `//ul[@class='pagination']/li` and performs a Click action on its child button element selected via relative XPath `./button`.",
				"The inner rule uses the XPath `./button` to reference the button within the current list item.",
				"If no elements are found, an exception is logged and the loop is skipped. ",
				"If a Click action within any iteration throws an exception, it is recorded and the loop continues. ",
				"The process does not stop unless configured to stop on error."
			],
			"rule": {
				"$type": "Action",
				"onElement": "//ul[@class='pagination']/li",
				"pluginName": "InvokeForEachLoop",
				"rules": [
					{
						"$type": "Action",
						"onElement": "./button",
						"pluginName": "Click"
					}
				]
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Empty elements list",
						"Incorrect XPath usage",
						"Loop action or rule failure",
						"Unexpected DOM structure"
					],
					"expected_result": "Each `<li>` matching `//ul[@class='pagination']/li` has its child button clicked; exceptions are recorded but do not halt execution.",
					"notes": "InvokeForEachLoop locates each `<li>` via XPath and performs a Click on its child via CSS selector. Exceptions for missing elements or click failures are logged without stopping the loop.",
					"test_case": "invoke_foreach_click_pagination_li_xpath_inner_css",
					"version": "1.0"
				},
				"labels": [
					"InvokeForEachLoop",
					"Loop"
				]
			},
			"description": [
				"### Click Each Pagination Button Using XPath and CSS Selector",
				"",
				"This example demonstrates how the InvokeForEachLoop plugin iterates over each `<li>` element matching the XPath selector `//ul[@class='pagination']/li` and performs a Click action on its child button element selected via CSS selector `button`.",
				"The inner rule uses the CSS selector `button` to reference the button within the current list item.",
				"If no elements are found, an exception is logged and the loop is skipped. ",
				"If a Click action within any iteration throws an exception, it is recorded and the loop continues. ",
				"The process does not stop unless configured to stop on error."
			],
			"rule": {
				"$type": "Action",
				"onElement": "//ul[@class='pagination']/li",
				"pluginName": "InvokeForEachLoop",
				"rules": [
					{
						"$type": "Action",
						"locator": "CssSelector",
						"onElement": "button",
						"pluginName": "Click"
					}
				]
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Empty elements list",
						"Incorrect CSS selector usage",
						"Loop action or rule failure",
						"Unexpected DOM structure"
					],
					"expected_result": "Each `<li>` matching `.pagination > li` has its child button clicked; exceptions are recorded but do not halt execution.",
					"notes": "InvokeForEachLoop locates each `<li>` via CSS selector and performs a Click on its child via relative XPath. Exceptions for missing elements or click failures are logged without stopping the loop.",
					"test_case": "invoke_foreach_click_pagination_li_css_inner_xpath",
					"version": "1.0"
				},
				"labels": [
					"InvokeForEachLoop",
					"Loop"
				]
			},
			"description": [
				"### Click Each Pagination Button Using CSS Selector and Relative XPath",
				"",
				"This example demonstrates how the InvokeForEachLoop plugin iterates over each `<li>` element matching the CSS selector `.pagination > li` and performs a Click action on its child button element selected via relative XPath `./button`.",
				"The inner rule uses the XPath `./button` to reference the button within the current list item.",
				"If no elements are found, an exception is logged and the loop is skipped. ",
				"If a Click action within any iteration throws an exception, it is recorded and the loop continues. ",
				"The process does not stop unless configured to stop on error."
			],
			"rule": {
				"$type": "Action",
				"locator": "CssSelector",
				"onElement": ".pagination > li",
				"pluginName": "InvokeForEachLoop",
				"rules": [
					{
						"$type": "Action",
						"onElement": "./button",
						"pluginName": "Click"
					}
				]
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Empty elements list",
						"Incorrect CSS selector usage",
						"Loop action or rule failure",
						"Unexpected DOM structure"
					],
					"expected_result": "Each `<li>` matching `.pagination > li` has its child button clicked; exceptions are recorded but do not halt execution.",
					"notes": "InvokeForEachLoop locates each `<li>` via CSS selector and performs a Click on its child via CSS selector. Exceptions for missing elements or click failures are logged without stopping the loop.",
					"test_case": "invoke_foreach_click_pagination_li_css_inner_css",
					"version": "1.0"
				},
				"labels": [
					"InvokeForEachLoop",
					"Loop"
				]
			},
			"description": [
				"### Click Each Pagination Button Using CSS Selector",
				"",
				"This example demonstrates how the InvokeForEachLoop plugin iterates over each `<li>` element matching the CSS selector `.pagination > li` and performs a Click action on its child button element selected via CSS selector `button`.",
				"The inner rule uses the CSS selector `button` to reference the button within the current list item.",
				"If no elements are found, an exception is logged and the loop is skipped. ",
				"If a Click action within any iteration throws an exception, it is recorded and the loop continues. ",
				"The process does not stop unless configured to stop on error."
			],
			"rule": {
				"$type": "Action",
				"locator": "CssSelector",
				"onElement": ".pagination > li",
				"pluginName": "InvokeForEachLoop",
				"rules": [
					{
						"$type": "Action",
						"locator": "CssSelector",
						"onElement": "button",
						"pluginName": "Click"
					}
				]
			}
		},
		{
			"context": {
				"annotations": {
					"test_case": "invoke_foreach_nested_xpath_xpath",
					"expected_result": "Each `button` under each matching `<ul>` is clicked; exceptions are recorded but do not halt execution.",
					"notes": "Uses nested InvokeForEachLoop: outer selects `<ul>` via XPath, inner selects buttons via relative XPath. Exceptions for missing elements or click failures are logged without stopping the loops.",
					"edge_cases": [
						"Empty elements list",
						"Empty inner elements list",
						"Incorrect XPath usage",
						"Loop action or rule failure",
						"Unexpected DOM structure"
					],
					"version": "1.0"
				},
				"labels": [
					"InvokeForEachLoop",
					"Loop"
				]
			},
			"description": [
				"### Nested InvokeForEachLoop With XPath Selectors",
				"",
				"This example demonstrates how the InvokeForEachLoop plugin first locates the `<ul>` element matching the XPath selector `//ul[@class='pagination']`, then within each such `<ul>`, iterates over each child `<li>/button` via `./li/button` and performs a Click action.",
				"The inner loop uses `./li/button` to reference the buttons relative to the current `<ul>` element.",
				"If no outer elements are found, an exception is logged and the outer loop is skipped. ",
				"If no inner elements are found, an exception is logged and the inner loop is skipped. ",
				"If any Click action throws an exception, it is recorded and execution continues. ",
				"The process does not stop unless configured to stop on error."
			],
			"rule": {
				"$type": "Action",
				"onElement": "//ul[@class='pagination']",
				"pluginName": "InvokeForEachLoop",
				"rules": [
					{
						"$type": "Action",
						"onElement": "./li/button",
						"pluginName": "InvokeForEachLoop",
						"rules": [
							{
								"$type": "Action",
								"pluginName": "Click"
							}
						]
					}
				]
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Empty elements list",
						"Empty inner elements list",
						"Incorrect CSS selector usage",
						"Loop action or rule failure",
						"Unexpected DOM structure"
					],
					"expected_result": "Each `button` under each matching `<ul>` is clicked; exceptions are recorded but do not halt execution.",
					"notes": "Uses nested InvokeForEachLoop: outer selects `<ul>` via XPath, inner selects buttons via CSS selector. Exceptions for missing elements or click failures are logged without stopping the loops.",
					"test_case": "invoke_foreach_nested_xpath_css",
					"version": "1.0"
				},
				"labels": [
					"InvokeForEachLoop",
					"Loop"
				]
			},
			"description": [
				"### Nested InvokeForEachLoop With XPath and CSS Selectors",
				"",
				"This example demonstrates how the InvokeForEachLoop plugin first locates the `<ul>` element matching the XPath selector `//ul[@class='pagination']`, then within each such `<ul>`, iterates over each child `li > button` via CSS selector and performs a Click action.",
				"The inner loop uses the CSS selector `li > button` to reference the button within the current list item.",
				"If no outer elements are found, an exception is logged and the outer loop is skipped. ",
				"If no inner elements are found, an exception is logged and the inner loop is skipped. ",
				"If any Click action throws an exception, it is recorded and execution continues. ",
				"The process does not stop unless configured to stop on error."
			],
			"rule": {
				"$type": "Action",
				"onElement": "//ul[@class='pagination']",
				"pluginName": "InvokeForEachLoop",
				"rules": [
					{
						"$type": "Action",
						"locator": "CssSelector",
						"onElement": "li > button",
						"pluginName": "InvokeForEachLoop",
						"rules": [
							{
								"$type": "Action",
								"pluginName": "Click"
							}
						]
					}
				]
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Empty elements list",
						"Empty inner elements list",
						"Incorrect CSS selector usage",
						"Loop action or rule failure",
						"Unexpected DOM structure"
					],
					"expected_result": "Each `button` under each matching container is clicked; exceptions are recorded but do not halt execution.",
					"notes": "Uses nested InvokeForEachLoop: outer selects containers via CSS selector, inner selects buttons via relative XPath. Exceptions for missing elements or click failures are logged without stopping the loops.",
					"test_case": "invoke_foreach_nested_css_xpath",
					"version": "1.0"
				},
				"labels": [
					"InvokeForEachLoop",
					"Loop"
				]
			},
			"description": [
				"### Nested InvokeForEachLoop With CSS Selector and Relative XPath",
				"",
				"This example demonstrates how the InvokeForEachLoop plugin first locates the container matching the CSS selector `.pagination`, then within each container, iterates over child buttons via relative XPath `./li/button` and performs a Click action.",
				"The inner loop uses `./li/button` to reference the buttons relative to the current container.",
				"If no outer elements are found, an exception is logged and the outer loop is skipped. ",
				"If no inner elements are found, an exception is logged and the inner loop is skipped. ",
				"If any Click action throws an exception, it is recorded and execution continues. ",
				"The process does not stop unless configured to stop on error."
			],
			"rule": {
				"$type": "Action",
				"locator": "CssSelector",
				"onElement": ".pagination",
				"pluginName": "InvokeForEachLoop",
				"rules": [
					{
						"$type": "Action",
						"onElement": "./li/button",
						"pluginName": "InvokeForEachLoop",
						"rules": [
							{
								"$type": "Action",
								"pluginName": "Click"
							}
						]
					}
				]
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Empty elements list",
						"Empty inner elements list",
						"Incorrect CSS selector usage",
						"Loop action or rule failure",
						"Unexpected DOM structure"
					],
					"expected_result": "Each `button` under each matching container is clicked; exceptions are recorded but do not halt execution.",
					"notes": "Uses nested InvokeForEachLoop: outer selects containers and inner selects buttons both via CSS selectors. Exceptions for missing elements or click failures are logged without stopping the loops.",
					"test_case": "invoke_foreach_nested_css_css",
					"version": "1.0"
				},
				"labels": [
					"InvokeForEachLoop",
					"Loop"
				]
			},
			"description": [
				"### Nested InvokeForEachLoop With CSS Selectors",
				"",
				"This example demonstrates how the InvokeForEachLoop plugin first locates the container matching the CSS selector `.pagination`, then within each container, iterates over child buttons via CSS selector `li > button` and performs a Click action.",
				"The inner loop uses the CSS selector `li > button` scoped to the current container.",
				"If no outer elements are found, an exception is logged and the outer loop is skipped. ",
				"If no inner elements are found, an exception is logged and the inner loop is skipped. ",
				"If any Click action throws an exception, it is recorded and execution continues. ",
				"The process does not stop unless configured to stop on error."
			],
			"rule": {
				"$type": "Action",
				"locator": "CssSelector",
				"onElement": ".pagination",
				"pluginName": "InvokeForEachLoop",
				"rules": [
					{
						"$type": "Action",
						"locator": "CssSelector",
						"onElement": "li > button",
						"pluginName": "InvokeForEachLoop",
						"rules": [
							{
								"$type": "Action",
								"pluginName": "Click"
							}
						]
					}
				]
			}
		}
	],
	"key": "InvokeForEachLoop",
	"manifestVersion": 4,
	"platforms": [
		"Any"
	],
	"pluginType": "Action",
	"properties": [
		{
			"default": "Xpath",
			"description": [
				"Chooses the method to find items in the user interface.",
				"Common options include Xpath, CSS, link text, and others.",
				"Default is Xpath unless another method is chosen."
			],
			"mandatory": false,
			"name": "Locator",
			"type": "String"
		},
		{
			"description": [
				"Specifies which element to use in the assertion.",
				"It tells the system where to find that element in the user interface.",
				"The assertion then runs on that element."
			],
			"mandatory": true,
			"name": "OnElement",
			"type": "String"
		},
		{
			"description": [
				"List of steps to run on each item.",
				"Each step applies to the current item or uses another method to find it if needed.",
				"The process follows these steps for every item."
			],
			"mandatory": true,
			"name": "Rules",
			"type": "Array"
		}
	],
	"protocol": {
		"apiDocumentation": "None",
		"w3c": "None"
	},
	"summary": [
		"The InvokeForEachLoop tool finds each item you specify and runs the steps you choose on every one.",
		"It can also run steps inside other steps to tackle more complex tasks."
	]
}
