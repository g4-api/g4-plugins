{
	"author": {
		"name": "Roei Sabag",
		"link": "https://www.linkedin.com/in/roei-sabag-247aa18/"
	},
	"categories": [
		"Loops"
	],
	"context": {
		"integration": {
			"sequentialWorkflow": {
				"$type": "Action",
				"componentType": "container",
				"iconProvider": "loop",
				"model": "ActionRuleModel"
			}
		}
	},
	"description": [
		"### Purpose",
		"",
		"The InvokeWhileLoop plugin runs actions repeatedly while a specified condition remains true and stops when the condition becomes false. It adapts to changing situations during execution and stops automatically if it takes too long. It also records data and performance details for each iteration.",
		"",
		"### Key Features and Functionality",
		"",
		"| Feature                      | Description                                                         |",
		"|------------------------------|---------------------------------------------------------------------|",
		"| Dynamic Iteration            | Runs steps in a loop that adapts to changing conditions at runtime. |",
		"| Conditional Execution        | Continues looping while your specified condition remains true.      |",
		"| Timeout Handling             | Stops the loop automatically if it exceeds a set time limit.        |",
		"| Execution Insights           | Records data and performance details during each iteration.         |"
		"",
		"### Usages in RPA",
		"",
		"| Use Case                   | Description                                                     |",
		"|----------------------------|-----------------------------------------------------------------|",
		"| Data Validation            | Checks data repeatedly until it meets your criteria.            |",
		"| Dynamic Process Automation | Automatically repeats tasks based on live conditions.           |",
		"| Conditional Flow Control   | Lets scripts change course by checking conditions during a run. |",
		"",
		"### Usages in Automation Testing",
		"",
		"| Use Case                   | Description                                                    |",
		"|----------------------------|----------------------------------------------------------------|",
		"| Dynamic Testing            | Keeps testing until the application reaches the desired state. |",
		"| Repetitive Task Automation | Repeats test steps until a condition is satisfied.             |",
		"| Conditional Flow Testing   | Allows tests to adapt on the fly based on changing conditions. |"
	],
	"examples": [
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Click action throws exception",
						"Condition initially false (loop never runs)",
						"ElementAttribute not found",
						"Loop action or rule failure",
						"Target element not found"
					],
					"expected_result": "Click actions on `#NextBtn1` are performed repeatedly until the `class` attribute of the target element matches `active`.",
					"notes": "InvokeWhileLoop checks the `class` attribute against regex `(?i)active`. While it does not match, it performs a Click on `#NextBtn1`. Exceptions for missing elements or click failures are logged without stopping the loop. Loop terminates when the condition fails or if stop-on-error is configured.",
					"test_case": "invoke_while_loop_class_notmatch_active_click_css",
					"version": "1.0"
				},
				"labels": [
					"ConditionalLoop",
					"InvokeWhileLoop",
					"Loop"
				]
			},
			"description": [
				"### Click Next While Not Active Using CSS Selector",
				"",
				"This example demonstrates how the InvokeWhileLoop plugin repeatedly checks the `class` attribute of the element matching XPath `//ul[@id='Pagination1']/li/button[.='6']`, and while it does not match the regex `(?i)active`, performs a Click action on the element matching CSS selector `#NextBtn1`.",
				"A regular expression `(?i)active` is applied to the `class` attribute to check for a case‑insensitive match.",
				"The loop continues until the condition no longer holds or if configured to stop on error.",
				"All conditions supported by Assert plugins (plugins with `Assert` as their plugin type) can be used here as well to control the loop."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementAttribute --Operator:NotMatch --Expected:(?i)active}}",
				"onAttribute": "class",
				"onElement": "//ul[@id='Pagination1']/li/button[.='6']",
				"pluginName": "InvokeWhileLoop",
				"rules": [
					{
						"$type": "Action",
						"locator": "CssSelector",
						"onElement": "#NextBtn1",
						"pluginName": "Click"
					}
				]
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Click action throws exception",
						"Condition initially false (loop never runs)",
						"ElementAttribute not found",
						"Loop action or rule failure",
						"Target element not found"
					],
					"expected_result": "Click actions on `//button[@id='NextBtn1']` are performed repeatedly until the `class` attribute of the target element matches `active`.",
					"notes": "InvokeWhileLoop checks the `class` attribute against regex `(?i)active`. While it does not match, it performs a Click on `//button[@id='NextBtn1']`. Exceptions for missing elements or click failures are logged without stopping the loop. Loop terminates when the condition fails or if stop-on-error is configured.",
					"test_case": "invoke_while_loop_class_notmatch_active_click_xpath",
					"version": "1.0"
				},
				"labels": [
					"ConditionalLoop",
					"InvokeWhileLoop",
					"Loop"
				]
			},
			"description": [
				"### Click Next While Not Active Using XPath",
				"",
				"This example demonstrates how the InvokeWhileLoop plugin repeatedly checks the `class` attribute of the element matching XPath `//ul[@id='Pagination1']/li/button[.='6']`, and while it does not match the regex `(?i)active`, performs a Click action on the element matching XPath `//button[@id='NextBtn1']`.",
				"A regular expression `(?i)active` is applied to the `class` attribute to check for a case‑insensitive match.",
				"The loop continues until the condition no longer holds or if configured to stop on error.",
				"All conditions supported by Assert plugins (plugins with `Assert` as their plugin type) can be used here as well to control the loop."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementAttribute --Operator:NotMatch --Expected:(?i)active}}",
				"onAttribute": "class",
				"onElement": "//ul[@id='Pagination1']/li/button[.='6']",
				"pluginName": "InvokeWhileLoop",
				"rules": [
					{
						"$type": "Action",
						"locator": "Xpath",
						"onElement": "//button[@id='NextBtn1']",
						"pluginName": "Click"
					}
				]
			}
		},










		{
			"description": [
				""
			],
			"rule": {
				"argument": "{{$ --Condition:ElementAttribute --Operator:Match --Expected:(?i)active}}",
				"onAttribute": "class",
				"onElement": "#Pagination1 > li:nth-child(6) > button",
				"pluginName": "InvokeWhileLoop",
				"rules": [
					{
						"locator": "CssSelector",
						"onElement": "#NextBtn1",
						"pluginName": "Click"
					}
				]
			}
		},
		{
			"description": [
				""
			],
			"rule": {
				"argument": "{{$ --Condition:ElementAttribute --Operator:Match --Expected:(?i)active}}",
				"onAttribute": "class",
				"onElement": "#Pagination1 > li:nth-child(6) > button",
				"pluginName": "InvokeWhileLoop",
				"rules": [
					{
						"locator": "CssSelector",
						"onElement": "//button[@id='NextBtn1']",
						"pluginName": "Click"
					}
				]
			}
		},







		{
			"description": [
				""
			],
			"rule": {
				"argument": "{{$ --Condition:ElementAttribute --Operator:Match --Expected:(?i)active}}",
				"onAttribute": "class",
				"onElement": "//ul[@id='Pagination1']/li/button[.='3']",
				"pluginName": "InvokeWhileLoop",
				"rules": [
					{
						"argument": "{{$ --Condition:ElementAttribute --Operator:Match --Expected:(?i)active}}",
						"onAttribute": "class",
						"onElement": "//ul[@id='Pagination2']/li/button[.='3']",
						"pluginName": "InvokeWhileLoop",
						"rules": [
							{
								"locator": "CssSelector",
								"onElement": "#NextBtn2",
								"pluginName": "Click"
							}
						]
					},
					{
						"locator": "CssSelector",
						"onElement": "#FirstBtn2",
						"pluginName": "Click"
					},
					{
						"locator": "CssSelector",
						"onElement": "#NextBtn1",
						"pluginName": "Click"
					}
				]
			}
		},




		{
			"description": [
				""
			],
			"rule": {
				"argument": "{{$ --Condition:ElementAttribute --Operator:Match --Expected:(?i)foo --Timeout:5000}}",
				"onAttribute": "class",
				"onElement": "//ul[@id='Pagination1']/li/button[.='6']",
				"pluginName": "InvokeWhileLoop",
				"rules": [
					{
						"locator": "CssSelector",
						"onElement": "#NextBtn1",
						"pluginName": "Click"
					}
				]
			}
		}
	],
	"key": "InvokeWhileLoop",
	"manifestVersion": 4,
	"parameters": [
		{
			"description": [
				"Specifies the criteria or state that must be evaluated or met during the execution of a plugin or action."
			],
			"mandatory": true,
			"name": "Condition",
			"type": "Assertion"
		},
		{
			"description": [
				"Specifies the value or pattern that the automation script expects to find or match during the execution of a condition."
			],
			"name": "Expected",
			"type": "Any"
		},
		{
			"description": [
				"Specifies the type of comparison or operation to be performed when evaluating a condition."
			],
			"name": "Operator",
			"type": "Operator"
		},
		{
			"description": [
				"Specifies the maximum duration the automation script should wait for a condition to be met before proceeding with the next step, after which it will terminate."
			],
			"name": "Timeout",
			"type": "Number|Time"
		}
	],
	"pluginType": "Action",
	"properties": [
		{
			"description": [
				"Defines a condition or criteria that guides the behavior of a plugin during execution."
			],
			"mandatory": true,
			"name": "Argument",
			"type": "Expression"
		},
		{
			"default": "Xpath",
			"description": [
				"Specifies how elements should be located on a webpage or within an application."
			],
			"mandatory": false,
			"name": "Locator",
			"type": "String"
		},
		{
			"description": [
				"Specifies the attribute of the target element that will be interacted with or evaluated during automation."
			],
			"mandatory": false,
			"name": "OnAttribute",
			"type": "String"
		},
		{
			"description": [
				"Specifies the target element on which conditions will be evaluated during the automation process."
			],
			"mandatory": false,
			"name": "OnElement",
			"type": "String"
		},
		{
			"description": [
				"Define a sequence of actions or instructions to be executed within a loop or under specific conditions."
			],
			"mandatory": true,
			"name": "Rules",
			"type": "Array"
		}
	],
	"protocol": {
		"apiDocumentation": "None",
		"w3c": "None"
	},
	"scopes": [
		"Any"
	],
	"summary": [
		"The `InvokeWhileLoop` plugin enables dynamic and repetitive execution of actions within automation scripts based on specified conditions.",
		"It provides a versatile solution for handling iterative tasks by continually performing actions until a defined condition is met or a timeout occurs.",
		"Key features include dynamic iteration, conditional execution, timeout handling, and seamless integration with the automation framework for extraction and performance point synchronization.",
		"Use cases include data validation, dynamic process automation, conditional flow control, dynamic testing, repetitive task automation, and conditional flow testing, ensuring robust and adaptable automation solutions."
	]
}
