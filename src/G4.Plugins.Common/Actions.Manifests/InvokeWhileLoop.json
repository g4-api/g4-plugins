{
	"author": {
		"name": "Roei Sabag",
		"link": "https://www.linkedin.com/in/roei-sabag-247aa18/"
	},
	"categories": [
		"Loops"
	],
	"context": {
		"integration": {
			"sequentialWorkflow": {
				"$type": "Action",
				"componentType": "container",
				"iconProvider": "loop",
				"model": "ActionRuleModel"
			},
			"context": {
				"integration": {
					"rag": {
						"description": "The InvokeWhileLoop plugin automates conditional looping by repeating defined actions while a specified condition remains true. It adapts to runtime changes, handles timeouts, and logs performance data each iteration to ensure reliable and adaptive automation workflows.",
						"qa": [
							{
								"question": "What is the InvokeWhileLoop plugin?",
								"answer": "It is an automation action that runs its child rules repeatedly while a specified condition evaluates to true."
							},
							{
								"question": "How does InvokeWhileLoop handle changing conditions?",
								"answer": "It evaluates the condition before each iteration and stops automatically when the condition becomes false."
							},
							{
								"question": "What happens when a loop exceeds its timeout?",
								"answer": "InvokeWhileLoop checks the Timeout parameter along with the condition and will gracefully exit the loop when the specified timeout is reached; if no timeout is set, the loop may run indefinitely."
							},
							{
								"question": "What is the risk of not specifying a timeout?",
								"answer": "Without a Timeout parameter, the loop can continue indefinitely if the condition never becomes false, potentially causing hung workflows or excessive resource use."
							},
							{
								"question": "What insights does InvokeWhileLoop record?",
								"answer": "It captures iteration counts, execution duration, and exception details for each iteration in the log stream."
							},
							{
								"question": "Can you describe InvokeWhileLoop in a short sentence?",
								"answer": "InvokeWhileLoop repeats defined actions while a condition remains true and stops automatically when the condition changes or when a timeout occurs."
							},
							{
								"question": "What is the manifestVersion of this plugin?",
								"answer": "The manifestVersion is 4."
							},
							{
								"question": "Who is the author of this plugin?",
								"answer": "The author is Roei Sabag (https://www.linkedin.com/in/roei-sabag-247aa18/)."
							},
							{
								"question": "Under which categories is this plugin listed?",
								"answer": "It is listed under the Loops category."
							},
							{
								"question": "What pluginType is defined?",
								"answer": "The pluginType is Action."
							},
							{
								"question": "Which platforms does InvokeWhileLoop support?",
								"answer": "It supports Any platform."
							},
							{
								"question": "What parameters are defined for InvokeWhileLoop?",
								"answer": "Parameters include Condition, Expected, Operator, and Timeout to control loop exit criteria and duration."
							},
							{
								"question": "What properties are available in InvokeWhileLoop?",
								"answer": "Properties include Argument, Locator, OnAttribute, OnElement, RegularExpression, and Rules to define assertion details and nested actions."
							},
							{
								"question": "What API documentation is provided for InvokeWhileLoop?",
								"answer": "Unfortunately, no API documentation is available for InvokeWhileLoop plugin."
							},
							{
								"question": "What W3C protocol support is declared?",
								"answer": "No formal W3C protocol specification is declared for InvokeWhileLoop."
							}
						]
					}
				}
			}
		}
	},
	"description": [
		"### Purpose",
		"",
		"The InvokeWhileLoop plugin runs actions repeatedly while a specified condition remains true and stops when the condition becomes false. It adapts to changing situations during execution and stops automatically if it takes too long. It also records data and performance details for each iteration.",
		"",
		"### Key Features and Functionality",
		"",
		"| Feature                      | Description                                                         |",
		"|------------------------------|---------------------------------------------------------------------|",
		"| Dynamic Iteration            | Runs steps in a loop that adapts to changing conditions at runtime. |",
		"| Conditional Execution        | Continues looping while your specified condition remains true.      |",
		"| Timeout Handling             | Stops the loop automatically if it exceeds a set time limit.        |",
		"| Execution Insights           | Records data and performance details during each iteration.         |",
		"",
		"### Usages in RPA",
		"",
		"| Use Case                   | Description                                                     |",
		"|----------------------------|-----------------------------------------------------------------|",
		"| Data Validation            | Checks data repeatedly until it meets your criteria.            |",
		"| Dynamic Process Automation | Automatically repeats tasks based on live conditions.           |",
		"| Conditional Flow Control   | Lets scripts change course by checking conditions during a run. |",
		"",
		"### Usages in Automation Testing",
		"",
		"| Use Case                   | Description                                                    |",
		"|----------------------------|----------------------------------------------------------------|",
		"| Dynamic Testing            | Keeps testing until the application reaches the desired state. |",
		"| Repetitive Task Automation | Repeats test steps until a condition is satisfied.             |",
		"| Conditional Flow Testing   | Allows tests to adapt on the fly based on changing conditions. |"
	],
	"examples": [
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Click action throws exception",
						"Condition initially false (loop never runs)",
						"ElementAttribute not found",
						"Loop action or rule failure",
						"Target element not found"
					],
					"expected_result": "Click actions on `#NextBtn1` are performed repeatedly until the `class` attribute of the target element matches `active`.",
					"notes": "InvokeWhileLoop checks the `class` attribute against regex `(?i)active`. While it does not match, it performs a Click on `#NextBtn1`. Exceptions for missing elements or click failures are logged without stopping the loop. Loop terminates when the condition fails or if stop-on-error is configured.",
					"test_case": "invoke_while_loop_class_notmatch_active_click_css",
					"version": "1.0"
				},
				"labels": [
					"ConditionalLoop",
					"InvokeWhileLoop",
					"Loop"
				]
			},
			"description": [
				"### Click Next While Not Active Using CSS Selector",
				"",
				"This example demonstrates how the InvokeWhileLoop plugin repeatedly checks the `class` attribute of the element matching XPath `//ul[@id='Pagination1']/li/button[.='6']`, and while it does not match the regex `(?i)active`, performs a Click action on the element matching CSS selector `#NextBtn1`.",
				"A regular expression `(?i)active` is applied to the `class` attribute to check for a case‑insensitive match.",
				"The loop continues until the condition no longer holds or if configured to stop on error.",
				"All conditions supported by Assert plugins (plugins with `Assert` as their plugin type) can be used here as well to control the loop."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementAttribute --Operator:NotMatch --Expected:(?i)active}}",
				"onAttribute": "class",
				"onElement": "//ul[@id='Pagination1']/li/button[.='6']",
				"pluginName": "InvokeWhileLoop",
				"rules": [
					{
						"$type": "Action",
						"locator": "CssSelector",
						"onElement": "#NextBtn1",
						"pluginName": "Click"
					}
				]
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Click action throws exception",
						"Condition initially false (loop never runs)",
						"ElementAttribute not found",
						"Loop action or rule failure",
						"Target element not found"
					],
					"expected_result": "Click actions on `//button[@id='NextBtn1']` are performed repeatedly until the `class` attribute of the target element matches `active`.",
					"notes": "InvokeWhileLoop checks the `class` attribute against regex `(?i)active`. While it does not match, it performs a Click on `//button[@id='NextBtn1']`. Exceptions for missing elements or click failures are logged without stopping the loop. Loop terminates when the condition fails or if stop-on-error is configured.",
					"test_case": "invoke_while_loop_class_notmatch_active_click_xpath",
					"version": "1.0"
				},
				"labels": [
					"ConditionalLoop",
					"InvokeWhileLoop",
					"Loop"
				]
			},
			"description": [
				"### Click Next While Not Active Using XPath",
				"",
				"This example demonstrates how the InvokeWhileLoop plugin repeatedly checks the `class` attribute of the element matching XPath `//ul[@id='Pagination1']/li/button[.='6']`, and while it does not match the regex `(?i)active`, performs a Click action on the element matching XPath `//button[@id='NextBtn1']`.",
				"A regular expression `(?i)active` is applied to the `class` attribute to check for a case‑insensitive match.",
				"The loop continues until the condition no longer holds or if configured to stop on error.",
				"All conditions supported by Assert plugins (plugins with `Assert` as their plugin type) can be used here as well to control the loop."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementAttribute --Operator:NotMatch --Expected:(?i)active}}",
				"onAttribute": "class",
				"onElement": "//ul[@id='Pagination1']/li/button[.='6']",
				"pluginName": "InvokeWhileLoop",
				"rules": [
					{
						"$type": "Action",
						"locator": "Xpath",
						"onElement": "//button[@id='NextBtn1']",
						"pluginName": "Click"
					}
				]
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Click action throws exception",
						"Condition initially false (loop never runs)",
						"ElementAttribute not found",
						"Loop action or rule failure",
						"Target element not found"
					],
					"expected_result": "Click actions on `#NextBtn1` are performed repeatedly until the `class` attribute of the target element matches `active`.",
					"notes": "InvokeWhileLoop checks the `class` attribute against regex `(?i)active`. While it does not match, it performs a Click on `#NextBtn1`. Exceptions for missing elements or click failures are logged without stopping the loop. Loop terminates when the condition fails or if stop-on-error is configured.",
					"test_case": "invoke_while_loop_class_notmatch_active_click_css_nth_child",
					"version": "1.0"
				},
				"labels": [
					"ConditionalLoop",
					"InvokeWhileLoop",
					"Loop"
				]
			},
			"description": [
				"### Click Next While Not Active Using CSS Selector nth-child",
				"",
				"This example demonstrates how the InvokeWhileLoop plugin repeatedly checks the `class` attribute of the element matching CSS selector `#Pagination1 > li:nth-child(6) > button`, and while it does not match the regex `(?i)active`, performs a Click action on the element matching CSS selector `#NextBtn1`.",
				"A regular expression `(?i)active` is applied to the `class` attribute to check for a case‑insensitive match.",
				"The loop continues until the condition no longer holds or if configured to stop on error.",
				"All conditions supported by Assert plugins (plugins with `Assert` as their plugin type) can be used here as well to control the loop."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementAttribute --Operator:NotMatch --Expected:(?i)active}}",
				"onAttribute": "class",
				"onElement": "#Pagination1 > li:nth-child(6) > button",
				"pluginName": "InvokeWhileLoop",
				"rules": [
					{
						"$type": "Action",
						"locator": "CssSelector",
						"onElement": "#NextBtn1",
						"pluginName": "Click"
					}
				]
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Click action throws exception",
						"Condition initially false (loop never runs)",
						"ElementAttribute not found",
						"Loop action or rule failure",
						"Target element not found"
					],
					"expected_result": "Click actions on `//button[@id='NextBtn1']` are performed repeatedly until the `class` attribute of the target element matches `active`.",
					"notes": "InvokeWhileLoop checks the `class` attribute against regex `(?i)active`. While it does not match, it performs a Click on `//button[@id='NextBtn1']`. Exceptions for missing elements or click failures are logged without stopping the loop. Loop terminates when the condition fails or if stop-on-error is configured.",
					"test_case": "invoke_while_loop_class_notmatch_active_click_xpath_css_nth_child",
					"version": "1.0"
				},
				"labels": [
					"ConditionalLoop",
					"InvokeWhileLoop",
					"Loop"
				]
			},
			"description": [
				"### Click Next While Not Active Using CSS Selector with XPath Click",
				"",
				"This example demonstrates how the InvokeWhileLoop plugin repeatedly checks the `class` attribute of the element matching CSS selector `#Pagination1 > li:nth-child(6) > button`, and while it does not match the regex `(?i)active`, performs a Click action on the element matching XPath `//button[@id='NextBtn1']`.",
				"A regular expression `(?i)active` is applied to the `class` attribute to check for a case‑insensitive match.",
				"The loop continues until the condition no longer holds or if configured to stop on error.",
				"All conditions supported by Assert plugins (plugins with `Assert` as their plugin type) can be used here as well to control the loop."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementAttribute --Operator:NotMatch --Expected:(?i)active}}",
				"onAttribute": "class",
				"onElement": "#Pagination1 > li:nth-child(6) > button",
				"pluginName": "InvokeWhileLoop",
				"rules": [
					{
						"$type": "Action",
						"onElement": "//button[@id='NextBtn1']",
						"pluginName": "Click"
					}
				]
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Click action throws exception",
						"Condition initially false (loop never runs)",
						"ElementAttribute not found",
						"Loop action or rule failure",
						"Target element not found"
					],
					"expected_result": "Each `#NextBtn2` is clicked while both loops match active; then `#FirstBtn2` and `#NextBtn1` are clicked per outer iteration.",
					"notes": "InvokeWhileLoop checks the `class` attribute against `(?i)active` in both loops. Exceptions for missing elements or click failures are logged without stopping the loops. Loops terminate when their conditions fail or if stop-on-error is configured.",
					"test_case": "invoke_while_loop_nested_elementattribute_match_active_click_sequence",
					"version": "1.0"
				},
				"labels": [
					"ConditionalLoop",
					"InvokeWhileLoop",
					"Loop"
				]
			},
			"description": [
				"### Nested InvokeWhileLoop for Two-Level Active-Class Validation",
				"",
				"This example demonstrates how the InvokeWhileLoop plugin first checks the `class` attribute of the element matching XPath `//ul[@id='Pagination1']/li/button[.='3']`, and while it matches the regex `(?i)active`, it enters an inner loop that checks the `class` attribute of elements matching XPath `//ul[@id='Pagination2']/li/button[.='3']` and clicks `#NextBtn2` on each inner iteration.",
				"After the inner loop completes for each outer iteration, it clicks `#FirstBtn2` and then `#NextBtn1`.",
				"A regular expression `(?i)active` is applied to the `class` attribute in both loops to check for a case‑insensitive match.",
				"The loops continue until their conditions no longer hold or if configured to stop on error.",
				"All conditions supported by Assert plugins (plugins with `Assert` as their plugin type) can be used here as well to control the loop."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementAttribute --Operator:Match --Expected:(?i)active}}",
				"onAttribute": "class",
				"onElement": "//ul[@id='Pagination1']/li/button[.='3']",
				"pluginName": "InvokeWhileLoop",
				"rules": [
					{
						"$type": "Action",
						"argument": "{{$ --Condition:ElementAttribute --Operator:Match --Expected:(?i)active}}",
						"onAttribute": "class",
						"onElement": "//ul[@id='Pagination2']/li/button[.='3']",
						"pluginName": "InvokeWhileLoop",
						"rules": [
							{
								"$type": "Action",
								"locator": "CssSelector",
								"onElement": "#NextBtn2",
								"pluginName": "Click"
							}
						]
					},
					{
						"$type": "Action",
						"locator": "CssSelector",
						"onElement": "#FirstBtn2",
						"pluginName": "Click"
					},
					{
						"$type": "Action",
						"locator": "CssSelector",
						"onElement": "#NextBtn1",
						"pluginName": "Click"
					}
				]
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Click action throws exception",
						"Condition initially false (loop never runs)",
						"ElementAttribute not found",
						"Loop action or rule failure",
						"Target element not found",
						"Timeout exceeded"
					],
					"expected_result": "Click actions on `#NextBtn1` are performed repeatedly while class matches `foo`, with up to 5000ms per check.",
					"notes": "InvokeWhileLoop checks the `class` attribute against `(?i)foo` with a 5000ms timeout each iteration. Exceptions are logged without stopping the loop. Loop terminates when the condition fails or if stop-on-error is configured.",
					"test_case": "invoke_while_loop_class_match_foo_click_css_timeout",
					"version": "1.0"
				},
				"labels": [
					"ConditionalLoop",
					"InvokeWhileLoop",
					"Loop"
				]
			},
			"description": [
				"### InvokeWhileLoop with Timeout for Active-Class Check",
				"",
				"This example demonstrates how the InvokeWhileLoop plugin repeatedly checks the `class` attribute of the element matching XPath `//ul[@id='Pagination1']/li/button[.='6']`, and while it matches the regex `(?i)foo`, performs a Click action on the element matching CSS selector `#NextBtn1`.",
				"A regular expression `(?i)foo` is applied to the `class` attribute to check for a case‑insensitive match with a timeout of 5000 milliseconds per iteration.",
				"The loop continues until the condition no longer holds or if configured to stop on error.",
				"All conditions supported by Assert plugins (plugins with `Assert` as their plugin type) can be used here as well to control the loop."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Condition:ElementAttribute --Operator:Match --Expected:(?i)foo --Timeout:5000}}",
				"onAttribute": "class",
				"onElement": "//ul[@id='Pagination1']/li/button[.='6']",
				"pluginName": "InvokeWhileLoop",
				"rules": [
					{
						"$type": "Action",
						"locator": "CssSelector",
						"onElement": "#NextBtn1",
						"pluginName": "Click"
					}
				]
			}
		}
	],
	"key": "InvokeWhileLoop",
	"manifestVersion": 4,
	"parameters": [
		{
			"description": [
				"Tells the system which type of assertion to run.",
				"It updates itself when new assertion options become available.",
				"No manual edits are needed to keep it current.",
				"It keeps checks up to date with the latest options."
			],
			"mandatory": true,
			"name": "Condition",
			"type": "Assertion"
		},
		{
			"description": [
				"Holds the value you expect the system to assert against.",
				"The system compares this value to the actual result.",
				"Matching values make the assertion return true.",
				"Non-matching values make the assertion return false."
			],
			"mandatory": false,
			"name": "Expected",
			"type": "Any"
		},
		{
			"description": [
				"Chooses which comparison to use in an assertion.",
				"It gathers all available options automatically.",
				"Common options include Lower, Equal, and NotEqual.",
				"No manual updates are needed to keep the list current."
			],
			"mandatory": false,
			"name": "Operator",
			"type": "Operator"
		},
		{
			"description": [
				"Controls how long the system waits for an assertion to be false before stopping the loop.",
				"Once time runs out, the system gracefully breaks the loop.",
				"It stops the system from hanging if the condition never goes false."
			],
			"mandatory": false,
			"name": "Timeout",
			"type": "Number|Time"
		}
	],
	"platforms": [
		"Any"
	],
	"pluginType": "Action",
	"properties": [
		{
			"description": [
				"Specifies the exact expression to use when asserting a result.",
				"It tells the system what value or pattern to evaluate.",
				"This expression guides whether the assertion is true or false."
			],
			"mandatory": true,
			"name": "Argument",
			"type": "Expression"
		},
		{
			"default": "Xpath",
			"description": [
				"Defines how to locate the element on the screen before running the assertion.",
				"Choices include Xpath, CSS, or ID.",
				"Xpath is used by default."
			],
			"mandatory": false,
			"name": "Locator",
			"type": "String"
		},
		{
			"description": [
				"Specifies which part of the element to assert.",
				"Examples include the element's text, link address, or stored value.",
				"The assertion focuses on only that part."
			],
			"mandatory": false,
			"name": "OnAttribute",
			"type": "String"
		},
		{
			"description": [
				"Specifies which element to use in the assertion.",
				"It identifies where that element is located in the page or app.",
				"The assertion then runs on that element."
			],
			"mandatory": false,
			"name": "OnElement",
			"type": "String"
		},
		{
			"description": [
				"Applies a pattern to element values to test or extract specific parts.",
				"Use it to focus on a substring before the assertion runs.",
				"This makes checks easier by narrowing down to the exact text you need."
			],
			"mandatory": false,
			"name": "RegularExpression",
			"type": "Regex"
		},
		{
			"description": [
				"Lists the actions the system runs while the condition is true.",
				"Actions run in order as long as the condition stays true.",
				"When the condition becomes false, the loop stops."
			],
			"mandatory": true,
			"name": "Rules",
			"type": "Array"
		}
	],
	"protocol": {
		"apiDocumentation": "None",
		"w3c": "None"
	},
	"summary": [
		"The InvokeWhileLoop tool repeats your chosen steps as long as a condition you set remains true.",
		"It stops automatically when that condition changes or a timeout happens.",
		"This helps you automate tasks that depend on changing conditions without manual checks."
	]
}
