{
	"aliases": [
		"SaveParameter",
		"SetParameter"
	],
	"author": {
		"link": "https://www.linkedin.com/in/roei-sabag-247aa18/",
		"name": "Roei Sabag"
	},
	"categories": [
		"DataManagement"
	],
	"description": [
		"### Purpose",
		"",
		"The `RegisterParameter` plugin facilitates the registration and storage of parameters within automation scripts.",
		"Its primary objective is to save values to a specified scope by creating and sending the appropriate `SetParameter` plugin based on user input.",
		"",
		"### Key Features and Functionality",
		"",
		"| Feature                     | Description                                                                                                         |",
		"|-----------------------------|---------------------------------------------------------------------------------------------------------------------|",
		"| Parameter Registration      | Registers the value of a specified parameter, which can be directly provided or obtained from a web element.        |",
		"| Scope Management            | Supports defining the scope (`Session`, `Application`, `Machine`, `User`, `Process`) where the parameter is stored. |",
		"| Environment Handling        | Allows specifying different environments where the parameters are managed.                                          |",
		"| Regular Expression Matching | Can apply a regular expression to the value and encode the result in Base64.                                        |",
		"| Meta Action                 | Converts user input into the appropriate `SetParameter` plugin rule and sends it.                                   |",
		"",
		"### Usages in RPA",
		"",
		"| Usage                 | Description                                                                |",
		"|-----------------------|----------------------------------------------------------------------------|",
		"| Registering Values    | Save values from web elements or arguments within a specified scope.       |",
		"| Parameter Management  | Manage parameters across different sessions, processes, or environments.   |",
		"| Complex Data Handling | Use regular expressions to filter or transform values before storing them. |",
		"",
		"### Usages in Automation Testing",
		"",
		"| Usage                     | Description                                                                                                                                                   |",
		"|---------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------|",
		"| Test Data Management      | Use the `RegisterParameter` plugin to manage test data by registering values to different scopes.                                                             |",
		"| Environment Configuration | Facilitate the setup of test environments by registering configuration parameters to the required locations.                                                  |",
		"| Dynamic Test Execution    | Enable dynamic test execution by registering runtime parameters that are needed for various test scenarios, ensuring tests are executed with the correct data.|"
	],
	"examples": [
		{
			"description": [
				"This configuration registers a parameter within the session scope with a specified value."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Value:parameterValue --Scope:Session}}",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"description": [
				"This configuration registers a parameter within the application scope with a specified value and environment."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Value:parameterValue --Scope:Application --Environment:Development}}",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"description": [
				"This configuration registers a parameter obtained from a web element within the user scope."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:User}}",
				"locator": "CssSelector",
				"onElement": "#elementId",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by extracting the href attribute from a web element within the session scope."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Session}}",
				"locator": "CssSelector",
				"onAttribute": "href",
				"onElement": "#linkId",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by extracting the src attribute from an image element and storing it within the user scope."
			],
			"rule": {
				"argument": "{{$ --Name:imageSrc --Scope:User}}",
				"locator": "CssSelector",
				"onAttribute": "src",
				"onElement": "#imageId",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by applying a regular expression to the extracted value."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Session}}",
				"locator": "CssSelector",
				"onElement": "#elementId",
				"pluginName": "RegisterParameter",
				"regularExpression": "\\d+"
			}
		}
	],
	"key": "RegisterParameter",
	"manifestVersion": 4,
	"parameters": [
		{
			"description": [
				"Specifies the name of the parameter to be registered. This is used when the `Argument` property is a CLI expression."
			],
			"mandatory": false,
			"name": "Name",
			"type": "String"
		},
		{
			"description": [
				"Specifies the scope in which the parameter will be registered. The scope defines where the parameter is stored and can be one of several predefined scopes such as 'Application', 'Session', 'Machine', 'User', 'Process'."
			],
			"mandatory": false,
			"name": "Scope",
			"type": "SetParameter"
		},
		{
			"default": "SystemParameters",
			"description": [
				"Specifies the environment in which the parameters are managed. It allows for defining different contexts or environments where the parameters are stored and retrieved from."
			],
			"mandatory": false,
			"name": "Environment",
			"type": "String"
		},
		{
			"description": [
				"Specifies the value of the parameter to be registered."
			],
			"mandatory": false,
			"name": "Value",
			"type": "String"
		}
	],
	"pluginType": "Action",
	"properties": [
		{
			"description": [
				"Specifies the web element from which the parameter value can be obtained if not directly provided."
			],
			"mandatory": false,
			"name": "OnElement",
			"type": "String"
		},
		{
			"description": [
				"Specifies the argument value that will be logged and used as the parameter name during the execution of the plugin. This can be a parameter name or a CLI expression."
			],
			"mandatory": true,
			"name": "Argument",
			"type": "String|Expression"
		},
		{
			"description": [
				"Specifies the attribute of the web element from which the value should be extracted."
			],
			"mandatory": false,
			"name": "OnAttribute",
			"type": "String"
		},
		{
			"default": "(?s).*",
			"description": [
				"Specifies the regular expression to be applied to the value before storing it. The result will be encoded in Base64."
			],
			"mandatory": false,
			"name": "RegularExpression",
			"type": "Regex"
		}
	],
	"protocol": {
		"apiDocumentation": "None",
		"w3c": "None"
	},
	"scopes": [
		"Any"
	],
	"summary": [
		"The `RegisterParameter` plugin facilitates the registration and storage of parameters within automation scripts by saving values to a specified scope.",
		"It converts user input into the appropriate `SetParameter` plugin rule and sends it, supporting parameter registration from direct input or web elements.",
		"Key features include parameter registration, scope management, environment handling, regular expression matching, and meta action capabilities.",
		"Common use cases include registering values from web elements, managing parameters across sessions or environments, and handling complex data with regular expressions in both RPA and automation testing scenarios."
	]
}
