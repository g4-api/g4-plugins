{
	"aliases": [
		"SaveParameter",
		"SetParameter"
	],
	"author": {
		"link": "https://www.linkedin.com/in/roei-sabag-247aa18/",
		"name": "Roei Sabag"
	},
	"categories": [
		"DataManagement"
	],
	"context": {
		"integration": {
			"sequentialWorkflow": {
				"$type": "Action",
				"componentType": "task",
				"iconProvider": "data",
				"model": "ActionRuleModel"
			}
		}
	},
	"description": [
		"### Purpose",
		"",
		"The `RegisterParameter` plugin helps automation workflows save and manage data by name. It takes values provided by a user or extracted from a an element and stores them in a chosen scope, such as session or application. Then it generates and sends a `SetParameter` action so the data can be reused later in the automation.",
		"",
		"### Key Features and Functionality",
		"",
		"| Feature             | Description                                                                        |",
		"|---------------------|------------------------------------------------------------------------------------|",
		"| Parameter Capture   | Get a value from a user argument or an element.                                    |",
		"| Scope Selection     | Choose where to store the value (session, application, machine, user, or process). |",
		"| Environment Targets | Handle parameters across different environments.                                   |",
		"| Value Filtering     | Apply a regular expression to extract or transform parts of the value.             |",
		"| Value Encoding      | Convert the final value into Base64 format.                                        |",
		"| Action Creation     | Generate and send the SetParameter command for the stored value.                   |",
		"| Value Encryption    | Optionally encrypt the value using a provided encryption key.                      |",
		"",
		"### Usages in RPA",
		"",
		"| Use Case             | Description                                                        |",
		"|----------------------|--------------------------------------------------------------------|",
		"| Data Handoff         | Save data from one automation step to use in later steps.          |",
		"| Environment Setup    | Register settings like URLs or credentials before running actions. |",
		"| Value Extraction     | Use regex to filter and store data from web pages.                 |",
		"| Secure Data Handling | Encrypt and save sensitive values within the workflow.             |",
		"",
		"### Usages in Automation Testing",
		"",
		"| Use Case                  | Description                                                  |",
		"|---------------------------|--------------------------------------------------------------|",
		"| Test Data Setup           | Store input values needed for automated test cases.          |",
		"| Environment Configuration | Register URLs or credentials for test environments.          |",
		"| Runtime Parameterization  | Save variables at runtime to drive different test scenarios. |",
		"| Sensitive Data Handling   | Encrypt and manage tokens or keys for secure test execution. |"
	],
	"examples": [
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Extra/unrecognized flag present",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Misplaced braces in CLI expression (e.g. `{ $ --Name…}`)",
						"Missing `--Name` or `--Value` argument",
						"Unexpected `--EncryptionKey` flag when encryption isn’t configured",
						"Unsupported `--Scope` value (e.g. \"FooScope\")",
						"Unescaped spaces in argument values (e.g. `--Name:\"param Name\"`)",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The parameter 'parameterName' is stored in the Application scope with the value 'parameterValue'.",
					"notes": "Stores a parameter in the Application scope without encryption.",
					"test_case": "register_parameter_application_scope",
					"version": "1.0"
				},
				"labels": [
					"ParameterRegistration",
					"ScopeManagement",
					"ApplicationScope"
				]
			},
			"description": [
				"### RegisterParameter: Application Scope",
				"",
				"This example demonstrates how to register a parameter named `parameterName` with the value `parameterValue` in the `Application` scope.",
				"After execution, the parameter is available in the Application scope for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Name:parameterName --Value:parameterValue --Scope:Application}}",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Extra/unrecognized flag present",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Misplaced braces in CLI expression (e.g. `{ $ --Name…}`)",
						"Missing `--Name` or `--Value` argument",
						"Missing or invalid --EncryptionKey argument",
						"Unsupported `--Scope` value (e.g. \"FooScope\")",
						"Unescaped spaces in argument values (e.g. `--Name:\"param Name\"`)",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The parameter 'parameterName' is encrypted using 'myEncryptionKey' and stored in the Application scope.",
					"notes": "Stores a parameter in the Application scope with encryption.",
					"test_case": "register_parameter_application_scope_with_encryption",
					"version": "1.0"
				},
				"labels": [
					"Encryption",
					"ParameterRegistration",
					"ScopeManagement",
					"ApplicationScope"
				]
			},
			"description": [
				"### RegisterParameter: Application Scope with Encryption",
				"",
				"This example demonstrates how to register a parameter named `parameterName` with the value `parameterValue` in the `Application` scope and apply encryption using the key `myEncryptionKey`.",
				"After execution, the parameter is available in the Application scope for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Name:parameterName --Value:parameterValue --Scope:Application --EncryptionKey:myEncryptionKey}}",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Extra/unrecognized flag present",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Misplaced braces in CLI expression (e.g. `{ $ --Name…}`)",
						"Missing `--Name` or `--Value` argument",
						"Unexpected `--EncryptionKey` flag when encryption isn’t configured",
						"Unsupported `--Environment` value (e.g. \"Staging\")",
						"Unsupported `--Scope` value (e.g. \"FooScope\")",
						"Unescaped spaces in argument values (e.g. `--Name:\"param Name\"`)",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The parameter 'parameterName' is stored in the Application scope for the Development environment with the value 'parameterValue'.",
					"notes": "Stores a parameter in the Application scope for the Development environment without encryption.",
					"test_case": "register_parameter_application_scope_with_environment_development",
					"version": "1.0"
				},
				"labels": [
					"ApplicationScope",
					"EnvironmentManagement",
					"ParameterRegistration",
					"ScopeManagement"
				]
			},
			"description": [
				"### RegisterParameter: Application Scope with Development Environment",
				"",
				"This example demonstrates how to register a parameter named `parameterName` with the value `parameterValue` in the `Application` scope for the `Development` environment.",
				"After execution, the parameter is available in the Application scope for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Name:parameterName --Value:parameterValue --Scope:Application --Environment:Development}}",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Extra/unrecognized flag present",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Misplaced braces in CLI expression (e.g. `{ $ --Name…}`)",
						"Missing `--Name` or `--Value` argument",
						"Missing or invalid --EncryptionKey argument",
						"Unsupported `--Environment` value (e.g. \"Staging\")",
						"Unsupported `--Scope` value (e.g. \"FooScope\")",
						"Unescaped spaces in argument values (e.g. `--Name:\"param Name\"`)",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The parameter 'parameterName' is encrypted using 'myEncryptionKey' and stored in the Application scope for the Development environment.",
					"notes": "Stores a parameter in the Application scope for the Development environment with encryption.",
					"test_case": "register_parameter_application_scope_with_environment_development_and_encryption",
					"version": "1.0"
				},
				"labels": [
					"ApplicationScope",
					"Encryption",
					"EnvironmentManagement",
					"ParameterRegistration",
					"ScopeManagement"
				]
			},
			"description": [
				"### RegisterParameter: Application Scope with Development Environment and Encryption",
				"",
				"This example demonstrates how to register a parameter named `parameterName` with the value `parameterValue` in the `Application` scope for the `Development` environment and apply encryption using the key `myEncryptionKey`.",
				"After execution, the parameter is available in the Application scope for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Name:parameterName --Value:parameterValue --Scope:Application --Environment:Development --EncryptionKey:myEncryptionKey}}",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Extra/unrecognized flag present",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Misplaced braces in CLI expression (e.g. `{ $ --Name…}`)",
						"Missing `--Name` or `--Value` argument",
						"Unsupported `--Scope` value (e.g. \"FooScope\")",
						"Unescaped spaces in argument values (e.g. `--Name:\"param Name\"`)",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The parameter 'parameterName' is stored in the Machine scope with the value 'parameterValue'.",
					"notes": "Stores a parameter in the Machine scope without encryption.",
					"test_case": "register_parameter_machine_scope",
					"version": "1.0"
				},
				"labels": [
					"MachineScope",
					"ParameterRegistration",
					"ScopeManagement"
				]
			},
			"description": [
				"### RegisterParameter: Machine Scope",
				"",
				"This example demonstrates how to register a parameter named `parameterName` with the value `parameterValue` in the `Machine` scope.",
				"After execution, the parameter is available in the Machine scope for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Name:parameterName --Value:parameterValue --Scope:Machine}}",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Extra/unrecognized flag present",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Misplaced braces in CLI expression (e.g. `{ $ --Name…}`)",
						"Missing `--Name` or `--Value` argument",
						"Missing or invalid --EncryptionKey argument",
						"Unsupported `--Scope` value (e.g. \"FooScope\")",
						"Unescaped spaces in argument values (e.g. `--Name:\"param Name\"`)",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The parameter 'parameterName' is encrypted using 'myEncryptionKey' and stored in the Machine scope.",
					"notes": "Stores a parameter in the Machine scope with encryption.",
					"test_case": "register_parameter_machine_scope_with_encryption",
					"version": "1.0"
				},
				"labels": [
					"Encryption",
					"MachineScope",
					"ParameterRegistration",
					"ScopeManagement"
				]
			},
			"description": [
				"### RegisterParameter: Machine Scope with Encryption",
				"",
				"This example demonstrates how to register a parameter named `parameterName` with the value `parameterValue` in the `Machine` scope and apply encryption using the key `myEncryptionKey`.",
				"After execution, the parameter is available in the Machine scope for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Name:parameterName --Value:parameterValue --Scope:Machine --EncryptionKey:myEncryptionKey}}",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Extra/unrecognized flag present",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Misplaced braces in CLI expression (e.g. `{ $ --Name…}`)",
						"Missing `--Name` or `--Value` argument",
						"Unexpected `--EncryptionKey` flag when encryption isn’t configured",
						"Unsupported `--Scope` value (e.g. \"FooScope\")",
						"Unescaped spaces in argument values (e.g. `--Name:\"param Name\"`)",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The parameter 'parameterName' is stored in the Process scope with the value 'parameterValue'.",
					"notes": "Stores a parameter in the Process scope without encryption.",
					"test_case": "register_parameter_process_scope",
					"version": "1.0"
				},
				"labels": [
					"ParameterRegistration",
					"ScopeManagement",
					"ProcessScope"
				]
			},
			"description": [
				"### RegisterParameter: Process Scope",
				"",
				"This example demonstrates how to register a parameter named `parameterName` with the value `parameterValue` in the `Process` scope.",
				"After execution, the parameter is available in the Process scope for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Name:parameterName --Value:parameterValue --Scope:Process}}",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Extra/unrecognized flag present",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Misplaced braces in CLI expression (e.g. `{ $ --Name…}`)",
						"Missing `--Name` or `--Value` argument",
						"Missing or invalid --EncryptionKey argument",
						"Unsupported `--Scope` value (e.g. \"FooScope\")",
						"Unescaped spaces in argument values (e.g. `--Name:\"param Name\"`)",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The parameter 'parameterName' is encrypted using 'myEncryptionKey' and stored in the Process scope.",
					"notes": "Stores a parameter in the Process scope with encryption.",
					"test_case": "register_parameter_process_scope_with_encryption",
					"version": "1.0"
				},
				"labels": [
					"ParameterRegistration",
					"ScopeManagement",
					"ProcessScope",
					"Encryption"
				]
			},
			"description": [
				"### RegisterParameter: Process Scope with Encryption",
				"",
				"This example demonstrates how to register a parameter named `parameterName` with the value `parameterValue` in the `Process` scope and apply encryption using the key `myEncryptionKey`.",
				"After execution, the parameter is available in the Process scope for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Name:parameterName --Value:parameterValue --Scope:Process --EncryptionKey:myEncryptionKey}}",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Extra/unrecognized flag present",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Misplaced braces in CLI expression (e.g. `{ $ --Name…}`)",
						"Missing `--Name` or `--Value` argument",
						"Unexpected `--EncryptionKey` flag when encryption isn’t configured",
						"Unsupported `--Scope` value (e.g. \"FooScope\")",
						"Unescaped spaces in argument values (e.g. `--Name:\"param Name\"`)",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The parameter 'parameterName' is stored in the Session scope with the value 'parameterValue'.",
					"notes": "Stores a parameter in the Session scope without encryption.",
					"test_case": "register_parameter_session_scope",
					"version": "1.0"
				},
				"labels": [
					"ParameterRegistration",
					"ScopeManagement",
					"SessionScope"
				]
			},
			"description": [
				"### RegisterParameter: Session Scope",
				"",
				"This example demonstrates how to register a parameter named `parameterName` with the value `parameterValue` in the `Session` scope.",
				"After execution, the parameter is available in the Session scope for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Name:parameterName --Value:parameterValue --Scope:Session}}",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Extra/unrecognized flag present",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Misplaced braces in CLI expression (e.g. `{ $ --Name…}`)",
						"Missing `--Name` or `--Value` argument",
						"Missing or invalid --EncryptionKey argument",
						"Unsupported `--Scope` value (e.g. \"FooScope\")",
						"Unescaped spaces in argument values (e.g. `--Name:\"param Name\"`)",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The parameter 'parameterName' is encrypted using 'myEncryptionKey' and stored in the Session scope.",
					"notes": "Stores a parameter in the Session scope with encryption.",
					"test_case": "register_parameter_session_scope_with_encryption",
					"version": "1.0"
				},
				"labels": [
					"ParameterRegistration",
					"ScopeManagement",
					"SessionScope",
					"Encryption"
				]
			},
			"description": [
				"### RegisterParameter: Session Scope with Encryption",
				"",
				"This example demonstrates how to register a parameter named `parameterName` with the value `parameterValue` in the `Session` scope and apply encryption using the key `myEncryptionKey`.",
				"After execution, the parameter is available in the Session scope for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Name:parameterName --Value:parameterValue --Scope:Session --EncryptionKey:myEncryptionKey}}",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Extra/unrecognized flag present",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Misplaced braces in CLI expression (e.g. `{ $ --Name…}`)",
						"Missing `--Name` or `--Value` argument",
						"Unexpected `--EncryptionKey` flag when encryption isn’t configured",
						"Unsupported `--Scope` value (e.g. \"FooScope\")",
						"Unescaped spaces in argument values (e.g. `--Name:\"param Name\"`)",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The parameter 'parameterName' is stored in the User scope with the value 'parameterValue'.",
					"notes": "Stores a parameter in the User scope without encryption.",
					"test_case": "register_parameter_user_scope",
					"version": "1.0"
				},
				"labels": [
					"ParameterRegistration",
					"ScopeManagement",
					"UserScope"
				]
			},
			"description": [
				"### RegisterParameter: User Scope",
				"",
				"This example demonstrates how to register a parameter named `parameterName` with the value `parameterValue` in the `User` scope.",
				"After execution, the parameter is available in the User scope for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Name:parameterName --Value:parameterValue --Scope:User}}",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Extra/unrecognized flag present",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Misplaced braces in CLI expression (e.g. `{ $ --Name…}`)",
						"Missing `--Name` or `--Value` argument",
						"Missing or invalid --EncryptionKey argument",
						"Unsupported `--Scope` value (e.g. \"FooScope\")",
						"Unescaped spaces in argument values (e.g. `--Name:\"param Name\"`)",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The parameter 'parameterName' is encrypted using 'myEncryptionKey' and stored in the User scope.",
					"notes": "Stores a parameter in the User scope with encryption.",
					"test_case": "register_parameter_user_scope_with_encryption",
					"version": "1.0"
				},
				"labels": [
					"ParameterRegistration",
					"ScopeManagement",
					"UserScope",
					"Encryption"
				]
			},
			"description": [
				"### RegisterParameter: User Scope with Encryption",
				"",
				"This example demonstrates how to register a parameter named `parameterName` with the value `parameterValue` in the `User` scope and apply encryption using the key `myEncryptionKey`.",
				"After execution, the parameter is available in the User scope for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Name:parameterName --Value:parameterValue --Scope:User --EncryptionKey:myEncryptionKey}}",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Extra/unrecognized flag present",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Misplaced braces in CLI expression (e.g. `{ $ --Name…}`)",
						"Missing --Name argument",
						"Missing onElement argument",
						"Unsupported locator type (e.g. \"CssPath\")",
						"Unsupported --Scope value (e.g. \"FooScope\")",
						"Unescaped spaces in argument values (e.g. `--Name:\"param Name\"`)",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The parameter 'parameterName' is extracted from the element and stored in the Application scope.",
					"notes": "Registers a parameter from an element without encryption.",
					"test_case": "register_parameter_application_scope_css_elementId",
					"version": "1.0"
				},
				"labels": [
					"ApplicationScope",
					"ParameterRegistration",
					"ScopeManagement"
				]
			},
			"description": [
				"### RegisterParameter: Application Scope via CSS Selector",
				"",
				"This example demonstrates how to register a parameter named `parameterName` from the inner text of the element identified by CSS selector `#elementId` in the `Application` scope.",
				"After execution, the parameter is available in the Application scope for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Name:parameterName --Scope:Application}}",
				"locator": "CssSelector",
				"onElement": "#elementId",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Extra/unrecognized flag present",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Misplaced braces in CLI expression (e.g. `{ $ --Name…}`)",
						"Missing --Name argument",
						"Missing onElement argument",
						"Missing or invalid --EncryptionKey argument",
						"Unsupported locator type (e.g. \"CssPath\")",
						"Unsupported --Scope value (e.g. \"FooScope\")",
						"Unescaped spaces in argument values (e.g. `--Name:\"param Name\"`)",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The parameter 'parameterName' is extracted from the element, encrypted with 'myEncryptionKey', and stored in the Application scope.",
					"notes": "Registers a parameter from an element with encryption.",
					"test_case": "register_parameter_application_scope_css_elementId_with_encryption",
					"version": "1.0"
				},
				"labels": [
					"ApplicationScope",
					"Encryption",
					"ParameterRegistration",
					"ScopeManagement"
				]
			},
			"description": [
				"### RegisterParameter: Application Scope via CSS Selector with Encryption",
				"",
				"This example demonstrates how to register a parameter named `parameterName` from the inner text of the element identified by CSS selector `#elementId` in the `Application` scope and apply encryption using the key `myEncryptionKey`.",
				"After execution, the parameter is available in the Application scope for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Name:parameterName --Scope:Application --EncryptionKey:myEncryptionKey}}",
				"locator": "CssSelector",
				"onElement": "#elementId",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Extra/unrecognized flag present",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Misplaced braces in CLI expression (e.g. `{ $ --Name…}`)",
						"Missing --Name argument",
						"Missing onElement argument",
						"Unsupported locator type (e.g. \"CssPath\")",
						"Unsupported --Scope value (e.g. \"FooScope\")",
						"Unescaped spaces in argument values (e.g. `--Name:\"param Name\"`)",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The parameter 'parameterName' is extracted from the element and stored in the Application scope.",
					"notes": "Registers a parameter from an element without encryption.",
					"test_case": "register_parameter_application_scope_xpath_elementId",
					"version": "1.0"
				},
				"labels": [
					"ApplicationScope",
					"ParameterRegistration",
					"ScopeManagement"
				]
			},
			"description": [
				"### RegisterParameter: Application Scope via XPath",
				"",
				"This example demonstrates how to register a parameter named `parameterName` from the inner text of the element identified by XPath `//a[@id='elementId']` in the `Application` scope.",
				"After execution, the parameter is available in the Application scope for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Name:parameterName --Scope:Application}}",
				"locator": "Xpath",
				"onElement": "//a[@id='elementId']",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Extra/unrecognized flag present",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Misplaced braces in CLI expression (e.g. `{ $ --Name…}`)",
						"Missing --Name argument",
						"Missing onElement argument",
						"Missing or invalid --EncryptionKey argument",
						"Unsupported locator type (e.g. \"CssPath\")",
						"Unsupported --Scope value (e.g. \"FooScope\")",
						"Unescaped spaces in argument values (e.g. `--Name:\"param Name\"`)",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The parameter 'parameterName' is extracted from the element, encrypted with 'myEncryptionKey', and stored in the Application scope.",
					"notes": "Registers a parameter from an element with encryption.",
					"test_case": "register_parameter_application_scope_xpath_elementId_with_encryption",
					"version": "1.0"
				},
				"labels": [
					"ApplicationScope",
					"Encryption",
					"ParameterRegistration",
					"ScopeManagement"
				]
			},
			"description": [
				"### RegisterParameter: Application Scope via XPath with Encryption",
				"",
				"This example demonstrates how to register a parameter named `parameterName` from the inner text of the element identified by XPath `//a[@id='elementId']` in the `Application` scope and apply encryption using the key `myEncryptionKey`.",
				"After execution, the parameter is available in the Application scope for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Name:parameterName --Scope:Application --EncryptionKey:myEncryptionKey}}",
				"locator": "Xpath",
				"onElement": "//a[@id='elementId']",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Extra/unrecognized flag present",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Misplaced braces in CLI expression (e.g. `{ $ --Name…}`)",
						"Missing --Name argument",
						"Missing onElement argument",
						"Unsupported locator type (e.g. \"CssPath\")",
						"Unsupported --Scope value (e.g. \"FooScope\")",
						"Unescaped spaces in argument values (e.g. `--Name:\"param Name\"`)",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The parameter 'parameterName' is extracted from the element and stored in the Application scope.",
					"notes": "Registers a parameter from an element without encryption.",
					"test_case": "register_parameter_application_scope_id_elementId",
					"version": "1.0"
				},
				"labels": [
					"ApplicationScope",
					"ParameterRegistration",
					"ScopeManagement"
				]
			},
			"description": [
				"### RegisterParameter: Application Scope via Id Locator",
				"",
				"This example demonstrates how to register a parameter named `parameterName` from the inner text of the element identified by Id `elementId` in the `Application` scope.",
				"After execution, the parameter is available in the Application scope for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Name:parameterName --Scope:Application}}",
				"locator": "Id",
				"onElement": "elementId",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Extra/unrecognized flag present",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Misplaced braces in CLI expression (e.g. `{ $ --Name…}`)",
						"Missing --Name argument",
						"Missing onElement argument",
						"Missing or invalid --EncryptionKey argument",
						"Unsupported locator type (e.g. \"CssPath\")",
						"Unsupported --Scope value (e.g. \"FooScope\")",
						"Unescaped spaces in argument values (e.g. `--Name:\"param Name\"`)",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The parameter 'parameterName' is extracted from the element, encrypted with 'myEncryptionKey', and stored in the Application scope.",
					"notes": "Registers a parameter from an element with encryption.",
					"test_case": "register_parameter_application_scope_id_elementId_with_encryption",
					"version": "1.0"
				},
				"labels": [
					"ApplicationScope",
					"Encryption",
					"ParameterRegistration",
					"ScopeManagement"
				]
			},
			"description": [
				"### RegisterParameter: Application Scope via Id Locator with Encryption",
				"",
				"This example demonstrates how to register a parameter named `parameterName` from the inner text of the element identified by Id `elementId` in the `Application` scope and apply encryption using the key `myEncryptionKey`.",
				"After execution, the parameter is available in the Application scope for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Name:parameterName --Scope:Application --EncryptionKey:myEncryptionKey}}",
				"locator": "Id",
				"onElement": "elementId",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Empty element text or whitespace-only content",
						"Extra/unrecognized flag present",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Misplaced braces in CLI expression (e.g. `{ $ --Name…}`)",
						"Missing --Name argument",
						"Missing onElement argument",
						"Unescaped spaces in argument values (e.g. `--Name:\"param Name\"`)",
						"Unexpected --EncryptionKey flag when encryption isn’t configured",
						"Unsupported --Environment value (e.g. \"Staging\")",
						"Unsupported --Scope value (e.g. \"FooScope\")",
						"Unsupported locator type (e.g. \"CssPath\")",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The parameter 'parameterName' is extracted from the element and stored in the Application scope for the Development environment.",
					"notes": "Registers a parameter from an element for the Development environment without encryption.",
					"test_case": "register_parameter_application_scope_with_environment_development_css_elementid",
					"version": "1.0"
				},
				"labels": [
					"ParameterRegistration",
					"ScopeManagement",
					"ApplicationScope",
					"EnvironmentManagement"
				]
			},
			"description": [
				"### RegisterParameter: Application Scope with Development Environment via CSS Selector",
				"",
				"This example demonstrates how to register a parameter named `parameterName` from the inner text of the element identified by CSS selector `#elementId` in the `Application` scope for the `Development` environment.",
				"After execution, the parameter is available in the Application scope for the Development environment for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Name:parameterName --Scope:Application --Environment:Development}}",
				"locator": "CssSelector",
				"onElement": "#elementId",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Empty element text or whitespace-only content",
						"Extra/unrecognized flag present",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Misplaced braces in CLI expression (e.g. `{ $ --Name…}`)",
						"Missing --Name argument",
						"Missing onElement argument",
						"Missing or invalid --EncryptionKey argument",
						"Unescaped spaces in argument values (e.g. `--Name:\"param Name\"`)",
						"Unsupported --Environment value (e.g. \"Staging\")",
						"Unsupported --Scope value (e.g. \"FooScope\")",
						"Unsupported locator type (e.g. \"CssPath\")",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The parameter 'parameterName' is extracted from the element, encrypted using 'myEncryptionKey', and stored in the Application scope for the Development environment.",
					"notes": "Registers a parameter from an element for the Development environment with encryption.",
					"test_case": "register_parameter_application_scope_with_environment_development_css_elementid_with_encryption",
					"version": "1.0"
				},
				"labels": [
					"ParameterRegistration",
					"ScopeManagement",
					"ApplicationScope",
					"EnvironmentManagement",
					"Encryption"
				]
			},
			"description": [
				"### RegisterParameter: Application Scope with Development Environment via CSS Selector with Encryption",
				"",
				"This example demonstrates how to register a parameter named `parameterName` from the inner text of the element identified by CSS selector `#elementId` in the `Application` scope for the `Development` environment and apply encryption using the key `myEncryptionKey`.",
				"After execution, the parameter is available in the Application scope for the Development environment for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Name:parameterName --Scope:Application --Environment:Development --EncryptionKey:myEncryptionKey}}",
				"locator": "CssSelector",
				"onElement": "#elementId",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Empty element text or whitespace-only content",
						"Extra/unrecognized flag present",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Misplaced braces in CLI expression (e.g. `{ $ --Name…}`)",
						"Missing --Name argument",
						"Missing onElement argument",
						"Unescaped spaces in argument values (e.g. `--Name:\"param Name\"`)",
						"Unsupported --Environment value (e.g. \"Staging\")",
						"Unsupported --Scope value (e.g. \"FooScope\")",
						"Unsupported locator type (e.g. \"CssPath\")",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The parameter 'parameterName' is extracted from the element and stored in the Application scope for the Development environment.",
					"notes": "Registers a parameter from an element for the Development environment without encryption.",
					"test_case": "register_parameter_application_scope_with_environment_development_xpath_elementid",
					"version": "1.0"
				},
				"labels": [
					"ParameterRegistration",
					"ScopeManagement",
					"ApplicationScope",
					"EnvironmentManagement"
				]
			},
			"description": [
				"### RegisterParameter: Application Scope with Development Environment via XPath",
				"",
				"This example demonstrates how to register a parameter named `parameterName` from the inner text of the element identified by XPath `//a[@id='elementId']` in the `Application` scope for the `Development` environment.",
				"After execution, the parameter is available in the Application scope for the Development environment for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Name:parameterName --Scope:Application --Environment:Development}}",
				"locator": "Xpath",
				"onElement": "//a[@id='elementId']",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Empty element text or whitespace-only content",
						"Extra/unrecognized flag present",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Misplaced braces in CLI expression (e.g. `{ $ --Name…}`)",
						"Missing --Name argument",
						"Missing onElement argument",
						"Missing or invalid --EncryptionKey argument",
						"Unescaped spaces in argument values (e.g. `--Name:\"param Name\"`)",
						"Unsupported --Environment value (e.g. \"Staging\")",
						"Unsupported --Scope value (e.g. \"FooScope\")",
						"Unsupported locator type (e.g. \"CssPath\")",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The parameter 'parameterName' is extracted from the element, encrypted using 'myEncryptionKey', and stored in the Application scope for the Development environment.",
					"notes": "Registers a parameter from an element for the Development environment with encryption.",
					"test_case": "register_parameter_application_scope_with_environment_development_xpath_elementid_with_encryption",
					"version": "1.0"
				},
				"labels": [
					"ParameterRegistration",
					"ScopeManagement",
					"ApplicationScope",
					"EnvironmentManagement",
					"Encryption"
				]
			},
			"description": [
				"### RegisterParameter: Application Scope with Development Environment via XPath with Encryption",
				"",
				"This example demonstrates how to register a parameter named `parameterName` from the inner text of the element identified by XPath `//a[@id='elementId']` in the `Application` scope for the `Development` environment and apply encryption using the key `myEncryptionKey`.",
				"After execution, the parameter is available in the Application scope for the Development environment for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Name:parameterName --Scope:Application --Environment:Development --EncryptionKey:myEncryptionKey}}",
				"locator": "Xpath",
				"onElement": "//a[@id='elementId']",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Empty element text or whitespace-only content",
						"Extra/unrecognized flag present",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Misplaced braces in CLI expression (e.g. `{ $ --Name…}`)",
						"Missing --Name argument",
						"Missing onElement argument",
						"Unescaped spaces in argument values (e.g. `--Name:\"param Name\"`)",
						"Unsupported --Environment value (e.g. \"Staging\")",
						"Unsupported --Scope value (e.g. \"FooScope\")",
						"Unsupported locator type (e.g. \"CssPath\")",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The parameter 'parameterName' is extracted from the element and stored in the Application scope for the Development environment.",
					"notes": "Registers a parameter from an element for the Development environment without encryption.",
					"test_case": "register_parameter_application_scope_with_environment_development_id_elementid",
					"version": "1.0"
				},
				"labels": [
					"ParameterRegistration",
					"ScopeManagement",
					"ApplicationScope",
					"EnvironmentManagement"
				]
			},
			"description": [
				"### RegisterParameter: Application Scope with Development Environment via Id Locator",
				"",
				"This example demonstrates how to register a parameter named `parameterName` from the inner text of the element identified by Id `elementId` in the `Application` scope for the `Development` environment.",
				"After execution, the parameter is available in the Application scope for the Development environment for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Name:parameterName --Scope:Application --Environment:Development}}",
				"locator": "Id",
				"onElement": "elementId",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Empty element text or whitespace-only content",
						"Extra/unrecognized flag present",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Misplaced braces in CLI expression (e.g. `{ $ --Name…}`)",
						"Missing --Name argument",
						"Missing onElement argument",
						"Missing or invalid --EncryptionKey argument",
						"Unescaped spaces in argument values (e.g. `--Name:\"param Name\"`)",
						"Unsupported --Environment value (e.g. \"Staging\")",
						"Unsupported --Scope value (e.g. \"FooScope\")",
						"Unsupported locator type (e.g. \"CssPath\")",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The parameter 'parameterName' is extracted from the element, encrypted using 'myEncryptionKey', and stored in the Application scope for the Development environment.",
					"notes": "Registers a parameter from an element for the Development environment with encryption.",
					"test_case": "register_parameter_application_scope_with_environment_development_id_elementid_with_encryption",
					"version": "1.0"
				},
				"labels": [
					"ParameterRegistration",
					"ScopeManagement",
					"ApplicationScope",
					"EnvironmentManagement",
					"Encryption"
				]
			},
			"description": [
				"### RegisterParameter: Application Scope with Development Environment via Id Locator with Encryption",
				"",
				"This example demonstrates how to register a parameter named `parameterName` from the inner text of the element identified by Id `elementId` in the `Application` scope for the `Development` environment and apply encryption using the key `myEncryptionKey`.",
				"After execution, the parameter is available in the Application scope for the Development environment for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Name:parameterName --Scope:Application --Environment:Development --EncryptionKey:myEncryptionKey}}",
				"locator": "Id",
				"onElement": "elementId",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Empty element text or whitespace-only content",
						"Extra/unrecognized flag present",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Misplaced braces in CLI expression (e.g. `{ $ --Name…}`)",
						"Missing --Name argument",
						"Missing onElement argument",
						"Unescaped spaces in argument values (e.g. `--Name:\"param Name\"`)",
						"Unexpected --EncryptionKey flag when encryption isn’t configured",
						"Unsupported locator type (e.g. \"CssPath\")",
						"Unsupported --Scope value (e.g. \"FooScope\")",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The parameter 'parameterName' is extracted from the element and stored in the Machine scope.",
					"notes": "Registers a parameter from an element without encryption.",
					"test_case": "register_parameter_machine_scope_css_elementid",
					"version": "1.0"
				},
				"labels": [
					"ParameterRegistration",
					"ScopeManagement",
					"MachineScope"
				]
			},
			"description": [
				"### RegisterParameter: Machine Scope via CSS Selector",
				"",
				"This example demonstrates how to register a parameter named `parameterName` from the inner text of the element identified by CSS selector `#elementId` in the `Machine` scope.",
				"After execution, the parameter is available in the Machine scope for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Name:parameterName --Scope:Machine}}",
				"locator": "CssSelector",
				"onElement": "#elementId",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Empty element text or whitespace-only content",
						"Extra/unrecognized flag present",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Misplaced braces in CLI expression (e.g. `{ $ --Name…}`)",
						"Missing --Name argument",
						"Missing onElement argument",
						"Missing or invalid --EncryptionKey argument",
						"Unescaped spaces in argument values (e.g. `--Name:\"param Name\"`)",
						"Unsupported locator type (e.g. \"CssPath\")",
						"Unsupported --Scope value (e.g. \"FooScope\")",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The parameter 'parameterName' is extracted from the element, encrypted using 'myEncryptionKey', and stored in the Machine scope.",
					"notes": "Registers a parameter from an element with encryption.",
					"test_case": "register_parameter_machine_scope_css_elementid_with_encryption",
					"version": "1.0"
				},
				"labels": [
					"ParameterRegistration",
					"ScopeManagement",
					"MachineScope",
					"Encryption"
				]
			},
			"description": [
				"### RegisterParameter: Machine Scope via CSS Selector with Encryption",
				"",
				"This example demonstrates how to register a parameter named `parameterName` from the inner text of the element identified by CSS selector `#elementId` in the `Machine` scope and apply encryption using the key `myEncryptionKey`.",
				"After execution, the parameter is available in the Machine scope for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Name:parameterName --Scope:Machine --EncryptionKey:myEncryptionKey}}",
				"locator": "CssSelector",
				"onElement": "#elementId",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Empty element text or whitespace-only content",
						"Extra/unrecognized flag present",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Misplaced braces in CLI expression (e.g. `{ $ --Name…}`)",
						"Missing --Name argument",
						"Missing onElement argument",
						"Unescaped spaces in argument values (e.g. `--Name:\"param Name\"`)",
						"Unsupported locator type (e.g. \"CssPath\")",
						"Unsupported --Scope value (e.g. \"FooScope\")",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The parameter 'parameterName' is extracted from the element and stored in the Machine scope.",
					"notes": "Registers a parameter from an element without encryption.",
					"test_case": "register_parameter_machine_scope_xpath_elementid",
					"version": "1.0"
				},
				"labels": [
					"ParameterRegistration",
					"ScopeManagement",
					"MachineScope"
				]
			},
			"description": [
				"### RegisterParameter: Machine Scope via XPath",
				"",
				"This example demonstrates how to register a parameter named `parameterName` from the inner text of the element identified by XPath `//a[@id='elementId']` in the `Machine` scope.",
				"After execution, the parameter is available in the Machine scope for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Name:parameterName --Scope:Machine}}",
				"locator": "Xpath",
				"onElement": "//a[@id='elementId']",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Empty element text or whitespace-only content",
						"Extra/unrecognized flag present",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Misplaced braces in CLI expression (e.g. `{ $ --Name…}`)",
						"Missing --Name argument",
						"Missing onElement argument",
						"Missing or invalid --EncryptionKey argument",
						"Unescaped spaces in argument values (e.g. `--Name:\"param Name\"`)",
						"Unsupported locator type (e.g. \"CssPath\")",
						"Unsupported --Scope value (e.g. \"FooScope\")",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The parameter 'parameterName' is extracted from the element, encrypted using 'myEncryptionKey', and stored in the Machine scope.",
					"notes": "Registers a parameter from an element with encryption.",
					"test_case": "register_parameter_machine_scope_xpath_elementid_with_encryption",
					"version": "1.0"
				},
				"labels": [
					"ParameterRegistration",
					"ScopeManagement",
					"MachineScope",
					"Encryption"
				]
			},
			"description": [
				"### RegisterParameter: Machine Scope via XPath with Encryption",
				"",
				"This example demonstrates how to register a parameter named `parameterName` from the inner text of the element identified by XPath `//a[@id='elementId']` in the `Machine` scope and apply encryption using the key `myEncryptionKey`.",
				"After execution, the parameter is available in the Machine scope for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Name:parameterName --Scope:Machine --EncryptionKey:myEncryptionKey}}",
				"locator": "Xpath",
				"onElement": "//a[@id='elementId']",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Empty element text or whitespace-only content",
						"Extra/unrecognized flag present",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Misplaced braces in CLI expression (e.g. `{ $ --Name…}`)",
						"Missing --Name argument",
						"Missing onElement argument",
						"Unescaped spaces in argument values (e.g. `--Name:\"param Name\"`)",
						"Unsupported locator type (e.g. \"CssPath\")",
						"Unsupported --Scope value (e.g. \"FooScope\")",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The parameter 'parameterName' is extracted from the element and stored in the Machine scope.",
					"notes": "Registers a parameter from an element without encryption.",
					"test_case": "register_parameter_machine_scope_id_elementid",
					"version": "1.0"
				},
				"labels": [
					"ParameterRegistration",
					"ScopeManagement",
					"MachineScope"
				]
			},
			"description": [
				"### RegisterParameter: Machine Scope via Id Locator",
				"",
				"This example demonstrates how to register a parameter named `parameterName` from the inner text of the element identified by Id `elementId` in the `Machine` scope.",
				"After execution, the parameter is available in the Machine scope for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Name:parameterName --Scope:Machine}}",
				"locator": "Id",
				"onElement": "elementId",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"context": {
				"annotations": {
					"edge_cases": [
						"Element not found",
						"Empty element text or whitespace-only content",
						"Extra/unrecognized flag present",
						"Malformed CLI expression (missing `{{$` or `}}`)",
						"Misplaced braces in CLI expression (e.g. `{ $ --Name…}`)",
						"Missing --Name argument",
						"Missing onElement argument",
						"Missing or invalid --EncryptionKey argument",
						"Unescaped spaces in argument values (e.g. `--Name:\"param Name\"`)",
						"Unsupported locator type (e.g. \"CssPath\")",
						"Unsupported --Scope value (e.g. \"FooScope\")",
						"Version mismatch between plugin and engine"
					],
					"expected_result": "The parameter 'parameterName' is extracted from the element, encrypted using 'myEncryptionKey', and stored in the Machine scope.",
					"notes": "Registers a parameter from an element with encryption.",
					"test_case": "register_parameter_machine_scope_id_elementid_with_encryption",
					"version": "1.0"
				},
				"labels": [
					"ParameterRegistration",
					"ScopeManagement",
					"MachineScope",
					"Encryption"
				]
			},
			"description": [
				"### RegisterParameter: Machine Scope via Id Locator with Encryption",
				"",
				"This example demonstrates how to register a parameter named `parameterName` from the inner text of the element identified by Id `elementId` in the `Machine` scope and apply encryption using the key `myEncryptionKey`.",
				"After execution, the parameter is available in the Machine scope for subsequent actions."
			],
			"rule": {
				"$type": "Action",
				"argument": "{{$ --Name:parameterName --Scope:Machine --EncryptionKey:myEncryptionKey}}",
				"locator": "Id",
				"onElement": "elementId",
				"pluginName": "RegisterParameter"
			}
		},








		{
			"description": [
				""
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Process}}",
				"locator": "CssSelector",
				"onElement": "#elementId",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"description": [
				""
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Process --EncryptionKey:myEncryptionKey}}",
				"locator": "CssSelector",
				"onElement": "#elementId",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"description": [
				""
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Process}}",
				"locator": "Xpath",
				"onElement": "//a[@id='elementId']",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"description": [
				""
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Process --EncryptionKey:myEncryptionKey}}",
				"locator": "Xpath",
				"onElement": "//a[@id='elementId']",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"description": [
				""
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Process}}",
				"locator": "Id",
				"onElement": "elementId",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"description": [
				""
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Process --EncryptionKey:myEncryptionKey}}",
				"locator": "Id",
				"onElement": "elementId",
				"pluginName": "RegisterParameter"
			}
		},







		{
			"description": [
				""
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Session}}",
				"locator": "CssSelector",
				"onElement": "#elementId",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"description": [
				""
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Session --EncryptionKey:myEncryptionKey}}",
				"locator": "CssSelector",
				"onElement": "#elementId",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"description": [
				"This configuration registers a parameter obtained from a web element within the Session scope."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Session}}",
				"locator": "Xpath",
				"onElement": "//a[@id='elementId']",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"description": [
				"This configuration registers a parameter obtained from a web element within the Session scope."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Session --EncryptionKey:myEncryptionKey}}",
				"locator": "Xpath",
				"onElement": "//a[@id='elementId']",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"description": [
				"This configuration registers a parameter obtained from a web element within the Session scope."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Session}}",
				"locator": "Id",
				"onElement": "elementId",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"description": [
				"This configuration registers a parameter obtained from a web element within the Session scope."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Session --EncryptionKey:myEncryptionKey}}",
				"locator": "Id",
				"onElement": "elementId",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"description": [
				"This configuration registers a parameter obtained from a web element within the User scope."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:User}}",
				"locator": "CssSelector",
				"onElement": "#elementId",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"description": [
				"This configuration registers a parameter obtained from a web element within the User scope."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:User --EncryptionKey:myEncryptionKey}}",
				"locator": "CssSelector",
				"onElement": "#elementId",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"description": [
				"This configuration registers a parameter obtained from a web element within the User scope."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:User}}",
				"locator": "Xpath",
				"onElement": "//a[@id='elementId']",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"description": [
				"This configuration registers a parameter obtained from a web element within the User scope."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:User --EncryptionKey:myEncryptionKey}}",
				"locator": "Xpath",
				"onElement": "//a[@id='elementId']",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"description": [
				"This configuration registers a parameter obtained from a web element within the User scope."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:User}}",
				"locator": "Id",
				"onElement": "elementId",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"description": [
				"This configuration registers a parameter obtained from a web element within the User scope."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:User --EncryptionKey:myEncryptionKey}}",
				"locator": "Id",
				"onElement": "elementId",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by extracting the href attribute from a web element within the session scope."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Application}}",
				"locator": "CssSelector",
				"onAttribute": "href",
				"onElement": "#linkId",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by extracting the href attribute from a web element within the session scope."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Application --EncryptionKey:myEncryptionKey}}",
				"locator": "CssSelector",
				"onAttribute": "href",
				"onElement": "#linkId",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by extracting the href attribute from a web element within the session scope."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Application}}",
				"locator": "Xpath",
				"onAttribute": "href",
				"onElement": "//a[@id='linkId']",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by extracting the href attribute from a web element within the session scope."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Application --EncryptionKey:myEncryptionKey}}",
				"locator": "Xpath",
				"onAttribute": "href",
				"onElement": "//a[@id='linkId']",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by extracting the href attribute from a web element within the session scope."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Application}}",
				"locator": "Id",
				"onAttribute": "href",
				"onElement": "linkId",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by extracting the href attribute from a web element within the session scope."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Application --EncryptionKey:myEncryptionKey}}",
				"locator": "Id",
				"onAttribute": "href",
				"onElement": "linkId",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by extracting the href attribute from a web element within the session scope."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Application --Environment:Development}}",
				"locator": "CssSelector",
				"onAttribute": "href",
				"onElement": "#linkId",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by extracting the href attribute from a web element within the session scope."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Application --Environment:Development --EncryptionKey:myEncryptionKey}}",
				"locator": "CssSelector",
				"onAttribute": "href",
				"onElement": "#linkId",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by extracting the href attribute from a web element within the session scope."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Application --Environment:Development}}",
				"locator": "Xpath",
				"onAttribute": "href",
				"onElement": "//a[@id='linkId']",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by extracting the href attribute from a web element within the session scope."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Application --Environment:Development --EncryptionKey:myEncryptionKey}}",
				"locator": "Xpath",
				"onAttribute": "href",
				"onElement": "//a[@id='linkId']",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by extracting the href attribute from a web element within the session scope."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Application --Environment:Development}}",
				"locator": "Id",
				"onAttribute": "href",
				"onElement": "linkId",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by extracting the href attribute from a web element within the session scope."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Application --Environment:Development --EncryptionKey:myEncryptionKey}}",
				"locator": "Id",
				"onAttribute": "href",
				"onElement": "linkId",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by extracting the href attribute from a web element within the session scope."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Machine}}",
				"locator": "CssSelector",
				"onAttribute": "href",
				"onElement": "#linkId",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by extracting the href attribute from a web element within the session scope."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Machine --EncryptionKey:myEncryptionKey}}",
				"locator": "CssSelector",
				"onAttribute": "href",
				"onElement": "#linkId",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by extracting the href attribute from a web element within the session scope."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Machine}}",
				"locator": "Xpath",
				"onAttribute": "href",
				"onElement": "//a[@id='linkId']",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by extracting the href attribute from a web element within the session scope."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Machine --EncryptionKey:myEncryptionKey}}",
				"locator": "Xpath",
				"onAttribute": "href",
				"onElement": "//a[@id='linkId']",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by extracting the href attribute from a web element within the session scope."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Machine}}",
				"locator": "Id",
				"onAttribute": "href",
				"onElement": "linkId",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by extracting the href attribute from a web element within the session scope."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Machine --EncryptionKey:myEncryptionKey}}",
				"locator": "Id",
				"onAttribute": "href",
				"onElement": "linkId",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by extracting the href attribute from a web element within the session scope."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Process}}",
				"locator": "CssSelector",
				"onAttribute": "href",
				"onElement": "#linkId",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by extracting the href attribute from a web element within the session scope."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Process --EncryptionKey:myEncryptionKey}}",
				"locator": "CssSelector",
				"onAttribute": "href",
				"onElement": "#linkId",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by extracting the href attribute from a web element within the session scope."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Process}}",
				"locator": "Xpath",
				"onAttribute": "href",
				"onElement": "//a[@id='linkId']",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by extracting the href attribute from a web element within the session scope."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Process --EncryptionKey:myEncryptionKey}}",
				"locator": "Xpath",
				"onAttribute": "href",
				"onElement": "//a[@id='linkId']",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by extracting the href attribute from a web element within the session scope."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Process}}",
				"locator": "Id",
				"onAttribute": "href",
				"onElement": "linkId",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by extracting the href attribute from a web element within the session scope."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Process --EncryptionKey:myEncryptionKey}}",
				"locator": "Id",
				"onAttribute": "href",
				"onElement": "linkId",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by extracting the href attribute from a web element within the session scope."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Session}}",
				"locator": "CssSelector",
				"onAttribute": "href",
				"onElement": "#linkId",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by extracting the href attribute from a web element within the session scope."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Session --EncryptionKey:myEncryptionKey}}",
				"locator": "CssSelector",
				"onAttribute": "href",
				"onElement": "#linkId",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by extracting the href attribute from a web element within the session scope."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Session}}",
				"locator": "Xpath",
				"onAttribute": "href",
				"onElement": "//a[@id='linkId']",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by extracting the href attribute from a web element within the session scope."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Session --EncryptionKey:myEncryptionKey}}",
				"locator": "Xpath",
				"onAttribute": "href",
				"onElement": "//a[@id='linkId']",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by extracting the href attribute from a web element within the session scope."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Session}}",
				"locator": "Id",
				"onAttribute": "href",
				"onElement": "linkId",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by extracting the href attribute from a web element within the session scope."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Session --EncryptionKey:myEncryptionKey}}",
				"locator": "Id",
				"onAttribute": "href",
				"onElement": "linkId",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by extracting the href attribute from a web element within the session scope."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:User}}",
				"locator": "CssSelector",
				"onAttribute": "href",
				"onElement": "#linkId",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by extracting the href attribute from a web element within the session scope."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:User --EncryptionKey:myEncryptionKey}}",
				"locator": "CssSelector",
				"onAttribute": "href",
				"onElement": "#linkId",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by extracting the href attribute from a web element within the session scope."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:User}}",
				"locator": "Xpath",
				"onAttribute": "href",
				"onElement": "//a[@id='linkId']",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by extracting the href attribute from a web element within the session scope."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:User --EncryptionKey:myEncryptionKey}}",
				"locator": "Xpath",
				"onAttribute": "href",
				"onElement": "//a[@id='linkId']",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by extracting the href attribute from a web element within the session scope."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:User}}",
				"locator": "Id",
				"onAttribute": "href",
				"onElement": "linkId",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by extracting the href attribute from a web element within the session scope."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:User --EncryptionKey:myEncryptionKey}}",
				"locator": "Id",
				"onAttribute": "href",
				"onElement": "linkId",
				"pluginName": "RegisterParameter"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by applying a regular expression to the extracted value."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Application}}",
				"locator": "CssSelector",
				"onElement": "#elementId",
				"pluginName": "RegisterParameter",
				"regularExpression": "\\d+"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by applying a regular expression to the extracted value."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Application --EncryptionKey:myEncryptionKey}}",
				"locator": "CssSelector",
				"onElement": "#elementId",
				"pluginName": "RegisterParameter",
				"regularExpression": "\\d+"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by applying a regular expression to the extracted value."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Application}}",
				"locator": "Xpath",
				"onElement": "//a[@id='elementId']",
				"pluginName": "RegisterParameter",
				"regularExpression": "\\d+"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by applying a regular expression to the extracted value."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Application --EncryptionKey:myEncryptionKey}}",
				"locator": "Xpath",
				"onElement": "//a[@id='elementId']",
				"pluginName": "RegisterParameter",
				"regularExpression": "\\d+"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by applying a regular expression to the extracted value."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Application}}",
				"locator": "Id",
				"onElement": "elementId",
				"pluginName": "RegisterParameter",
				"regularExpression": "\\d+"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by applying a regular expression to the extracted value."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Application --EncryptionKey:myEncryptionKey}}",
				"locator": "Id",
				"onElement": "elementId",
				"pluginName": "RegisterParameter",
				"regularExpression": "\\d+"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by applying a regular expression to the extracted value."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Application --Environment:Development}}",
				"locator": "CssSelector",
				"onElement": "#elementId",
				"pluginName": "RegisterParameter",
				"regularExpression": "\\d+"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by applying a regular expression to the extracted value."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Application --Environment:Development --EncryptionKey:myEncryptionKey}}",
				"locator": "CssSelector",
				"onElement": "#elementId",
				"pluginName": "RegisterParameter",
				"regularExpression": "\\d+"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by applying a regular expression to the extracted value."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Application --Environment:Development}}",
				"locator": "Xpath",
				"onElement": "//a[@id='elementId']",
				"pluginName": "RegisterParameter",
				"regularExpression": "\\d+"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by applying a regular expression to the extracted value."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Application --Environment:Development --EncryptionKey:myEncryptionKey}}",
				"locator": "Xpath",
				"onElement": "//a[@id='elementId']",
				"pluginName": "RegisterParameter",
				"regularExpression": "\\d+"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by applying a regular expression to the extracted value."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Application --Environment:Development}}",
				"locator": "Id",
				"onElement": "elementId",
				"pluginName": "RegisterParameter",
				"regularExpression": "\\d+"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by applying a regular expression to the extracted value."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Application --Environment:Development --EncryptionKey:myEncryptionKey}}",
				"locator": "Id",
				"onElement": "elementId",
				"pluginName": "RegisterParameter",
				"regularExpression": "\\d+"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by applying a regular expression to the extracted value."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Machine}}",
				"locator": "CssSelector",
				"onElement": "#elementId",
				"pluginName": "RegisterParameter",
				"regularExpression": "\\d+"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by applying a regular expression to the extracted value."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Machine --EncryptionKey:myEncryptionKey}}",
				"locator": "CssSelector",
				"onElement": "#elementId",
				"pluginName": "RegisterParameter",
				"regularExpression": "\\d+"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by applying a regular expression to the extracted value."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Machine}}",
				"locator": "Xpath",
				"onElement": "//a[@id='elementId']",
				"pluginName": "RegisterParameter",
				"regularExpression": "\\d+"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by applying a regular expression to the extracted value."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Machine --EncryptionKey:myEncryptionKey}}",
				"locator": "Xpath",
				"onElement": "//a[@id='elementId']",
				"pluginName": "RegisterParameter",
				"regularExpression": "\\d+"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by applying a regular expression to the extracted value."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Machine}}",
				"locator": "Id",
				"onElement": "elementId",
				"pluginName": "RegisterParameter",
				"regularExpression": "\\d+"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by applying a regular expression to the extracted value."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Machine --EncryptionKey:myEncryptionKey}}",
				"locator": "Id",
				"onElement": "elementId",
				"pluginName": "RegisterParameter",
				"regularExpression": "\\d+"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by applying a regular expression to the extracted value."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Process}}",
				"locator": "CssSelector",
				"onElement": "#elementId",
				"pluginName": "RegisterParameter",
				"regularExpression": "\\d+"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by applying a regular expression to the extracted value."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Process --EncryptionKey:myEncryptionKey}}",
				"locator": "CssSelector",
				"onElement": "#elementId",
				"pluginName": "RegisterParameter",
				"regularExpression": "\\d+"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by applying a regular expression to the extracted value."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Process}}",
				"locator": "Xpath",
				"onElement": "//a[@id='elementId']",
				"pluginName": "RegisterParameter",
				"regularExpression": "\\d+"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by applying a regular expression to the extracted value."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Process --EncryptionKey:myEncryptionKey}}",
				"locator": "Xpath",
				"onElement": "//a[@id='elementId']",
				"pluginName": "RegisterParameter",
				"regularExpression": "\\d+"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by applying a regular expression to the extracted value."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Process}}",
				"locator": "Id",
				"onElement": "elementId",
				"pluginName": "RegisterParameter",
				"regularExpression": "\\d+"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by applying a regular expression to the extracted value."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Process --EncryptionKey:myEncryptionKey}}",
				"locator": "Id",
				"onElement": "elementId",
				"pluginName": "RegisterParameter",
				"regularExpression": "\\d+"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by applying a regular expression to the extracted value."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Session}}",
				"locator": "CssSelector",
				"onElement": "#elementId",
				"pluginName": "RegisterParameter",
				"regularExpression": "\\d+"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by applying a regular expression to the extracted value."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Session --EncryptionKey:myEncryptionKey}}",
				"locator": "CssSelector",
				"onElement": "#elementId",
				"pluginName": "RegisterParameter",
				"regularExpression": "\\d+"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by applying a regular expression to the extracted value."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Session}}",
				"locator": "Xpath",
				"onElement": "//a[@id='elementId']",
				"pluginName": "RegisterParameter",
				"regularExpression": "\\d+"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by applying a regular expression to the extracted value."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Session --EncryptionKey:myEncryptionKey}}",
				"locator": "Xpath",
				"onElement": "//a[@id='elementId']",
				"pluginName": "RegisterParameter",
				"regularExpression": "\\d+"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by applying a regular expression to the extracted value."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Session}}",
				"locator": "Id",
				"onElement": "elementId",
				"pluginName": "RegisterParameter",
				"regularExpression": "\\d+"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by applying a regular expression to the extracted value."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:Session --EncryptionKey:myEncryptionKey}}",
				"locator": "Id",
				"onElement": "elementId",
				"pluginName": "RegisterParameter",
				"regularExpression": "\\d+"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by applying a regular expression to the extracted value."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:User}}",
				"locator": "CssSelector",
				"onElement": "#elementId",
				"pluginName": "RegisterParameter",
				"regularExpression": "\\d+"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by applying a regular expression to the extracted value."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:User --EncryptionKey:myEncryptionKey}}",
				"locator": "CssSelector",
				"onElement": "#elementId",
				"pluginName": "RegisterParameter",
				"regularExpression": "\\d+"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by applying a regular expression to the extracted value."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:User}}",
				"locator": "Xpath",
				"onElement": "//a[@id='elementId']",
				"pluginName": "RegisterParameter",
				"regularExpression": "\\d+"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by applying a regular expression to the extracted value."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:User --EncryptionKey:myEncryptionKey}}",
				"locator": "Xpath",
				"onElement": "//a[@id='elementId']",
				"pluginName": "RegisterParameter",
				"regularExpression": "\\d+"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by applying a regular expression to the extracted value."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:User}}",
				"locator": "Id",
				"onElement": "elementId",
				"pluginName": "RegisterParameter",
				"regularExpression": "\\d+"
			}
		},
		{
			"description": [
				"This configuration registers a parameter by applying a regular expression to the extracted value."
			],
			"rule": {
				"argument": "{{$ --Name:parameterName --Scope:User --EncryptionKey:myEncryptionKey}}",
				"locator": "Id",
				"onElement": "elementId",
				"pluginName": "RegisterParameter",
				"regularExpression": "\\d+"
			}
		}
	],
	"key": "RegisterParameter",
	"manifestVersion": 4,
	"parameters": [
		{
			"description": [
				"Label used to store the parameter value.",
				"Clear labels make it easy to find and update saved data later.",
				"Fixed text or expressions enable dynamic label creation."
			],
			"mandatory": false,
			"name": "Name",
			"type": "String"
		},
		{
			"description": [
				"Location where the parameter is saved.",
				"Options include session memory, application storage, machine settings, user profile, or process memory.",
				"The list adds new scopes automatically when they become available.",
				"Automatic updates ensure the setup stays current without manual changes."
			],
			"mandatory": false,
			"name": "Scope",
			"type": "SetParameter"
		},
		{
			"default": "SystemParameters",
			"description": [
				"Environment that defines where parameter values apply.",
				"Environments separate settings for different projects or stages.",
				"Separate environments prevent test values from mixing with live data."
			],
			"mandatory": false,
			"name": "Environment",
			"type": "String"
		},
		{
			"description": [
				"Value that the plugin saves as a parameter.",
				"Text, numbers, or expressions can be stored as the value.",
				"Correct values ensure scripts can reuse data accurately."
			],
			"mandatory": false,
			"name": "Value",
			"type": "String"
		},
		{
			"description": [
				"Secret key used to encrypt the saved data.",
				"Encryption protects sensitive information during storage.",
				"Data stored without encryption remains in plain text."
			],
			"mandatory": false,
			"name": "EncryptionKey",
			"type": "String"
		}
	],
	"platforms": [
		"Any"
	],
	"pluginType": "Action",
	"properties": [
		{
			"description": [
				"Use this value to name the data that gets saved.",
				"The name can be a fixed term or a dynamic expression.",
				"A clear name makes it easier to find and reuse the saved data later."
			],
			"mandatory": true,
			"name": "Argument",
			"type": "String|Expression"
		},
		{
			"default": "Xpath",
			"description": [
				"Choose how to find the element that holds the data.",
				"XPath is used when no other method is given.",
				"A precise choice helps capture the correct data."
			],
			"name": "Locator",
			"type": "String"
		},
		{
			"description": [
				"Pick an attribute that holds the data you need.",
				"It will read the attribute’s value from the element.",
				"Choosing the right attribute ensures the correct data is captured."
			],
			"mandatory": false,
			"name": "OnAttribute",
			"type": "String"
		},
		{
			"description": [
				"Select the element that contains the data when no value is given directly.",
				"It will read the data from that element.",
				"Pointing to the right element ensures the correct information is used."
			],
			"mandatory": false,
			"name": "OnElement",
			"type": "String"
		},
		{
			"default": "(?s).*",
			"description": [
				"Define a text pattern to run on the value before saving.",
				"Only the parts that match the pattern are kept.",
				"The result is then turned into Base64 so it can be stored safely."
			],
			"mandatory": false,
			"name": "RegularExpression",
			"type": "Regex"
		}
	],
	"protocol": {
		"apiDocumentation": "None",
		"w3c": "None"
	},
	"summary": [
		"The RegisterParameter plugin captures values from user input or elements and saves them for later use.",
		"It can keep values in different places and can pull out parts of a value or change how it looks.",
		"Keeping data organized makes it easy to find and helps tasks run smoothly."
	]
}
