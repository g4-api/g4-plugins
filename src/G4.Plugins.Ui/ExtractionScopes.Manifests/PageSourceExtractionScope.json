{
	"author": {
		"link": "https://www.linkedin.com/in/roei-sabag-247aa18/",
		"name": "Roei Sabag"
	},
	"categories": [
		"DataExtraction"
	],
	"description": [
		"> [!IMPORTANT]  ",
		"> This scope creates an internal DOM object and only supports XPath expressions.",
		"",
		"### Purpose",
		"",
		"The `PageSource` extraction scope is designed for web scraping tasks focused on collecting data from the static HTML content of a web page, exactly as it is received when a GET request is made to the web server. ",
		"It ensures that the extracted data represents the web page's original HTML structure, excluding any dynamic or client-side generated content, such as updates triggered by JavaScript or AJAX.",
		"",
		"### Key Features and Functionality",
		"",
		"| Feature                      | Description                                                                                                             |",
		"|------------------------------|-------------------------------------------------------------------------------------------------------------------------|",
		"| Static Content Extraction    | Captures data from the web page's initial, unchanging content, including plain text, images, links, and other elements. |",
		"| Excludes Dynamic Content     | Focuses on the core HTML structure, excluding content generated by client-side scripting after the initial page load.   |",
		"| Ideal for Standard Web Pages | Suitable for websites with straightforward HTML structures and minimal client-side scripting.                           |",
		"| XPath-Based Data Collection  | Utilizes XPath expressions to pinpoint and extract specific elements within the static HTML.                            |",
		"| Stability and Predictability | Ensures consistent extraction of data from stable HTML structures, ideal for repeated or scheduled tasks.               |",
		"",
		"### Usages in RPA",
		"",
		"| Usage                     | Description                                                                                        |",
		"|---------------------------|----------------------------------------------------------------------------------------------------|",
		"| Static Content Extraction | Used to collect data from web pages where the content does not change after the initial page load. |",
		"| Automated Reporting       | Ideal for aggregating and analyzing data from multiple web pages in their original HTML form.      |",
		"| Monitoring and Analysis   | Suitable for monitoring changes in static content over time, ensuring accurate data collection.    |",
		"",
		"### Usages in Automation Testing",
		"",
		"| Usage                     | Description                                                                                                               |",
		"|---------------------------|---------------------------------------------------------------------------------------------------------------------------|",
		"| Page State Validation     | Validates the original HTML structure of a web page in end-to-end tests, ensuring content is as expected.                 |",
		"| Regression Testing        | Helps in regression testing by capturing the HTML body content before and after changes to detect unintended alterations. |",
		"| Stability and Consistency | Ensures that static content remains consistent across different test environments and test runs.                          |",
		"",
		"### See Also",
		"",
		"- [HTML Agility Pack Documentation](https://html-agility-pack.net/)",
		"- [HTML Agility Pack GitHub Repository](https://github.com/zzzprojects/html-agility-pack)"
	],
	"examples": [
		{
			"description": [
				"Extract the text associated with the `Location` label from the `ExportData.html` web page. ",
				"This example demonstrates how to call the `PageSource` plugin directly, specifying the `onElement`, `contentRules`, and `dataCollector` properties. ",
				"The `Location` text within a `div` element with the class `hotel` is located, a regular expression is applied to capture the text following the label, and the extracted data is stored in JSON format in the `DataFile.json` file."
			],
			"rule": {
				"contentRules": [
					{
						"clearLinesBreak": false,
						"key": "Location",
						"onElement": ".//p[starts-with(.,'Location:')]",
						"regularExpression": "(?<=\\w+:).*",
						"trim": false
					}
				],
				"dataCollector": {
					"ForEntity": true,
					"Source": "DataFile.json",
					"Type": "JsonDataCollector"
				},
				"onElement": "//div[@class='hotel']",
				"pluginName": "PageSource"
			}
		},
		{
			"description": [
				"Extract the text associated with the `Location` label from the `ExportData.html` web page as part of an extraction rule within an automation request. ",
				"This example shows how to use the `PageSource` plugin within an extraction rule setup. ",
				"It locates the `Location` text within a `div` element with the class `hotel`, applies a regular expression to capture the text following the label, and stores the extracted data in JSON format in the `DataFile.json` file."
			],
			"rule": {
				"contentRules": [
					{
						"clearLinesBreak": false,
						"key": "Location",
						"onElement": ".//p[starts-with(.,'Location:')]",
						"regularExpression": "(?<=\\w+:).*",
						"trim": false
					}
				],
				"dataCollector": {
					"ForEntity": true,
					"Source": "DataFile.json",
					"Type": "JsonDataCollector"
				},
				"extractionScope": "PageSource",
				"onElement": "//div[@class='hotel']"
			}
		}
	],
	"key": "PageSource",
	"manifestVersion": 4,
	"pluginType": "ExtractionScope",
	"properties": [
		{
			"description": [
				"Specifies the target element within the static HTML from which data is to be extracted. This is typically defined using an XPath expression."
			],
			"mandatory": true,
			"name": "OnElement",
			"type": "String|Expression"
		},
		{
			"default": "Xpath",
			"description": [
				"Specifies the locator strategy used to identify the target elements within the static HTML. The default value is 'Xpath'."
			],
			"mandatory": false,
			"name": "Locator",
			"type": "String"
		},
		{
			"description": [
				"Defines the rules for extracting content from the specified element, such as applying regular expressions or trimming the extracted data."
			],
			"mandatory": true,
			"name": "Rules",
			"type": "Object"
		},
		{
			"description": [
				"Specifies how the extracted data will be collected and stored, such as saving it in JSON format or another supported format."
			],
			"mandatory": false,
			"name": "DataCollector",
			"type": "Object"
		},
		{
			"default": "(?s).*",
			"description": [
				"Specifies a regular expression to be applied to the extracted content before it is processed. ",
				"This allows for more flexible validation and extraction of text that may require pattern matching."
			],
			"mandatory": false,
			"name": "RegularExpression",
			"type": "Regex"
		}
	],
	"protocol": {
		"apiDocumentation": "https://html-agility-pack.net/documentation",
		"w3c": "GET /session/{session id}/source"
	},
	"scopes": [
		"Web",
		"MobileWeb"
	],
	"summary": [
		"The `PageSource` plugin extracts data from a web page's static HTML content as initially loaded, focusing on XPath-based element selection.",
		"In robotic process automation (RPA), it is used for extracting static content from web pages where dynamic content is not required.",
		"In automation testing, it validates the core HTML structure of a page, supporting scenarios where the integrity of static content is critical."
	]
}
