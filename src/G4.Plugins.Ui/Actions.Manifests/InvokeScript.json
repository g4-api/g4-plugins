{
	"aliases": [
		"ExecuteScript"
	],
	"author": {
		"link": "https://www.linkedin.com/in/roei-sabag-247aa18/",
		"name": "Roei Sabag"
	},
	"categories": [
		"WebDriver"
	],
	"context": {
		"integration": {
			"sequentialWorkflow": {
				"$type": "Action",
				"componentType": "task",
				"iconProvider": "script",
				"model": "ActionRuleModel"
			}
		}
	},
	"description": [
		"### Purpose",
		"",
		"The primary purpose of the `InvokeScript` plugin is to execute scripts within the context of the current session. ",
		"The type of script executed is determined by the environment; for instance, JavaScript in web browsers, Xcode scripts on iOS, or PowerShell scripts on Windows.",
		"",
		"### Key Features and Functionality",
		"",
		"| Feature             | Description                                                           |",
		"|---------------------|-----------------------------------------------------------------------|",
		"| Script Execution    | Executes environment-specific scripts within the current session.     |",
		"| Element Interaction | Allows interaction with elements by passing them as script arguments. |",
		"| Custom Arguments    | Supports passing custom arguments to the script.                      |",
		"| Result Storage      | Stores the result of the script execution in session parameters.      |",
		"",
		"### Usages in RPA",
		"",
		"| Usage               | Description                                                               |",
		"|---------------------|---------------------------------------------------------------------------|",
		"| Custom Actions      | Perform custom actions on elements using environment-specific scripts.    |",
		"| Data Extraction     | Extract data from the environment using custom scripts.                   |",
		"| Dynamic Interaction | Interact with elements dynamically based on the script execution results. |",
		"",
		"### Usages in Automation Testing",
		"",
		"| Usage                   | Description                                                                                                 |",
		"|-------------------------|-------------------------------------------------------------------------------------------------------------|",
		"| Script Validation       | Validate the execution of scripts and their effects on the environment.                                     |",
		"| Environment Interaction | Test the effects of scripts on the environment (e.g., DOM manipulation in web, system configuration in OS). |",
		"| Custom Test Scenarios   | Create and execute custom test scenarios by running environment-specific scripts.                           |"
	],
	"examples": [
		{
			"description": [
				"Execute a JavaScript code that sets the value of the input element with the `ID` `InputEnabled` to `Foo Bar` in a web browser."
			],
			"rule": {
				"argument": "document.querySelector('#InputEnabled').value='Foo Bar';",
				"pluginName": "InvokeScript"
			}
		},
		{
			"description": [
				"Execute a JavaScript code block that sets the value of the input element with the `ID` `InputEnabled` to `Foo Bar` using the `ScriptBlock` parameter in a web browser."
			],
			"rule": {
				"argument": "{{$ --ScriptBlock:document.querySelector('#InputEnabled').value='Foo Bar';}}",
				"pluginName": "InvokeScript"
			}
		},
		{
			"description": [
				"Execute a JavaScript code block that sets the value of the input element with the `ID` `InputEnabled` to the value passed in the `Arguments` parameter (`Foo Bar`) in a web browser."
			],
			"rule": {
				"argument": "{{$ --ScriptBlock:document.querySelector('#InputEnabled').value=arguments[0]; --Arguments:[\"Foo Bar\"]}}",
				"pluginName": "InvokeScript"
			}
		},
		{
			"description": [
				"Execute a JavaScript code block that sets the value of the element passed as the first argument (`#InputEnabled`) to the value passed as the second argument (`Foo Bar`) in a web browser."
			],
			"rule": {
				"argument": "{{$ --ScriptBlock:arguments[0].value=arguments[1]; --Arguments:[\"Foo Bar\"]}}",
				"locator": "CssSelector",
				"onElement": "#InputEnabled",
				"pluginName": "InvokeScript"
			}
		},
		{
			"description": [
				"Execute a JavaScript code block that sets the value of the element identified by the `CSS selector` `#InputEnabled` to `Foo Bar` in a web browser."
			],
			"rule": {
				"argument": "{{$ --ScriptBlock:arguments[0].value='Foo Bar';}}",
				"locator": "CssSelector",
				"onElement": "#InputEnabled",
				"pluginName": "InvokeScript"
			}
		}
	],
	"key": "InvokeScript",
	"manifestVersion": 4,
	"parameters": [
		{
			"description": [
				"Specifies the arguments to be passed to the script as a JSON array."
			],
			"mandatory": false,
			"name": "Arguments",
			"type": "String|Json"
		},
		{
			"description": [
				"Specifies the script code block to be executed."
			],
			"mandatory": false,
			"name": "ScriptBlock",
			"type": "String"
		}
	],
	"pluginType": "Action",
	"properties": [
		{
			"description": [
				"Specifies the script code to be executed. This can be a direct script or a reference to a script block defined in parameters."
			],
			"mandatory": true,
			"name": "Argument",
			"type": "String|Expression"
		},
		{
			"default": "Xpath",
			"description": [
				"Specifies the locator strategy to find the element. Supported locator types include `CssSelector`, `Xpath`, `LinkText`, etc."
			],
			"mandatory": false,
			"name": "Locator",
			"type": "String"
		},
		{
			"description": [
				"Specifies the actual element identifier using the locator strategy defined. For example, if the locator is `CssSelector`, this would be a CSS selector string."
			],
			"mandatory": false,
			"name": "OnElement",
			"type": "String"
		}
	],
	"protocol": {
		"apiDocumentation": "https://www.w3.org/TR/webdriver/#executing-script",
		"w3c": "POST /session/{session id}/execute/sync"
	},
	"scopes": [
		"Any"
	],
	"summary": [
		"The `InvokeScript` plugin allows for the execution of scripts within the context of the current session, providing powerful capabilities to manipulate elements, interact with the environment, and perform custom actions. ",
		"The type of script executed is determined by the environment, such as JavaScript in web browsers, Xcode scripts on iOS, or PowerShell scripts on Windows.",
		"In robotic process automation (RPA), this plugin is useful for performing custom actions on elements, extracting data, and dynamically interacting with elements based on the results of the script execution.",
		"In automation testing, the `InvokeScript` plugin is essential for validating script execution, testing the effects of scripts on the environment, and creating custom test scenarios by running environment-specific scripts."
	]
}
