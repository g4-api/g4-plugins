{
	"aliases": [
		"ElementsCount",
		"Count"
	],
	"author": {
		"link": "https://www.linkedin.com/in/roei-sabag-247aa18/",
		"name": "Roei Sabag"
	},
	"categories": [
		"Validations",
		"WebDriver"
	],
	"description": [
		"### Purpose",
		"",
		"The `ElementCount` plugin is designed to validate the number of elements matching a specified locator within automation scripts. ",
		"It provides a robust mechanism to assert that the number of elements meets specific conditions, making it essential for scenarios where the presence of multiple elements needs to be verified.",
		"",
		"### Key Features and Functionality",
		"",
		"| Feature                    | Description                                                                                                |",
		"|----------------------------|------------------------------------------------------------------------------------------------------------|",
		"| Count Validation           | Validates that the number of elements matching the locator meets the expected condition.                   |",
		"| Flexible Assertions        | Supports a range of operators, including equality, inequality, and numeric comparisons.                    |",
		"| Regular Expression Support | Applies regular expressions to the count value before performing assertions, enabling complex validations. |",
		"",
		"### Usages in RPA",
		"",
		"| Usage                        | Description                                                                                                                      |",
		"|------------------------------|----------------------------------------------------------------------------------------------------------------------------------|",
		"| Presence Validation          | Ensures that a specified number of elements exist, crucial for verifying the presence of items like list entries or form fields. |",
		"| Dynamic Content Verification | Validates that dynamically generated elements match the expected count, preventing errors in automated workflows.                |",
		"",
		"### Usages in Automation Testing",
		"",
		"| Usage                        | Description                                                                                                                            |",
		"|------------------------------|----------------------------------------------------------------------------------------------------------------------------------------|",
		"| UI Consistency Verification  | Ensures that the expected number of UI elements are present across different environments and test runs.                               |",
		"| Regression Testing           | Validates that changes to the application do not affect the expected count of elements, ensuring consistency in user interfaces.       |",
		"| Performance Data Validation  | Checks that the number of elements loaded on the page matches the expected performance metrics, ensuring optimal application behavior. |"
	],
	"examples": [
		{
			"description": [
				"Assert that the count of elements matching the locator `//*[@class='item']` equals `5`. ",
				"This is useful for scenarios where the script needs to ensure that exactly 5 elements with the class `item` are present on the page."
			],
			"rule": {
				"argument": "{{$ --Operator:Equal --Expected:5}}",
				"onElement": "//*[@class='item']",
				"pluginName": "ElementCount"
			}
		},
		{
			"description": [
				"Ensure that the count of elements matching the locator `//*[@class='active-item']` is greater than `10`. ",
				"This assertion checks if the number of active items on the page exceeds 10, confirming the correct dynamic loading of content."
			],
			"rule": {
				"argument": "{{$ --Operator:Greater --Expected:10}}",
				"onElement": "//*[@class='active-item']",
				"pluginName": "ElementCount"
			}
		},
		{
			"description": [
				"Perform an assertion to ensure that the count of elements matching the locator `//*[@class='error']` is less than or equal to `3`. ",
				"This is useful for scenarios where the script needs to confirm that the number of error messages displayed does not exceed a specific threshold."
			],
			"rule": {
				"argument": "{{$ --Condition:ElementCount --Operator:LowerEqual --Expected:3}}",
				"onElement": "//*[@class='error']",
				"pluginName": "Assert"
			}
		},
		{
			"description": [
				"Assert that the count of elements matching the CSS selector `.list-item`, after applying the regular expression '\\d+', is not equal to `0`. ",
				"This validation ensures that the list contains items, preventing scenarios where the list might be empty unexpectedly."
			],
			"rule": {
				"argument": "{{$ --Condition:ElementCount --Operator:NotEqual --Expected:0}}",
				"locator": "CssSelector",
				"onElement": ".list-item",
				"pluginName": "Assert",
				"regularExpression": "\\d+"
			}
		},
		{
			"description": [
				"Perform an assertion to ensure that the count of elements matching the locator `//*[@data-status='completed']` is greater than or equal to `5`. ",
				"This is useful for validating that the number of completed items on the page meets or exceeds a specific value."
			],
			"rule": {
				"argument": "{{$ --Condition:ElementCount --Operator:GreaterEqual --Expected:5}}",
				"onElement": "//*[@data-status='completed']",
				"pluginName": "Assert"
			}
		},
		{
			"description": [
				"Assert that the count of elements matching the locator `//*[@class='entry']` is lower than `20`. ",
				"This validation ensures that the number of entries displayed on the page does not exceed a certain limit, confirming the correct pagination or loading behavior."
			],
			"rule": {
				"argument": "{{$ --Condition:ElementCount --Operator:Lower --Expected:20}}",
				"onElement": "//*[@class='entry']",
				"pluginName": "Assert"
			}
		},
		{
			"description": [
				"Check that the count of elements matching the locator `//*[@id='section']//div` matches the regular expression '\\d+', ensuring that the count is purely numeric."
			],
			"rule": {
				"argument": "{{$ --Condition:ElementCount --Operator:Match --Expected:\\d+}}",
				"onElement": "//*[@id='section']//div",
				"pluginName": "Assert"
			}
		},
		{
			"description": [
				"Assert that the count of elements matching the locator `//*[@class='active-item']` is not equal to `0`. ",
				"This validation is essential for ensuring that at least one active item is present on the page."
			],
			"rule": {
				"argument": "{{$ --Condition:ElementCount --Operator:NotEqual --Expected:0}}",
				"onElement": "//*[@class='active-item']",
				"pluginName": "Assert"
			}
		}
	],
	"key": "ElementCount",
	"manifestVersion": 4,
	"parameters": [
		{
			"description": [
				"Specifies the type of comparison or operation to be performed when evaluating the element count."
			],
			"mandatory": true,
			"name": "Operator",
			"type": "Operator"
		},
		{
			"description": [
				"Specifies the expected count value that the elements matching the locator should meet during the assertion."
			],
			"mandatory": true,
			"name": "Expected",
			"type": "String"
		}
	],
	"pluginType": "Assertion",
	"properties": [
		{
			"description": [
				"Specifies the condition under which the assertion will pass or fail. ",
				"This property allows users to define the operator of the condition (e.g., `Equal`, `Greater`, `Match`) and the expected value for the element count."
			],
			"mandatory": true,
			"name": "Argument",
			"type": "String|Expression"
		},
		{
			"default": "Xpath",
			"description": [
				"Specifies the locator strategy used to identify the target elements on the web page. The default value is 'Xpath'."
			],
			"mandatory": false,
			"name": "Locator",
			"type": "String"
		},
		{
			"description": [
				"Specifies the web elements to be counted. This can be defined using a locator strategy, such as Xpath, CSS Selector, etc."
			],
			"mandatory": true,
			"name": "OnElement",
			"type": "String|Expression"
		},
		{
			"default": "(?s).*",
			"description": [
				"Specifies a regular expression to be applied to the element count before performing the assertion. ",
				"This allows for more flexible validation of the count values that may require pattern matching."
			],
			"mandatory": false,
			"name": "RegularExpression",
			"type": "Regex"
		}
	],
	"protocol": {
		"apiDocumentation": "https://www.w3.org/TR/webdriver/#find-elements",
		"w3c": "POST /session/{session id}/elements"
	},
	"scopes": [
		"Any"
	],
	"summary": [
		"The `ElementCount` plugin validates the number of elements matching a specified locator, supporting a range of operators for flexible assertion. ",
		"It is commonly used in RPA to verify the presence of multiple elements, dynamic content, and form field counts, and in automation testing to ensure UI consistency, correct pagination, and proper dynamic content loading."
	]
}
